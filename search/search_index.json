{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResearchOS (pre-alpha version)","text":"<p>This is the documentation for ResearchOS, a Python package for scientific computing.</p>"},{"location":"#install-with-pip","title":"Install with pip","text":"<pre><code>pip install researchos\n</code></pre>"},{"location":"#project-description","title":"Project Description","text":"<p>Scientific computing is currently fractured, with many competing data standards (or lack thereof) and data processing tools that do not have a common way to communicate. ResearchOS provides a generalized framework to perform scientific computing of any kind, in a modular, easily shareable format.</p> <p>The primary innovation behind ResearchOS is to treat every single piece of the scientific data analysis workflow as an object, complete with ID and metadata. While this incurs some code overhead, the ability to have a standardized way to communicate between different parts of a pipeline and to share and integrate others' pipelines is invaluable, and sorely needed in the scientific computing community.</p>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"#version-01","title":"Version 0.1","text":"<ul> <li>[x] Do multiple things with one Action.</li> <li>[x] Create research objects, save and load them with attributes</li> <li>[x] Create edges between research objects and allow the edges to have their own attributes.</li> <li>[ ] Load and save even complex attributes (e.g. list of dicts) with JSON. Right now I'm just using json.loads()/dumps() but I may need something more sophisticated.</li> <li>[ ] Implement read logsheet.<ul> <li>[ ] Populate the database with the logsheet data.</li> </ul> </li> <li>[ ] Implement saving participant data to disk/the database.<ul> <li>[ ] Implement data schema for participant data</li> </ul> </li> <li>[ ] Implement subsets.</li> <li>[ ] Publish my proof of concept to JOSS.</li> </ul>"},{"location":"#version-02","title":"Version 0.2","text":"<ul> <li>[ ] Create a graph of research objects and edges</li> <li>[ ] Implement rollback-able version history for research objects</li> <li>[ ] Enhance multi-user support on the same machine.</li> <li>[ ] Look into CI/CD best practices, improve test coverage.</li> <li>[ ] Import/export a ResearchObject for sharing with other users.</li> <li>[ ] Export stats results to LaTeX tables.</li> <li>[ ] Export images to LaTeX figures.<ul> <li>[ ] For images with transparent backgrounds, allow them to be stacked so that multiple can be compared at once.</li> </ul> </li> </ul>"},{"location":"#version-03-and-beyond","title":"Version 0.3 and beyond","text":"<ul> <li>[ ] Implement a MariaDB-based backend for ResearchOS so that it can be used in a multi-user environment.</li> <li>[ ] Implement password-based authentication for the MariaDB backend.</li> <li>[ ] Implement a web-based frontend for ResearchOS.</li> <li>[ ] Get journals on board with ResearchOS so that they can accept ResearchObjects with submissions.</li> <li>[ ] Integrate ResearchOS with participant management systems like RedHat so that people &amp; data are linked.</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#example-1","title":"Example 1","text":"<p>Let's use ResearchOS to create a simple one step pipeline that reads a single number from a text file, squares it, and stores that value.</p> <p>First, after creating a new project directory and activating a virtual environment in that directory, install ResearchOS:</p> <pre><code>pip install researchos\n</code></pre> <p>Next, in the command line, run the following command:</p> <pre><code>python -m researchos quick-start\n</code></pre> <p>This will perform the following actions:</p> <ol> <li> <p>Create a new directory called 'researchos_db' in the current directory.</p> </li> <li> <p>Create a .db file in the 'researchos_db' directory with the proper schema.</p> </li> <li> <p>Create a new Project object in the .db file, and sets it to be the current Project.</p> </li> </ol> <p>Then, create a file called <code>example1.py</code> with the following contents:</p> <pre><code>from researchos.pipeline_objects.project import Project\n</code></pre> <p>This will create a new project.</p>"},{"location":"DiGraph/digraph/","title":"DiGraph","text":""},{"location":"DiGraph/digraph/#introduction","title":"Introduction","text":"<p>The NetworkX MultiDiGraph (directional graph that can have multiple parallel edges) is the data structure that organizes the relationships between all of the different research objects. Just like the objects themselves, the Research Object DiGraph models the relationships between all research objects across all projects. This is especially useful when there are objects that are common to multiple projects - they can be reused! And updates to the object in one project can propagate to other projects, if desired.</p> <p>The Research Object DiGraph consists of both Data Objects and Pipeline Objects - therefore it can become quite large and cumbersome to work with. For example if there are 10 Trial objects (DataObject) each referencing 10 Variable objects (DataObject &amp; PipelineObject), this can quickly become quite large (100 connections in this small example). Often, it is not necessary to have both DataObjects and PipelineObjects in the same graph. Therefore, Data Object DiGraphs and Pipeline Object DiGraphs can be created separately by using <code>data_objects = True</code> and <code>pipeline_objects = True</code> keyword arguments.</p> <p>Subgraphs can also be created by specifying the top level node. For example, to work with just one project's DiGraph, use the <code>source_node = {research_object_id}</code> keyword argument in the constructor, where <code>{research_object_id}</code> is the Project object's ID.</p>"},{"location":"DiGraph/digraph/#note-about-adding-objects-to-the-digraph","title":"Note About Adding Objects to the DiGraph","text":"<p>When adding objects to the DiGraph, they must exist before being added to the DiGraph! In the future the ability to create objects by adding them to the DiGraph may be added, but for now object creation and addition to the DiGraph are two entirely separate steps.</p>"},{"location":"Quick%20Start/quickstart/","title":"Quick Start","text":""},{"location":"Quick%20Start/quickstart/#to-run-quick-start-after-installing","title":"To run Quick Start after installing:","text":"<pre><code>&gt; researchos-quickstart\n</code></pre> <p>That will do the following:</p> <ol> <li> <p>Create a new directory called <code>researchos-quickstart</code>.</p> </li> <li> <p>Create a new quickstart.py file in that directory containing the basic steps for a new Project:</p> </li> </ol>"},{"location":"Quick%20Start/quickstart_py/","title":"quickstart.py","text":""},{"location":"Research%20Object%20Types/research_object/","title":"Research Objects","text":""},{"location":"Research%20Object%20Types/research_object/#overview","title":"Overview","text":"<p>Everything within the ResearchOS framework is a Research Object - at the highest level are User objects, and at the lowest are Variable objects. All Research Objects are stored in the database, and are accessible by using the methods provided in the ResearchOS API.</p> <p>All Research Objects are one or both of the following:</p> <ul> <li> <p>Data Objects - objects that are involved in storing data, such as a Subject or Trial. These objects are typically created by a Process, and are used to store data that is generated by a Process. It is perhaps helpful to recognize that these objects are similar in nature to the \"factors\" of a statistical analysis.</p> </li> <li> <p>Pipeline Objects - objects that are involved in performing data analysis, such as a Process or Project.</p> </li> </ul> <p></p> <p>One research object. Parent class of Data Objects &amp; Pipeline Objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>class ResearchObject():\n    \"\"\"One research object. Parent class of Data Objects &amp; Pipeline Objects.\"\"\"\n\n    prefix = \"RO\" # Testing only\n    _objects = weakref.WeakValueDictionary()\n    # _objects_count = {}   \n\n    def __hash__(self):\n        return hash(self.id)\n\n    def __eq__(self, other):\n        if isinstance(other, ResearchObject):\n            return self.id == other.id\n        return NotImplemented\n\n    def __str__(self, class_attr_names: list[str], attrs: dict) -&gt; str:\n        #         return_str = \"current_analysis_id: \" + self.current_analysis_id + \"\\n\" + ...\n        # \"current_dataset_id: \" + self.current_dataset_id + \"\\n\" + ...\n        # \"project_path: \" + self.project_path\n        pass\n\n    def __new__(cls, *args, **kwargs):\n        \"\"\"Create a new research object. If the object already exists, return the existing object.\n        If abstract is True, returns an abstract object that does not have an instance ID.\n        Otherwise, returns an instance object that has an instance ID.\"\"\"\n        if DEFAULT_ABSTRACT_KWARG_NAME not in kwargs.keys():\n            abstract = False\n        object_id = None\n        if len(args)==1:\n            object_id = args[0]\n        elif len(args) &gt; 1:\n            raise ValueError(\"Only id can be a positional argument\")\n        if object_id is None:\n            object_id = kwargs.get(\"id\", None)        \n        if object_id is None:            \n            object_id = cls.create_id(cls, is_abstract = abstract)\n        if object_id in ResearchObject._objects:\n            # ResearchObject._objects_count[object_id] += 1\n            return ResearchObject._objects[object_id]\n        else: # Create a new object.\n            instance = super(ResearchObject, cls).__new__(cls)\n            ResearchObject._objects[object_id] = instance\n            # ResearchObject._objects_count[object_id] = 1\n            instance.__dict__['id'] = object_id\n            return instance\n\n    def __init__(self, name: str = DEFAULT_NAME_ATTRIBUTE_NAME, default_attrs: dict = {}, **kwargs) -&gt; None:\n        \"\"\"id is required as either an arg or kwarg but will actually not be used here because it is assigned during __new__\"\"\"\n        id = self.id # self.id always exists by this point thanks to __new__\n        action = Action(name = name)\n        if not self.is_id(id):\n            raise ValueError(\"Not an ID!\")\n        if \"id\" in kwargs:\n            del kwargs[\"id\"]\n        try:\n            # Fails if the object does not exist.\n            is_new = False\n            self.load()\n        except ValueError:\n            # Create the new object in the database.\n            is_new = True            \n            sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n            action.add_sql_query(sqlquery)\n            action.execute(commit = False)            \n            default_attrs = {**default_attrs, **{DEFAULT_EXISTS_ATTRIBUTE_NAME: DEFAULT_EXISTS_ATTRIBUTE_VALUE, DEFAULT_NAME_ATTRIBUTE_NAME: name}} # Python 3.5 or later\n        all_attrs = {**default_attrs, **kwargs} # Append kwargs to default attributes. Overwrites default attributes with same key.\n        # def_attrs = default_attrs.copy()\n        # for attr in def_attrs:\n        #     if attr in kwargs:\n        #         del default_attrs[attr] # Remove the default attribute if it is specified in kwargs.\n        for attr in all_attrs:\n            validate = True\n            set_attr_flag = False\n            if attr in default_attrs:\n                if attr not in self.__dict__:\n                    set_attr_flag = True\n                if attr not in kwargs:\n                    validate = False\n            if attr in kwargs:\n                if attr not in default_attrs:\n                    validate = False\n                if attr not in self.__dict__:                    \n                    set_attr_flag = True\n                elif self.__dict__[attr] != kwargs[attr]:\n                    set_attr_flag = True\n            if set_attr_flag:\n                self.__setattr__(attr, all_attrs[attr], action = action, validate = validate)\n        if is_new:\n            action.execute()\n\n    @abstractmethod\n    def _get_time_ordered_result(result: list, action_col_num: int) -&gt; list[str]:\n        \"\"\"Return the result array from conn.cursor().execute() in reverse chronological order (e.g. latest first).\"\"\"\n        unordered_action_ids = [row[action_col_num] for row in result] # A list of action ID's in no particular order.\n        action_ids_str = ', '.join([f'\"{action_id}\"' for action_id in unordered_action_ids])\n        sqlquery = f\"SELECT action_id FROM actions WHERE action_id IN ({action_ids_str}) ORDER BY timestamp DESC\"\n        cursor = Action.conn.cursor()\n        ordered_action_ids = cursor.execute(sqlquery).fetchall()\n        if ordered_action_ids is None or len(ordered_action_ids) == 0:\n            raise ValueError(\"No actions found.\")\n        ordered_action_ids = [action_id[0] for action_id in ordered_action_ids]\n        indices = []\n        for action_id in ordered_action_ids:\n            for i, unordered_action_id in enumerate(unordered_action_ids):\n                if unordered_action_id == action_id:\n                    indices.append(i)                    \n            # indices.append(unordered_action_ids.index(action_id))\n        # indices = [ordered_action_ids.index(action_id) for action_id in unordered_action_ids]\n        sorted_result = [result[index] for index in indices]\n        return sorted_result\n\n    def load(self) -&gt; None:\n        \"\"\"Load the current state of a research object from the database.\"\"\"        \n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT action_id, attr_id, attr_value, target_object_id FROM research_object_attributes WHERE object_id = '{self.id}'\"\n        unordered_attr_result = cursor.execute(sqlquery).fetchall()\n        ordered_attr_result = ResearchObject._get_time_ordered_result(unordered_attr_result, action_col_num = 0)\n        if len(unordered_attr_result) == 0:\n            raise ValueError(\"No object with that ID exists.\")         \n\n        curr_obj_attr_ids = [row[1] for row in ordered_attr_result]\n        num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n        used_attr_ids = []\n        attrs = {}\n        attrs[\"id\"] = self.id\n        for row in ordered_attr_result:            \n            attr_id = row[1]\n            attr_value_json = row[2]\n            target_object_id = row[3]\n            if attr_id in used_attr_ids:\n                continue\n            else:\n                used_attr_ids.append(attr_id)                        \n\n            attr_name = ResearchObject._get_attr_name(attr_id)\n            # Translate the attribute from string to the proper type/format.                     \n            try:\n                from_json_method = eval(\"self.from_json_\" + attr_name)\n                attr_value = from_json_method(attr_value_json)\n            except AttributeError as e:\n                attr_value = json.loads(attr_value_json)            \n            # Now that the value is loaded as the proper type/format (and is not None), validate it.\n            try:\n                if attr_value is not None:\n                    validate_method = eval(\"self.validate_\" + attr_name)\n                    validate_method(attr_value)\n            except AttributeError as e:\n                pass\n            attrs[attr_name] = attr_value\n            if len(used_attr_ids) == num_attrs:\n                break # Every attribute is accounted for.\n\n        self.__dict__.update(attrs)\n\n    def __setattr__(self, __name: str, __value: Any, action: Action = None, validate: bool = True) -&gt; None:\n        \"\"\"Set the attributes of a research object in memory and in the SQL database.\n        Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it).\n        If it is not a built-in ResearchOS attribute, then no validation occurs.\"\"\"\n        # TODO: Have already implemented adding current_XXX_id object to digraph in the database, but should also update the in-memory digraph.        \n        if __name in self.__dict__ and self.__dict__.get(__name, None) == __value:\n            return # No change.\n        if __name == \"id\":\n            raise ValueError(\"Cannot change the ID of a research object.\")\n        if __name[0] == \"_\":\n            return # Don't log private attributes.\n        # Validate the value        \n        if validate:                                                      \n            try:\n                validate_method = eval(f\"self.validate_{__name}\")\n                validate_method(__value)\n            except AttributeError as e:\n                pass\n\n        to_json_method = None\n        try:\n            to_json_method = eval(f\"self.to_json_{__name}\")\n            json_value = to_json_method(__value)\n        except AttributeError as e:            \n            json_value = json.dumps(__value, indent = 4)\n\n        # Create an action.\n        execute_action = False\n        if action is None:\n            execute_action = True\n            action = Action(name = \"attribute_changed\")\n        # Update the attribute in the database.\n        try:\n            assert to_json_method is None # Cannot convert to json AND have a store method. Store method takes precedence.\n            method = eval(f\"self.store_{__name}\")            \n            action = method(__value, action = action)\n        except AttributeError as e:\n            self._default_store_obj_attr(__name, __value, json_value, action = action)            \n        # If the attribute contains the words \"current\" and \"id\" and the ID has been validated, add a digraph edge between the two objects with an attribute.\n        pattern = r\"^current_[\\w\\d]+_id$\"\n        if re.match(pattern, __name):\n            action = self._default_store_edge_attr(target_object_id = __value, name = __name, value = DEFAULT_EXISTS_ATTRIBUTE_VALUE, action = action)\n            # if self.__dict__.get(__name, None) != __value:\n            #     execute_action = True # Need to execute an action if adding an edge.\n        if execute_action:\n            action.execute()\n        self.__dict__[__name] = __value\n\n    def _default_store_edge_attr(self, target_object_id: str, name: str, value: Any, action: Action) -&gt; None:\n        \"\"\"Create a digraph edge between the current object and the target object with the specified attribute.\"\"\"\n        json_value = json.dumps(value, indent = 4)\n        sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value, target_object_id) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(name, value)}', '{json_value}', '{target_object_id}')\"\n        action.add_sql_query(sqlquery)\n        return action\n\n    def _default_store_obj_attr(self, __name: str, __value: Any, json_value: Any, action: Action) -&gt; Action:\n        \"\"\"If no store_attr method exists for the object attribute, use this default method.\"\"\"                                      \n        sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name, __value)}', '{json_value}')\"                \n        action.add_sql_query(sqlquery)\n        return action\n\n    ###############################################################################################################################\n    #################################################### end of dunder methods ####################################################\n    ###############################################################################################################################\n\n    @abstractmethod\n    def get_all_ids(cls) -&gt; list[str]:\n        \"\"\"Get all object IDs of the specified class.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT object_id FROM research_objects\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        return [row[0] for row in rows if (row[0] is not None and row[0].startswith(cls.prefix))]\n\n    @abstractmethod\n    def create_id(cls, abstract: str = None, instance: str = None, is_abstract: bool = False) -&gt; str:\n        \"\"\"Create a unique ID for the research object.\"\"\"\n        import random\n        table_name = \"research_objects\"\n        is_unique = False\n        while not is_unique:\n            if not abstract:\n                abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n                abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n            else:\n                abstract_new = abstract\n\n            if not instance:\n                instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n                instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n            else:\n                instance_new = instance\n            if is_abstract:\n                instance_new = \"\"\n\n            id = cls.prefix + abstract_new + \"_\" + instance_new\n            cursor = Action.conn.cursor()\n            sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n            cursor.execute(sql)\n            rows = cursor.fetchall()\n            if len(rows) == 0:\n                is_unique = True\n            elif is_abstract:\n                raise ValueError(\"Abstract ID already exists.\")\n        return id      \n\n    @abstractmethod\n    def _get_attr_id(attr_name: str, attr_value: Any) -&gt; int:\n        \"\"\"Get the ID of an attribute given its name. If it does not exist, create it.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n        cursor.execute(sqlquery)            \n        rows = cursor.fetchall()\n        if len(rows) &gt; 1:\n            raise Exception(\"More than one attribute with the same name.\")\n        elif len(rows)==0:\n            ResearchObject._create_attr(attr_name, attr_value)\n            return ResearchObject._get_attr_id(attr_name, attr_value)\n        return rows[0][0]\n\n    @abstractmethod\n    def _create_attr(attr_name: str, attr_value) -&gt; int:\n        \"\"\"Create a new attribute with the specified name and return its ID.\"\"\"\n        cursor = Action.conn.cursor()\n        attr_type = str(type(attr_value)).split(\"'\")[1]\n        sqlquery = f\"INSERT INTO Attributes (attr_name, attr_type) VALUES {attr_name, attr_type}\"\n        # sqlquery = f\"INSERT INTO Attributes (attr_name, attr_type) VALUES ('{attr_name}', '{attr_type}')\"\n        cursor.execute(sqlquery)\n        return cursor.lastrowid\n\n    @abstractmethod\n    def _get_attr_name(attr_id: int) -&gt; str:\n        \"\"\"Get the name of an attribute given the attribute's ID. If it does not exist, return an error.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_name FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return rows[0][0]  \n\n    @abstractmethod\n    def _get_attr_type(attr_id: int) -&gt; str:\n        \"\"\"Get the type of an attribute given the attribute's ID. If it does not exist, return an error.\"\"\"\n        from pydoc import locate\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_type FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return locate(rows[0][0])\n\n    ###############################################################################################################################\n    #################################################### end of abstract methods ##################################################\n    ###############################################################################################################################\n\n    def abstract_id(self) -&gt; str:\n        \"\"\"Return the abstract ID of the current object.\"\"\"\n        return self.parse_id(self.id)[1]\n\n    def is_instance_object(self) -&gt; bool:\n        \"\"\"Return true if the object is an instance object, false if it is an abstract object.\"\"\"\n        return self.parse_id(self.id)[2] is not None\n\n    def object_exists(self, id: str) -&gt; bool:\n        \"\"\"Return true if the specified id exists in the database, false if not.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT object_id FROM research_objects WHERE object_id = '{id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        return len(rows) &gt; 0\n\n    def is_id(self, id: str) -&gt; bool:\n        \"\"\"Check if the given ID matches the pattern of a valid research object ID.\"\"\"              \n        instance_pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n        abstract_pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}$\"\n        if not isinstance(id, str):\n            raise ValueError(\"id must be a str!\")\n        if re.match(instance_pattern, id) or re.match(abstract_pattern, id):\n            return True\n        return False    \n\n    def _is_id_of_class(self, id: str, cls: type) -&gt; bool:\n        \"\"\"True if the ID is of the proper type, False if not.\"\"\"\n        return id.startswith(cls.prefix)\n\n    def _is_id_or_none(self, id: str) -&gt; bool:\n        \"\"\"Check if the given ID matches the pattern of a valid research object ID, or is None.\"\"\"              \n        if id is None or self.is_id(id):\n            return True\n        return False\n\n    def _get_all_source_object_ids(self, cls) -&gt; list[str]:\n        \"\"\"Get all source object ids of the specified target object of the specified type. Immediate neighbors only, equivalent to predecessors() method\"\"\"\n        sql = f'SELECT object_id, attr_value FROM research_object_attributes WHERE target_object_id = \"{self.id}\"'\n        return self.__get_all_related_object_ids(cls, sql)\n\n    def _get_all_target_object_ids(self, cls) -&gt; list[str]:\n        \"\"\"Get all target object ids of the specified source object of the specified type. Immediate neighbors only, equivalent to successors() method\"\"\"\n        sql = f'SELECT target_object_id, attr_value FROM research_object_attributes WHERE object_id = \"{self.id}\"'\n        return self.__get_all_related_object_ids(cls, sql)\n\n    def __get_all_related_object_ids(self, cls, sql) -&gt; list[str]:\n        \"\"\"Called by _get_all_source_object_ids and _get_all_target_object_ids.\n        Get all related object ids of the specified object of the specified type, either source of target objects.\"\"\"\n        # TODO: Ensure that the edges are not outdated, check the \"exists\" property.\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            if row[0] is None:\n                continue\n            if row[0].startswith(cls.prefix):                \n                data.append(row[0])\n        return data\n\n    def _is_source(self, id: str) -&gt; bool:\n        \"\"\"Check if the specified object ID is a source object of the current object.\"\"\"        \n        sql = f\"SELECT object_id FROM research_object_attributes WHERE target_object_id = '{self.id}' AND object_id = '{id}'\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _is_target(self, id: str) -&gt; bool:\n        \"\"\"Check if the specified object ID is a target object of the current object.\"\"\"        \n        sql = f\"SELECT target_object_id FROM research_object_attributes WHERE object_id = '{self.id}' AND target_object_id = '{id}'\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _add_target_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Add a target object ID to the current source object in the database.\"\"\"\n        if not self.is_id(id):\n            raise ValueError(\"Invalid ID.\")    \n        if not self._is_id_of_class(id, cls):\n            raise ValueError(\"ID is of the wrong class!\")          \n        if self._is_target(id):\n            return # Already exists.\n        action = Action(name = \"add_target_object_id\")\n        json_value = json.dumps(True)\n        sql = f\"INSERT INTO research_object_attributes (action_id, object_id, target_object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{id}', {ResearchObject._get_attr_id(DEFAULT_EXISTS_ATTRIBUTE_NAME)}, '{json_value}')\"        \n        action.add_sql_query(sql)\n        action.execute()\n\n    def _remove_target_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Remove a target object ID from the current source object.\"\"\"\n        if not self.is_id(id):\n            raise ValueError(\"Invalid ID.\")   \n        if not self._is_id_of_class(id, cls):\n            raise ValueError(\"ID is of the wrong class!\")           \n        if not self._is_target(id):\n            return\n        action = Action(name = \"remove_target_object_id\")\n        json_value = json.dumps(False)\n        sql = f\"INSERT INTO research_object_attributes (action_id, object_id, target_object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', {id}, {ResearchObject._get_attr_id(DEFAULT_NAME_ATTRIBUTE_NAME)}, '{json_value}')\"        \n        action.add_sql_query(sql)\n        action.execute()\n\n    def _add_source_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Add a source object ID to the current target object in the database.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        if not self._is_id_of_class(id, cls):\n            raise ValueError(\"ID is of the wrong class!\")\n        if self._is_source(id):\n            return # Already exists\n        action = Action(name = \"add_source_object_id\")\n        json_value = json.dumps(True)\n        sql = f\"INSERT INTO research_object_attributes (action_id, object_id, target_object_id, attr_id, attr_value) VALUES ('{action.id}', '{id}', '{self.id}, {ResearchObject._get_attr_id(DEFAULT_EXISTS_ATTRIBUTE_NAME)}, '{json_value}')\"        \n        action.add_sql_query(sql)\n        action.execute()\n\n    def _remove_source_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Remove a source object ID from the current target object in the database.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        if not self._is_id_of_class(id, cls):\n            raise ValueError(\"ID is of the wrong class!\")\n        if not self._is_source(id):\n            return\n        json_value = json.dumps(False)\n        action = Action(name = \"remove_source_object_id\")\n        sql = f\"INSERT INTO research_object_attributes (action_id, object_id, target_object_id, attr_id, attr_value) VALUES ('{action.id}', '{id}', {self.id}, {ResearchObject._get_attr_id(DEFAULT_EXISTS_ATTRIBUTE_NAME)}, '{json_value}')\"        \n        action.add_sql_query(sql)\n        action.execute()\n\n    def _gen_obj_or_none(self, ids, cls: type) -&gt; \"ResearchObject\":\n        \"\"\"Generate the objects of the specified class, or None if the IDs argument is None or [].\"\"\"\n        if ids is None or len(ids) == 0:\n            return None\n        return [cls(id = id) for id in ids]\n\n    ###############################################################################################################################\n    #################################################### end of parentage methods #################################################\n    ############################################################################################################################### \n\n    def get_abstract_object(self) -&gt; \"ResearchObject\":\n        \"\"\"Return the abstract object corresponding to the given the instance object. If abstract is given, return self.\"\"\"\n        if not self.is_instance_object():\n            return self\n        abstract_id = self.parse_id()[1]\n        cls = type(self)\n        return cls(id = abstract_id)\n\n    def copy_to_new_instance(self, new_id: str = None) -&gt; \"ResearchObject\":\n        \"\"\"Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.\"\"\"\n        cls = type(self)\n        if new_id is None:\n            abstract_id = self.parse_id(self.id)[1]\n            new_id = cls.create_id(cls, abstract = abstract_id)\n        new_object = cls(copy = True, id = new_id)        \n        attrs = self.__dict__\n        for key, value in attrs.items():\n            if key == \"id\":\n                continue\n            # No validation because that would've already happened when the original object was created.\n            new_object.__setattr__(key, value, validate = False)\n        return new_object\n\n    ###############################################################################################################################\n    ############################################ end of abstract/instance relation methods ########################################\n    ###############################################################################################################################     \n\n    def parse_id(self, id: str) -&gt; tuple:\n        \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n        if not self.is_id(id):\n            raise ValueError(\"Invalid ID.\")\n        prefix = id[0:2]\n        abstract = id[2:2+abstract_id_len]\n        num_underscores = id.count(\"_\")\n        instance = None\n        if num_underscores == 1:            \n            instance = id[-instance_id_len:]\n        return (prefix, abstract, instance)\n\n    def _open_path(self, path: str) -&gt; None:\n        \"\"\"Open a file or directory in the default application.\"\"\"\n        import os, subprocess\n        if os.path.isdir(path):\n            subprocess.Popen([\"open\", path])\n        else:\n            subprocess.Popen([\"open\", \"-R\", path])\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__get_all_related_object_ids","title":"<code>__get_all_related_object_ids(cls, sql)</code>","text":"<p>Called by _get_all_source_object_ids and _get_all_target_object_ids. Get all related object ids of the specified object of the specified type, either source of target objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __get_all_related_object_ids(self, cls, sql) -&gt; list[str]:\n    \"\"\"Called by _get_all_source_object_ids and _get_all_target_object_ids.\n    Get all related object ids of the specified object of the specified type, either source of target objects.\"\"\"\n    # TODO: Ensure that the edges are not outdated, check the \"exists\" property.\n    cursor = Action.conn.cursor()\n    cursor.execute(sql)\n    data = []\n    for row in cursor:\n        if row[0] is None:\n            continue\n        if row[0].startswith(cls.prefix):                \n            data.append(row[0])\n    return data\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__init__","title":"<code>__init__(name=DEFAULT_NAME_ATTRIBUTE_NAME, default_attrs={}, **kwargs)</code>","text":"<p>id is required as either an arg or kwarg but will actually not be used here because it is assigned during new</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __init__(self, name: str = DEFAULT_NAME_ATTRIBUTE_NAME, default_attrs: dict = {}, **kwargs) -&gt; None:\n    \"\"\"id is required as either an arg or kwarg but will actually not be used here because it is assigned during __new__\"\"\"\n    id = self.id # self.id always exists by this point thanks to __new__\n    action = Action(name = name)\n    if not self.is_id(id):\n        raise ValueError(\"Not an ID!\")\n    if \"id\" in kwargs:\n        del kwargs[\"id\"]\n    try:\n        # Fails if the object does not exist.\n        is_new = False\n        self.load()\n    except ValueError:\n        # Create the new object in the database.\n        is_new = True            \n        sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n        action.add_sql_query(sqlquery)\n        action.execute(commit = False)            \n        default_attrs = {**default_attrs, **{DEFAULT_EXISTS_ATTRIBUTE_NAME: DEFAULT_EXISTS_ATTRIBUTE_VALUE, DEFAULT_NAME_ATTRIBUTE_NAME: name}} # Python 3.5 or later\n    all_attrs = {**default_attrs, **kwargs} # Append kwargs to default attributes. Overwrites default attributes with same key.\n    # def_attrs = default_attrs.copy()\n    # for attr in def_attrs:\n    #     if attr in kwargs:\n    #         del default_attrs[attr] # Remove the default attribute if it is specified in kwargs.\n    for attr in all_attrs:\n        validate = True\n        set_attr_flag = False\n        if attr in default_attrs:\n            if attr not in self.__dict__:\n                set_attr_flag = True\n            if attr not in kwargs:\n                validate = False\n        if attr in kwargs:\n            if attr not in default_attrs:\n                validate = False\n            if attr not in self.__dict__:                    \n                set_attr_flag = True\n            elif self.__dict__[attr] != kwargs[attr]:\n                set_attr_flag = True\n        if set_attr_flag:\n            self.__setattr__(attr, all_attrs[attr], action = action, validate = validate)\n    if is_new:\n        action.execute()\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__new__","title":"<code>__new__(*args, **kwargs)</code>","text":"<p>Create a new research object. If the object already exists, return the existing object. If abstract is True, returns an abstract object that does not have an instance ID. Otherwise, returns an instance object that has an instance ID.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __new__(cls, *args, **kwargs):\n    \"\"\"Create a new research object. If the object already exists, return the existing object.\n    If abstract is True, returns an abstract object that does not have an instance ID.\n    Otherwise, returns an instance object that has an instance ID.\"\"\"\n    if DEFAULT_ABSTRACT_KWARG_NAME not in kwargs.keys():\n        abstract = False\n    object_id = None\n    if len(args)==1:\n        object_id = args[0]\n    elif len(args) &gt; 1:\n        raise ValueError(\"Only id can be a positional argument\")\n    if object_id is None:\n        object_id = kwargs.get(\"id\", None)        \n    if object_id is None:            \n        object_id = cls.create_id(cls, is_abstract = abstract)\n    if object_id in ResearchObject._objects:\n        # ResearchObject._objects_count[object_id] += 1\n        return ResearchObject._objects[object_id]\n    else: # Create a new object.\n        instance = super(ResearchObject, cls).__new__(cls)\n        ResearchObject._objects[object_id] = instance\n        # ResearchObject._objects_count[object_id] = 1\n        instance.__dict__['id'] = object_id\n        return instance\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__setattr__","title":"<code>__setattr__(__name, __value, action=None, validate=True)</code>","text":"<p>Set the attributes of a research object in memory and in the SQL database. Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it). If it is not a built-in ResearchOS attribute, then no validation occurs.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __setattr__(self, __name: str, __value: Any, action: Action = None, validate: bool = True) -&gt; None:\n    \"\"\"Set the attributes of a research object in memory and in the SQL database.\n    Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it).\n    If it is not a built-in ResearchOS attribute, then no validation occurs.\"\"\"\n    # TODO: Have already implemented adding current_XXX_id object to digraph in the database, but should also update the in-memory digraph.        \n    if __name in self.__dict__ and self.__dict__.get(__name, None) == __value:\n        return # No change.\n    if __name == \"id\":\n        raise ValueError(\"Cannot change the ID of a research object.\")\n    if __name[0] == \"_\":\n        return # Don't log private attributes.\n    # Validate the value        \n    if validate:                                                      \n        try:\n            validate_method = eval(f\"self.validate_{__name}\")\n            validate_method(__value)\n        except AttributeError as e:\n            pass\n\n    to_json_method = None\n    try:\n        to_json_method = eval(f\"self.to_json_{__name}\")\n        json_value = to_json_method(__value)\n    except AttributeError as e:            \n        json_value = json.dumps(__value, indent = 4)\n\n    # Create an action.\n    execute_action = False\n    if action is None:\n        execute_action = True\n        action = Action(name = \"attribute_changed\")\n    # Update the attribute in the database.\n    try:\n        assert to_json_method is None # Cannot convert to json AND have a store method. Store method takes precedence.\n        method = eval(f\"self.store_{__name}\")            \n        action = method(__value, action = action)\n    except AttributeError as e:\n        self._default_store_obj_attr(__name, __value, json_value, action = action)            \n    # If the attribute contains the words \"current\" and \"id\" and the ID has been validated, add a digraph edge between the two objects with an attribute.\n    pattern = r\"^current_[\\w\\d]+_id$\"\n    if re.match(pattern, __name):\n        action = self._default_store_edge_attr(target_object_id = __value, name = __name, value = DEFAULT_EXISTS_ATTRIBUTE_VALUE, action = action)\n        # if self.__dict__.get(__name, None) != __value:\n        #     execute_action = True # Need to execute an action if adding an edge.\n    if execute_action:\n        action.execute()\n    self.__dict__[__name] = __value\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.abstract_id","title":"<code>abstract_id()</code>","text":"<p>Return the abstract ID of the current object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def abstract_id(self) -&gt; str:\n    \"\"\"Return the abstract ID of the current object.\"\"\"\n    return self.parse_id(self.id)[1]\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.copy_to_new_instance","title":"<code>copy_to_new_instance(new_id=None)</code>","text":"<p>Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def copy_to_new_instance(self, new_id: str = None) -&gt; \"ResearchObject\":\n    \"\"\"Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.\"\"\"\n    cls = type(self)\n    if new_id is None:\n        abstract_id = self.parse_id(self.id)[1]\n        new_id = cls.create_id(cls, abstract = abstract_id)\n    new_object = cls(copy = True, id = new_id)        \n    attrs = self.__dict__\n    for key, value in attrs.items():\n        if key == \"id\":\n            continue\n        # No validation because that would've already happened when the original object was created.\n        new_object.__setattr__(key, value, validate = False)\n    return new_object\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.create_id","title":"<code>create_id(abstract=None, instance=None, is_abstract=False)</code>  <code>abstractmethod</code>","text":"<p>Create a unique ID for the research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef create_id(cls, abstract: str = None, instance: str = None, is_abstract: bool = False) -&gt; str:\n    \"\"\"Create a unique ID for the research object.\"\"\"\n    import random\n    table_name = \"research_objects\"\n    is_unique = False\n    while not is_unique:\n        if not abstract:\n            abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n            abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n        else:\n            abstract_new = abstract\n\n        if not instance:\n            instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n            instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n        else:\n            instance_new = instance\n        if is_abstract:\n            instance_new = \"\"\n\n        id = cls.prefix + abstract_new + \"_\" + instance_new\n        cursor = Action.conn.cursor()\n        sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n        cursor.execute(sql)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            is_unique = True\n        elif is_abstract:\n            raise ValueError(\"Abstract ID already exists.\")\n    return id      \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.get_abstract_object","title":"<code>get_abstract_object()</code>","text":"<p>Return the abstract object corresponding to the given the instance object. If abstract is given, return self.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def get_abstract_object(self) -&gt; \"ResearchObject\":\n    \"\"\"Return the abstract object corresponding to the given the instance object. If abstract is given, return self.\"\"\"\n    if not self.is_instance_object():\n        return self\n    abstract_id = self.parse_id()[1]\n    cls = type(self)\n    return cls(id = abstract_id)\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.get_all_ids","title":"<code>get_all_ids()</code>  <code>abstractmethod</code>","text":"<p>Get all object IDs of the specified class.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef get_all_ids(cls) -&gt; list[str]:\n    \"\"\"Get all object IDs of the specified class.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = f\"SELECT object_id FROM research_objects\"\n    cursor.execute(sqlquery)\n    rows = cursor.fetchall()\n    return [row[0] for row in rows if (row[0] is not None and row[0].startswith(cls.prefix))]\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.is_id","title":"<code>is_id(id)</code>","text":"<p>Check if the given ID matches the pattern of a valid research object ID.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def is_id(self, id: str) -&gt; bool:\n    \"\"\"Check if the given ID matches the pattern of a valid research object ID.\"\"\"              \n    instance_pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n    abstract_pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}$\"\n    if not isinstance(id, str):\n        raise ValueError(\"id must be a str!\")\n    if re.match(instance_pattern, id) or re.match(abstract_pattern, id):\n        return True\n    return False    \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.is_instance_object","title":"<code>is_instance_object()</code>","text":"<p>Return true if the object is an instance object, false if it is an abstract object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def is_instance_object(self) -&gt; bool:\n    \"\"\"Return true if the object is an instance object, false if it is an abstract object.\"\"\"\n    return self.parse_id(self.id)[2] is not None\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.load","title":"<code>load()</code>","text":"<p>Load the current state of a research object from the database.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def load(self) -&gt; None:\n    \"\"\"Load the current state of a research object from the database.\"\"\"        \n    cursor = Action.conn.cursor()\n    sqlquery = f\"SELECT action_id, attr_id, attr_value, target_object_id FROM research_object_attributes WHERE object_id = '{self.id}'\"\n    unordered_attr_result = cursor.execute(sqlquery).fetchall()\n    ordered_attr_result = ResearchObject._get_time_ordered_result(unordered_attr_result, action_col_num = 0)\n    if len(unordered_attr_result) == 0:\n        raise ValueError(\"No object with that ID exists.\")         \n\n    curr_obj_attr_ids = [row[1] for row in ordered_attr_result]\n    num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n    used_attr_ids = []\n    attrs = {}\n    attrs[\"id\"] = self.id\n    for row in ordered_attr_result:            \n        attr_id = row[1]\n        attr_value_json = row[2]\n        target_object_id = row[3]\n        if attr_id in used_attr_ids:\n            continue\n        else:\n            used_attr_ids.append(attr_id)                        \n\n        attr_name = ResearchObject._get_attr_name(attr_id)\n        # Translate the attribute from string to the proper type/format.                     \n        try:\n            from_json_method = eval(\"self.from_json_\" + attr_name)\n            attr_value = from_json_method(attr_value_json)\n        except AttributeError as e:\n            attr_value = json.loads(attr_value_json)            \n        # Now that the value is loaded as the proper type/format (and is not None), validate it.\n        try:\n            if attr_value is not None:\n                validate_method = eval(\"self.validate_\" + attr_name)\n                validate_method(attr_value)\n        except AttributeError as e:\n            pass\n        attrs[attr_name] = attr_value\n        if len(used_attr_ids) == num_attrs:\n            break # Every attribute is accounted for.\n\n    self.__dict__.update(attrs)\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.object_exists","title":"<code>object_exists(id)</code>","text":"<p>Return true if the specified id exists in the database, false if not.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def object_exists(self, id: str) -&gt; bool:\n    \"\"\"Return true if the specified id exists in the database, false if not.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = f\"SELECT object_id FROM research_objects WHERE object_id = '{id}'\"\n    cursor.execute(sqlquery)\n    rows = cursor.fetchall()\n    return len(rows) &gt; 0\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.parse_id","title":"<code>parse_id(id)</code>","text":"<p>Parse an ID into its prefix, abstract, and instance parts.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def parse_id(self, id: str) -&gt; tuple:\n    \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n    if not self.is_id(id):\n        raise ValueError(\"Invalid ID.\")\n    prefix = id[0:2]\n    abstract = id[2:2+abstract_id_len]\n    num_underscores = id.count(\"_\")\n    instance = None\n    if num_underscores == 1:            \n        instance = id[-instance_id_len:]\n    return (prefix, abstract, instance)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/data_object/","title":"Data Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.</p> Source code in <code>src/ResearchOS/DataObjects/data_object.py</code> <pre><code>class DataObject(ResearchObject):\n    \"\"\"The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.\"\"\"    \n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/","title":"Dataset","text":"<p>Inherits from DataObject</p> <p>             Bases: <code>DataObject</code></p> <p>A dataset is one set of data. Class-specific Attributes: 1. data path: The root folder location of the dataset. 2. data schema: The schema of the dataset (specified as a list of classes)</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>class Dataset(DataObject):\n    \"\"\"A dataset is one set of data.\n    Class-specific Attributes:\n    1. data path: The root folder location of the dataset.\n    2. data schema: The schema of the dataset (specified as a list of classes)\"\"\"\n\n    prefix: str = \"DS\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Dataset)\n\n    @abstractmethod\n    def new_current(name: str) -&gt; \"Dataset\":\n        \"\"\"Create a new dataset and set it as the current dataset for the current project.\"\"\"        \n        from ResearchOS import Project\n        ds = Dataset(name = name)\n        pj = Project.get_current_project_id()\n        pj = Project(id = pj)\n        pj.set_current_dataset_id(ds.id)\n        return ds, pj\n\n    def __str__(self):\n        return super().__str__(default_attrs.keys(), self.__dict__)\n\n    #################### Start class-specific attributes ###################\n    def validate_dataset_path(self, path: str) -&gt; None:\n        \"\"\"Validate the dataset path.\"\"\"\n        import os\n        if not os.path.exists(path):\n            raise ValueError(\"Specified path is not a path or does not currently exist!\")        \n\n    def validate_data_schema(self, schema: list) -&gt; None:\n        \"\"\"Validate the data schema follows the proper format.\"\"\"\n        from ResearchOS import User\n        from ResearchOS import Variable\n        # TODO: Check that every element is unique, no repeats.\n        if not isinstance(schema, list):\n            raise ValueError(\"Schema must be provided as a list!\")\n        if len(schema) &lt;= 1:\n            raise ValueError(\"At least two elements required for the schema! Dataset + one more\")\n        for x in schema:\n            if not isinstance(x, type):\n                raise ValueError(\"Schema must be provided as a list of types!\")\n        if User in schema:\n            raise ValueError(\"Do not include the User object in the schema! It is assumed to be the first element in the list\")\n        if Variable in schema:\n            raise ValueError(\"Do not include the Variable object in the schema! It is assumed to be the last element in the list\")\n        if Dataset != schema[0]:\n            raise ValueError(\"Dataset must be the first element in the list! Each type after that is in sequentially 'decreasing' order.\")\n\n    def json_translate_data_schema(self, schema) -&gt; list:\n        \"\"\"Translate the data schema from to the proper value because the default json translation fails with this data structure.\"\"\"\n        pass\n\n    def store_data_schema(self, schema, action):\n        \"\"\"Method to custom store the data schema.\"\"\"\n        pass\n\n    #################### Start Source objects ####################\n    def get_users(self) -&gt; list:\n        \"\"\"Return a list of user objects that belong to this project. Identical to Project.get_users()\"\"\"\n        from ResearchOS import User\n        us_ids = self._get_all_source_object_ids(cls = User)\n        return self._gen_obj_or_none(us_ids, User)\n\n    #################### Start Target objects ####################\n    def get_projects(self) -&gt; list:\n        \"\"\"Return a list of project objects that use this dataset.\"\"\"\n        from ResearchOS import Project\n        pj_ids = self._get_all_target_object_ids(cls = Project)\n        return self._gen_obj_or_none(pj_ids, Project)\n\n    def add_project_id(self, project_id: str):\n        \"\"\"Add a project to the dataset.\"\"\"\n        from ResearchOS import Project\n        self._add_target_object_id(project_id, cls = Project)\n\n    def remove_project_id(self, project_id: str):\n        \"\"\"Remove a project from the dataset.\"\"\"\n        from ResearchOS import Project        \n        self._remove_target_object_id(project_id, cls = Project)\n\n    def get_subjects(self) -&gt; list:\n        \"\"\"Return a list of subject objects that belong to this dataset.\"\"\"\n        from ResearchOS import Subject\n        sj_ids = self._get_all_target_object_ids(cls = Subject)\n        return self._gen_obj_or_none(sj_ids, Subject)\n\n    def add_subject_id(self, subject_id: str):\n        \"\"\"Add a subject to the dataset.\"\"\"\n        from ResearchOS import Subject\n        self._add_target_object_id(subject_id, cls = Subject)\n\n    def remove_subject_id(self, subject_id: str):\n        \"\"\"Remove a subject from the dataset.\"\"\"\n        from ResearchOS import Subject        \n        self._remove_target_object_id(subject_id, cls = Subject)\n\n    #################### Start class-specific methods ####################\n    def open_dataset_path(self) -&gt; None:\n        \"\"\"Open the dataset's path in the Finder/File Explorer.\"\"\"\n        path = self.dataset_path\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.add_project_id","title":"<code>add_project_id(project_id)</code>","text":"<p>Add a project to the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def add_project_id(self, project_id: str):\n    \"\"\"Add a project to the dataset.\"\"\"\n    from ResearchOS import Project\n    self._add_target_object_id(project_id, cls = Project)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.add_subject_id","title":"<code>add_subject_id(subject_id)</code>","text":"<p>Add a subject to the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def add_subject_id(self, subject_id: str):\n    \"\"\"Add a subject to the dataset.\"\"\"\n    from ResearchOS import Subject\n    self._add_target_object_id(subject_id, cls = Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_projects","title":"<code>get_projects()</code>","text":"<p>Return a list of project objects that use this dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_projects(self) -&gt; list:\n    \"\"\"Return a list of project objects that use this dataset.\"\"\"\n    from ResearchOS import Project\n    pj_ids = self._get_all_target_object_ids(cls = Project)\n    return self._gen_obj_or_none(pj_ids, Project)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_subjects","title":"<code>get_subjects()</code>","text":"<p>Return a list of subject objects that belong to this dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_subjects(self) -&gt; list:\n    \"\"\"Return a list of subject objects that belong to this dataset.\"\"\"\n    from ResearchOS import Subject\n    sj_ids = self._get_all_target_object_ids(cls = Subject)\n    return self._gen_obj_or_none(sj_ids, Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_users","title":"<code>get_users()</code>","text":"<p>Return a list of user objects that belong to this project. Identical to Project.get_users()</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_users(self) -&gt; list:\n    \"\"\"Return a list of user objects that belong to this project. Identical to Project.get_users()\"\"\"\n    from ResearchOS import User\n    us_ids = self._get_all_source_object_ids(cls = User)\n    return self._gen_obj_or_none(us_ids, User)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.json_translate_data_schema","title":"<code>json_translate_data_schema(schema)</code>","text":"<p>Translate the data schema from to the proper value because the default json translation fails with this data structure.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def json_translate_data_schema(self, schema) -&gt; list:\n    \"\"\"Translate the data schema from to the proper value because the default json translation fails with this data structure.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.new_current","title":"<code>new_current(name)</code>  <code>abstractmethod</code>","text":"<p>Create a new dataset and set it as the current dataset for the current project.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>@abstractmethod\ndef new_current(name: str) -&gt; \"Dataset\":\n    \"\"\"Create a new dataset and set it as the current dataset for the current project.\"\"\"        \n    from ResearchOS import Project\n    ds = Dataset(name = name)\n    pj = Project.get_current_project_id()\n    pj = Project(id = pj)\n    pj.set_current_dataset_id(ds.id)\n    return ds, pj\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.open_dataset_path","title":"<code>open_dataset_path()</code>","text":"<p>Open the dataset's path in the Finder/File Explorer.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def open_dataset_path(self) -&gt; None:\n    \"\"\"Open the dataset's path in the Finder/File Explorer.\"\"\"\n    path = self.dataset_path\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.remove_project_id","title":"<code>remove_project_id(project_id)</code>","text":"<p>Remove a project from the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def remove_project_id(self, project_id: str):\n    \"\"\"Remove a project from the dataset.\"\"\"\n    from ResearchOS import Project        \n    self._remove_target_object_id(project_id, cls = Project)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.remove_subject_id","title":"<code>remove_subject_id(subject_id)</code>","text":"<p>Remove a subject from the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def remove_subject_id(self, subject_id: str):\n    \"\"\"Remove a subject from the dataset.\"\"\"\n    from ResearchOS import Subject        \n    self._remove_target_object_id(subject_id, cls = Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.store_data_schema","title":"<code>store_data_schema(schema, action)</code>","text":"<p>Method to custom store the data schema.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def store_data_schema(self, schema, action):\n    \"\"\"Method to custom store the data schema.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.validate_data_schema","title":"<code>validate_data_schema(schema)</code>","text":"<p>Validate the data schema follows the proper format.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def validate_data_schema(self, schema: list) -&gt; None:\n    \"\"\"Validate the data schema follows the proper format.\"\"\"\n    from ResearchOS import User\n    from ResearchOS import Variable\n    # TODO: Check that every element is unique, no repeats.\n    if not isinstance(schema, list):\n        raise ValueError(\"Schema must be provided as a list!\")\n    if len(schema) &lt;= 1:\n        raise ValueError(\"At least two elements required for the schema! Dataset + one more\")\n    for x in schema:\n        if not isinstance(x, type):\n            raise ValueError(\"Schema must be provided as a list of types!\")\n    if User in schema:\n        raise ValueError(\"Do not include the User object in the schema! It is assumed to be the first element in the list\")\n    if Variable in schema:\n        raise ValueError(\"Do not include the Variable object in the schema! It is assumed to be the last element in the list\")\n    if Dataset != schema[0]:\n        raise ValueError(\"Dataset must be the first element in the list! Each type after that is in sequentially 'decreasing' order.\")\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.validate_dataset_path","title":"<code>validate_dataset_path(path)</code>","text":"<p>Validate the dataset path.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def validate_dataset_path(self, path: str) -&gt; None:\n    \"\"\"Validate the dataset path.\"\"\"\n    import os\n    if not os.path.exists(path):\n        raise ValueError(\"Specified path is not a path or does not currently exist!\")        \n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/","title":"Phase","text":"<p>             Bases: <code>DataObject</code></p> <p>Phase class.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>class Phase(DataObject):\n    \"\"\"Phase class.\"\"\"\n\n    prefix = \"PH\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Phase)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_trials(self) -&gt; list:\n        \"\"\"Return a list of trial objects that belong to this phase.\"\"\"\n        from ResearchOS import Trial\n        tr_ids = self._get_all_source_object_ids(cls = Trial)\n        return [Trial(id = tr_id) for tr_id in tr_ids]\n\n    def get_conditions(self) -&gt; list:\n        \"\"\"Return a list of condition objects that belong to this phase.\"\"\"\n        from ResearchOS import Condition\n        cn_ids = self._get_all_source_object_ids(cls = Condition)\n        return [Condition(id = cn_id) for cn_id in cn_ids]\n\n    #################### Start Target objects ####################\n    def get_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this phase.\"\"\"\n        from ResearchOS import Variable\n        return self._get_all_target_object_ids(cls = Variable)\n\n    def add_variable_id(self, variable_id: str):\n        \"\"\"Add a variable to the phase.\"\"\"\n        from ResearchOS import Variable        \n        self._add_target_object_id(variable_id, cls = Variable)\n\n    def remove_variable_id(self, variable_id: str):\n        \"\"\"Remove a variable from the phase.\"\"\"\n        from ResearchOS import Variable        \n        self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.add_variable_id","title":"<code>add_variable_id(variable_id)</code>","text":"<p>Add a variable to the phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def add_variable_id(self, variable_id: str):\n    \"\"\"Add a variable to the phase.\"\"\"\n    from ResearchOS import Variable        \n    self._add_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.get_conditions","title":"<code>get_conditions()</code>","text":"<p>Return a list of condition objects that belong to this phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def get_conditions(self) -&gt; list:\n    \"\"\"Return a list of condition objects that belong to this phase.\"\"\"\n    from ResearchOS import Condition\n    cn_ids = self._get_all_source_object_ids(cls = Condition)\n    return [Condition(id = cn_id) for cn_id in cn_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.get_trials","title":"<code>get_trials()</code>","text":"<p>Return a list of trial objects that belong to this phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def get_trials(self) -&gt; list:\n    \"\"\"Return a list of trial objects that belong to this phase.\"\"\"\n    from ResearchOS import Trial\n    tr_ids = self._get_all_source_object_ids(cls = Trial)\n    return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.get_variable_ids","title":"<code>get_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def get_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this phase.\"\"\"\n    from ResearchOS import Variable\n    return self._get_all_target_object_ids(cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.remove_variable_id","title":"<code>remove_variable_id(variable_id)</code>","text":"<p>Remove a variable from the phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def remove_variable_id(self, variable_id: str):\n    \"\"\"Remove a variable from the phase.\"\"\"\n    from ResearchOS import Variable        \n    self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/","title":"Subject","text":"<p>             Bases: <code>DataObject</code></p> <p>Subject class.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>class Subject(DataObject):\n    \"\"\"Subject class.\"\"\"\n\n    prefix: str = \"SJ\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Subject)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_datasets(self) -&gt; list:\n        \"\"\"Return a list of dataset objects that belong to this subject.\"\"\"\n        from ResearchOS import Dataset\n        ds_ids = self._get_all_source_object_ids(cls = Dataset)\n        return [Dataset(id = ds_id) for ds_id in ds_ids]\n\n    #################### Start Target objects ####################\n    def get_visits(self) -&gt; list:\n        \"\"\"Return a list of visit objects that belong to this subject.\"\"\"\n        from ResearchOS import Visit\n        vs_ids = self._get_all_target_object_ids(cls = Visit)\n        return [Visit(id = vs_id) for vs_id in vs_ids]\n\n    def add_visit_id(self, visit_id: str):\n        \"\"\"Add a visit to the subject.\"\"\"\n        from ResearchOS import Visit        \n        self._add_target_object_id(visit_id, cls = Visit)\n\n    def remove_visit_id(self, visit_id: str):\n        \"\"\"Remove a visit from the subject.\"\"\"\n        from ResearchOS import Visit        \n        self._remove_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.add_visit_id","title":"<code>add_visit_id(visit_id)</code>","text":"<p>Add a visit to the subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def add_visit_id(self, visit_id: str):\n    \"\"\"Add a visit to the subject.\"\"\"\n    from ResearchOS import Visit        \n    self._add_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.get_datasets","title":"<code>get_datasets()</code>","text":"<p>Return a list of dataset objects that belong to this subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def get_datasets(self) -&gt; list:\n    \"\"\"Return a list of dataset objects that belong to this subject.\"\"\"\n    from ResearchOS import Dataset\n    ds_ids = self._get_all_source_object_ids(cls = Dataset)\n    return [Dataset(id = ds_id) for ds_id in ds_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.get_visits","title":"<code>get_visits()</code>","text":"<p>Return a list of visit objects that belong to this subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def get_visits(self) -&gt; list:\n    \"\"\"Return a list of visit objects that belong to this subject.\"\"\"\n    from ResearchOS import Visit\n    vs_ids = self._get_all_target_object_ids(cls = Visit)\n    return [Visit(id = vs_id) for vs_id in vs_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.remove_visit_id","title":"<code>remove_visit_id(visit_id)</code>","text":"<p>Remove a visit from the subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def remove_visit_id(self, visit_id: str):\n    \"\"\"Remove a visit from the subject.\"\"\"\n    from ResearchOS import Visit        \n    self._remove_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/","title":"Trial","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>class Trial(DataObject):\n\n    preifx = \"TR\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Trial)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_visits(self) -&gt; list:\n        \"\"\"Return a list of visit objects that belong to this trial.\"\"\"\n        from ResearchOS import Visit\n        vs_ids = self._get_all_source_object_ids(cls = Visit)\n        return [Visit(id = vs_id) for vs_id in vs_ids]\n\n    def get_condition(self) -&gt; list:\n        \"\"\"Return the condition object that belongs to this trial.\"\"\"\n        from ResearchOS import Condition\n        cn_id = self._get_all_source_object_ids(cls = Condition)\n        return Condition(id = cn_id)\n\n    #################### Start Target objects ####################\n    def get_phase_ids(self) -&gt; list:\n        \"\"\"Return a list of phase object IDs that belong to this trial.\"\"\"\n        from ResearchOS.DataObjects.phase import Phase\n        ph_ids = self._get_all_target_object_ids(cls = Phase)\n        return [Phase(id = ph_id) for ph_id in ph_ids]\n\n    def add_phase_id(self, phase_id: str):\n        \"\"\"Add a phase to the trial.\"\"\"\n        from ResearchOS.DataObjects.phase import Phase        \n        self._add_target_object_id(phase_id, cls = Phase)\n\n    def remove_phase_id(self, phase_id: str):\n        \"\"\"Remove a phase from the trial.\"\"\"\n        from ResearchOS.DataObjects.phase import Phase        \n        self._remove_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.add_phase_id","title":"<code>add_phase_id(phase_id)</code>","text":"<p>Add a phase to the trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def add_phase_id(self, phase_id: str):\n    \"\"\"Add a phase to the trial.\"\"\"\n    from ResearchOS.DataObjects.phase import Phase        \n    self._add_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.get_condition","title":"<code>get_condition()</code>","text":"<p>Return the condition object that belongs to this trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def get_condition(self) -&gt; list:\n    \"\"\"Return the condition object that belongs to this trial.\"\"\"\n    from ResearchOS import Condition\n    cn_id = self._get_all_source_object_ids(cls = Condition)\n    return Condition(id = cn_id)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.get_phase_ids","title":"<code>get_phase_ids()</code>","text":"<p>Return a list of phase object IDs that belong to this trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def get_phase_ids(self) -&gt; list:\n    \"\"\"Return a list of phase object IDs that belong to this trial.\"\"\"\n    from ResearchOS.DataObjects.phase import Phase\n    ph_ids = self._get_all_target_object_ids(cls = Phase)\n    return [Phase(id = ph_id) for ph_id in ph_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.get_visits","title":"<code>get_visits()</code>","text":"<p>Return a list of visit objects that belong to this trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def get_visits(self) -&gt; list:\n    \"\"\"Return a list of visit objects that belong to this trial.\"\"\"\n    from ResearchOS import Visit\n    vs_ids = self._get_all_source_object_ids(cls = Visit)\n    return [Visit(id = vs_id) for vs_id in vs_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.remove_phase_id","title":"<code>remove_phase_id(phase_id)</code>","text":"<p>Remove a phase from the trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def remove_phase_id(self, phase_id: str):\n    \"\"\"Remove a phase from the trial.\"\"\"\n    from ResearchOS.DataObjects.phase import Phase        \n    self._remove_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/","title":"Visit","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>class Visit(DataObject):\n\n    prefix: str = \"VS\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Visit)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_subjects(self) -&gt; list:\n        \"\"\"Return a list of subject objects that belong to this visit.\"\"\"\n        from ResearchOS import Subject\n        sj_ids = self._get_all_source_object_ids(cls = Subject)\n        return [Subject(id = sj_id) for sj_id in sj_ids]\n\n    #################### Start Target objects ####################\n    def get_trials(self) -&gt; list:\n        \"\"\"Return a list of trial objects that belong to this visit.\"\"\"\n        from ResearchOS import Trial\n        tr_ids = self._get_all_target_object_ids(cls = Trial)\n        return [Trial(id = tr_id) for tr_id in tr_ids]\n\n    def add_trial_id(self, trial_id: str):\n        \"\"\"Add a trial to the visit.\"\"\"\n        from ResearchOS import Trial        \n        self._add_target_object_id(trial_id, cls = Trial)\n\n    def remove_trial_id(self, trial_id: str):\n        \"\"\"Remove a trial from the visit.\"\"\"\n        from ResearchOS import Trial        \n        self._remove_target_object_id(trial_id, cls = Trial)\n\n    def get_conditions(self) -&gt; list:\n        \"\"\"Return a list of condition objects that belong to this visit.\"\"\"\n        from ResearchOS import Condition\n        cn_ids = self._get_all_target_object_ids(cls = Condition)\n        return [Condition(id = cn_id) for cn_id in cn_ids]\n\n    def add_condition_id(self, condition_id: str):\n        \"\"\"Add a condition to the visit.\"\"\"\n        from ResearchOS import Condition        \n        self._add_target_object_id(condition_id, cls = Condition)\n\n    def remove_condition_id(self, condition_id: str):\n        \"\"\"Remove a condition from the visit.\"\"\"\n        from ResearchOS import Condition        \n        self._remove_target_object_id(condition_id, cls = Condition)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.add_condition_id","title":"<code>add_condition_id(condition_id)</code>","text":"<p>Add a condition to the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def add_condition_id(self, condition_id: str):\n    \"\"\"Add a condition to the visit.\"\"\"\n    from ResearchOS import Condition        \n    self._add_target_object_id(condition_id, cls = Condition)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.add_trial_id","title":"<code>add_trial_id(trial_id)</code>","text":"<p>Add a trial to the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def add_trial_id(self, trial_id: str):\n    \"\"\"Add a trial to the visit.\"\"\"\n    from ResearchOS import Trial        \n    self._add_target_object_id(trial_id, cls = Trial)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.get_conditions","title":"<code>get_conditions()</code>","text":"<p>Return a list of condition objects that belong to this visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def get_conditions(self) -&gt; list:\n    \"\"\"Return a list of condition objects that belong to this visit.\"\"\"\n    from ResearchOS import Condition\n    cn_ids = self._get_all_target_object_ids(cls = Condition)\n    return [Condition(id = cn_id) for cn_id in cn_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.get_subjects","title":"<code>get_subjects()</code>","text":"<p>Return a list of subject objects that belong to this visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def get_subjects(self) -&gt; list:\n    \"\"\"Return a list of subject objects that belong to this visit.\"\"\"\n    from ResearchOS import Subject\n    sj_ids = self._get_all_source_object_ids(cls = Subject)\n    return [Subject(id = sj_id) for sj_id in sj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.get_trials","title":"<code>get_trials()</code>","text":"<p>Return a list of trial objects that belong to this visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def get_trials(self) -&gt; list:\n    \"\"\"Return a list of trial objects that belong to this visit.\"\"\"\n    from ResearchOS import Trial\n    tr_ids = self._get_all_target_object_ids(cls = Trial)\n    return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.remove_condition_id","title":"<code>remove_condition_id(condition_id)</code>","text":"<p>Remove a condition from the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def remove_condition_id(self, condition_id: str):\n    \"\"\"Remove a condition from the visit.\"\"\"\n    from ResearchOS import Condition        \n    self._remove_target_object_id(condition_id, cls = Condition)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.remove_trial_id","title":"<code>remove_trial_id(trial_id)</code>","text":"<p>Remove a trial from the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def remove_trial_id(self, trial_id: str):\n    \"\"\"Remove a trial from the visit.\"\"\"\n    from ResearchOS import Trial        \n    self._remove_target_object_id(trial_id, cls = Trial)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/","title":"User","text":"<p>             Bases: <code>DataObject</code>, <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>class User(DataObject, PipelineObject):\n\n    prefix: str = \"US\"\n\n    def get_default_attrs(self):\n        \"\"\"Return a dictionary of default instance or abstract attributes, as appropriate for this object.\"\"\"\n        if self.is_instance_object():\n            return default_instance_attrs\n        return default_abstract_attrs\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(User)\n\n    def __str__(self):\n        return super().__str__(self.get_default_attrs().keys(), self.__dict__)\n\n    def __init__(self, *args, **kwargs) -&gt; None:\n        super().__init__(default_attrs = self.get_default_attrs(), **kwargs)\n\n    def validate_current_project_id(self, id: str) -&gt; bool:\n        \"\"\"Validate the current project ID. If it is not valid, the value is rejected.\"\"\"        \n        if not isinstance(id, str):\n            raise ValueError(\"Specified value is not a string!\")\n        if not self.is_id(id):\n            raise ValueError(\"Specified value is not an ID!\")\n        parsed_id = self.parse_id(id)\n        if parsed_id[0] != \"PJ\":\n            raise ValueError(\"Specified ID is not a Project!\")\n        if not self.object_exists(id):\n            raise ValueError(\"Project does not exist!\")\n\n\n    @abstractmethod\n    def new_current(id: str = None, name: str = None):\n        \"\"\"Create a new user and set it as the current one.\"\"\"        \n        user = User(id = id, name = name)\n        User.set_current_user_object_id(id)        \n        return user\n\n    @abstractmethod\n    def get_current_user_object_id() -&gt; str:\n        \"\"\"Get the ID of the current user.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = \"SELECT action_id, current_user_object_id FROM current_user\"        \n        result = cursor.execute(sqlquery).fetchall()        \n        if result is None or len(result) == 0:\n            raise ValueError(\"There is no current user. This should never happen!\")\n        ordered_result = User._get_time_ordered_result(result, action_col_num = 0)\n        return ordered_result[0][1]\n\n    @abstractmethod\n    def set_current_user_object_id(user_object_id: str) -&gt; None:\n        \"\"\"Set the ID of the current user.\"\"\"\n        action = Action(name = \"Set current user\" + user_object_id)\n        sqlquery = f\"INSERT INTO current_user (action_id, current_user_object_id) VALUES ('{action.id}', '{user_object_id}')\"        \n        action.add_sql_query(sqlquery)\n        action.execute()\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.get_current_user_object_id","title":"<code>get_current_user_object_id()</code>  <code>abstractmethod</code>","text":"<p>Get the ID of the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef get_current_user_object_id() -&gt; str:\n    \"\"\"Get the ID of the current user.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = \"SELECT action_id, current_user_object_id FROM current_user\"        \n    result = cursor.execute(sqlquery).fetchall()        \n    if result is None or len(result) == 0:\n        raise ValueError(\"There is no current user. This should never happen!\")\n    ordered_result = User._get_time_ordered_result(result, action_col_num = 0)\n    return ordered_result[0][1]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.get_default_attrs","title":"<code>get_default_attrs()</code>","text":"<p>Return a dictionary of default instance or abstract attributes, as appropriate for this object.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def get_default_attrs(self):\n    \"\"\"Return a dictionary of default instance or abstract attributes, as appropriate for this object.\"\"\"\n    if self.is_instance_object():\n        return default_instance_attrs\n    return default_abstract_attrs\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.new_current","title":"<code>new_current(id=None, name=None)</code>  <code>abstractmethod</code>","text":"<p>Create a new user and set it as the current one.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef new_current(id: str = None, name: str = None):\n    \"\"\"Create a new user and set it as the current one.\"\"\"        \n    user = User(id = id, name = name)\n    User.set_current_user_object_id(id)        \n    return user\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.set_current_user_object_id","title":"<code>set_current_user_object_id(user_object_id)</code>  <code>abstractmethod</code>","text":"<p>Set the ID of the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef set_current_user_object_id(user_object_id: str) -&gt; None:\n    \"\"\"Set the ID of the current user.\"\"\"\n    action = Action(name = \"Set current user\" + user_object_id)\n    sqlquery = f\"INSERT INTO current_user (action_id, current_user_object_id) VALUES ('{action.id}', '{user_object_id}')\"        \n    action.add_sql_query(sqlquery)\n    action.execute()\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.validate_current_project_id","title":"<code>validate_current_project_id(id)</code>","text":"<p>Validate the current project ID. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def validate_current_project_id(self, id: str) -&gt; bool:\n    \"\"\"Validate the current project ID. If it is not valid, the value is rejected.\"\"\"        \n    if not isinstance(id, str):\n        raise ValueError(\"Specified value is not a string!\")\n    if not self.is_id(id):\n        raise ValueError(\"Specified value is not an ID!\")\n    parsed_id = self.parse_id(id)\n    if parsed_id[0] != \"PJ\":\n        raise ValueError(\"Specified ID is not a Project!\")\n    if not self.object_exists(id):\n        raise ValueError(\"Project does not exist!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/","title":"Variable","text":"<p>             Bases: <code>DataObject</code>, <code>PipelineObject</code></p> <p>Variable class.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>class Variable(DataObject, PipelineObject):\n    \"\"\"Variable class.\"\"\"\n\n    prefix: str = \"VR\"           \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Variable)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_source_object_ids(self, cls: type) -&gt; list:\n        \"\"\"Return a list of all source objects for the Variable.\"\"\"\n        from ResearchOS import Variable\n        ids = self._get_all_source_object_ids(cls = cls)\n        return [cls(id = id) for id in ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/#src.ResearchOS.variable.Variable.get_source_object_ids","title":"<code>get_source_object_ids(cls)</code>","text":"<p>Return a list of all source objects for the Variable.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>def get_source_object_ids(self, cls: type) -&gt; list:\n    \"\"\"Return a list of all source objects for the Variable.\"\"\"\n    from ResearchOS import Variable\n    ids = self._get_all_source_object_ids(cls = cls)\n    return [cls(id = id) for id in ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/","title":"Analysis","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>class Analysis(PipelineObject):\n\n    prefix = \"AN\"\n\n    def get_default_attrs(self):\n        \"\"\"Return a dictionary of default instance or abstract attributes, as appropriate for this object.\"\"\"\n        if self.is_instance_object():\n            return default_instance_attrs\n        return default_abstract_attrs    \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Analysis)   \n\n    def new_current(name: str):\n        from ResearchOS import Logsheet        \n        an = Analysis(name = name)\n        lg = Logsheet(name = an.name + \"_Default\")\n        an.current_logsheet_id = lg.id                \n        return an\n\n    def __str__(self):        \n        return super().__str__(self.get_default_attrs().keys(), self.__dict__)\n\n    def __init__(self, **kwargs) -&gt; None:\n        super().__init__(default_attrs = self.get_default_attrs(), **kwargs)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_projects(self) -&gt; list:\n        \"\"\"Return a list of project objects that belong to this analysis.\"\"\"\n        from ResearchOS import Project\n        pj_ids = self._get_all_source_object_ids(cls = Project)\n        return [Project(id = pj_id) for pj_id in pj_ids]\n\n    #################### Start Target objects ####################\n    def get_logsheets(self) -&gt; list:\n        \"\"\"Return a list of all logsheet objects in the analysis.\"\"\"\n        from ResearchOS import Logsheet\n        lg_ids = self._get_all_target_object_ids(cls = Logsheet)\n        return [Logsheet(id = lg_id) for lg_id in lg_ids]\n\n    def add_logsheet(self, logsheet_id: str):\n        \"\"\"Add a logsheet to the analysis.\"\"\"\n        from ResearchOS import Logsheet        \n        self._add_target_object_id(logsheet_id, cls = Logsheet)\n\n    def remove_logsheet(self, logsheet_id: str):\n        \"\"\"Remove a logsheet from the analysis.\"\"\"\n        from ResearchOS import Logsheet        \n        self._remove_target_object_id(logsheet_id, cls = Logsheet)\n\n    def get_processes(self) -&gt; list:\n        \"\"\"Return a list of all process objects in the analysis.\"\"\"\n        from ResearchOS import Process\n        pr_ids = self._get_all_target_object_ids(cls = Process)\n        return [Process(id = pr_id) for pr_id in pr_ids]\n\n    def add_process(self, process_id: str):\n        \"\"\"Add a process to the analysis.\"\"\"\n        from ResearchOS import Process        \n        self._add_target_object_id(process_id, cls = Process)\n\n    def remove_process(self, process_id: str):\n        \"\"\"Remove a process from the analysis.\"\"\"\n        from ResearchOS import Process        \n        self._remove_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.add_logsheet","title":"<code>add_logsheet(logsheet_id)</code>","text":"<p>Add a logsheet to the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def add_logsheet(self, logsheet_id: str):\n    \"\"\"Add a logsheet to the analysis.\"\"\"\n    from ResearchOS import Logsheet        \n    self._add_target_object_id(logsheet_id, cls = Logsheet)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.add_process","title":"<code>add_process(process_id)</code>","text":"<p>Add a process to the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def add_process(self, process_id: str):\n    \"\"\"Add a process to the analysis.\"\"\"\n    from ResearchOS import Process        \n    self._add_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_default_attrs","title":"<code>get_default_attrs()</code>","text":"<p>Return a dictionary of default instance or abstract attributes, as appropriate for this object.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_default_attrs(self):\n    \"\"\"Return a dictionary of default instance or abstract attributes, as appropriate for this object.\"\"\"\n    if self.is_instance_object():\n        return default_instance_attrs\n    return default_abstract_attrs    \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_logsheets","title":"<code>get_logsheets()</code>","text":"<p>Return a list of all logsheet objects in the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_logsheets(self) -&gt; list:\n    \"\"\"Return a list of all logsheet objects in the analysis.\"\"\"\n    from ResearchOS import Logsheet\n    lg_ids = self._get_all_target_object_ids(cls = Logsheet)\n    return [Logsheet(id = lg_id) for lg_id in lg_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_processes","title":"<code>get_processes()</code>","text":"<p>Return a list of all process objects in the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_processes(self) -&gt; list:\n    \"\"\"Return a list of all process objects in the analysis.\"\"\"\n    from ResearchOS import Process\n    pr_ids = self._get_all_target_object_ids(cls = Process)\n    return [Process(id = pr_id) for pr_id in pr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_projects","title":"<code>get_projects()</code>","text":"<p>Return a list of project objects that belong to this analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_projects(self) -&gt; list:\n    \"\"\"Return a list of project objects that belong to this analysis.\"\"\"\n    from ResearchOS import Project\n    pj_ids = self._get_all_source_object_ids(cls = Project)\n    return [Project(id = pj_id) for pj_id in pj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.remove_logsheet","title":"<code>remove_logsheet(logsheet_id)</code>","text":"<p>Remove a logsheet from the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def remove_logsheet(self, logsheet_id: str):\n    \"\"\"Remove a logsheet from the analysis.\"\"\"\n    from ResearchOS import Logsheet        \n    self._remove_target_object_id(logsheet_id, cls = Logsheet)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.remove_process","title":"<code>remove_process(process_id)</code>","text":"<p>Remove a process from the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def remove_process(self, process_id: str):\n    \"\"\"Remove a process from the analysis.\"\"\"\n    from ResearchOS import Process        \n    self._remove_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/","title":"Logsheet","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>class Logsheet(PipelineObject):\n\n    prefix = \"LG\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Logsheet)\n\n    #################### Start class-specific attributes ###################\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the attributes that are required by ResearchOS.\n        Other attributes can be added &amp; modified later.\"\"\"\n        attrs = {}        \n        if self.is_instance_object():\n            attrs = default_attrs\n        super().__init__(attrs = attrs, **kwargs)\n\n    def __str__(self):\n        return super().__str__(default_attrs.keys(), self.__dict__)\n\n    def json_translate_logsheet_headers(self, json_var: list) -&gt; list:\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n        transl_var = None\n        return transl_var\n\n    def json_translate_class_column_names(self, json_var: dict) -&gt; dict:\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n        transl_var = None\n        return transl_var\n\n    def validate_num_header_rows(self, num_header_rows: int):\n        \"\"\"Validate the number of header rows. If it is not valid, the value is rejected.\"\"\"        \n        if not isinstance(num_header_rows, int):\n            raise ValueError(\"Num header rows must be an integer!\")\n        if num_header_rows&lt;0:\n            raise ValueError(\"Num header rows must be positive!\")\n        if num_header_rows % 1 != 0:\n            raise ValueError(\"Num header rows must be an integer!\")\n\n    def validate_logsheet_path(self, path: str):\n        \"\"\"Validate the logsheet path.\"\"\"\n        # 1. Check that the path exists in the file system.\n        import os\n        if not os.path.exists(path):\n            raise ValueError(\"Specified path does not exist!\")\n        # 2. Check that the path is a file.\n        if not os.path.isfile(path):\n            raise ValueError(\"Specified path is not a file!\")\n        # 3. Check that the file is a CSV.\n        if not path.endswith((\"csv\", \"xlsx\", \"xls\")):\n            raise ValueError(\"Specified file is not a CSV!\")\n        # 4. Check that the file is not empty.\n        if os.stat(path).st_size == 0:\n            raise ValueError(\"Specified file is empty!\")\n\n    def validate_logsheet_headers(self, headers: list):\n        \"\"\"Validate the logsheet headers.\"\"\"\n        # 1. Check that the headers are a list.\n        if not isinstance(headers, list):\n            raise ValueError(\"Headers must be a list!\")\n        # 2. Check that the headers are a list of tuples.\n        for header in headers:\n            if not isinstance(header, tuple):\n                raise ValueError(\"Headers must be a list of tuples!\")\n            # 3. Check that each header tuple has 3 elements.        \n            if len(header) != 3:\n                raise ValueError(\"Each header tuple must have 3 elements!\")\n            # 4. Check that the first element of each header tuple is a string.        \n            if not isinstance(header[0], str):\n                raise ValueError(\"First element of each header tuple must be a string!\")\n            # 5. Check that the second element of each header tuple is a type.        \n            if not isinstance(header[1], type):\n                raise ValueError(\"Second element of each header tuple must be a Python type!\")        \n            # 6. Check that the third element of each header tuple is a valid variable ID.                \n            if not self.is_id(header[2]) or not header.startswith(\"VR\"):\n                raise ValueError(\"Third element of each header tuple must be a valid variable ID!\")\n\n    def validate_class_column_names(self, class_column_names: dict):\n        \"\"\"Validate the class column names.\"\"\"\n        # TODO: Fix this, it should include type (int/str) and level (as a ResearchObject subclass of type \"type\")\n        # 1. Check that the class column names are a dict.\n        if not isinstance(class_column_names, dict):\n            raise ValueError(\"Class column names must be a dict!\")\n        # 2. Check that the class column names are a dict of str to type.\n        for key, value in class_column_names.items():\n            if not isinstance(key, str):\n                raise ValueError(\"Keys of class column names must be strings!\")\n            if value != int or value != str:\n                raise ValueError(\"Values of class column names must be Python str or int types!\")\n\n    #################### Start Source objects ####################\n    def get_analyses(self) -&gt; list:\n        \"\"\"Return a list of analysis objects that belong to this logsheet.\"\"\"\n        from ResearchOS.PipelineObjects.analysis import Analysis\n        an_ids = self._get_all_source_object_ids(cls = Analysis)\n        return self._gen_obj_or_none(an_ids, Analysis)\n\n    #################### Start Target objects ####################\n    def get_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this logsheet.\"\"\"\n        from ResearchOS.variable import Variable\n        vr_ids = self._get_all_target_object_ids(cls = Variable)\n        return self._gen_obj_or_none(vr_ids, Variable)\n\n    def add_variable_id(self, variable_id: str):\n        \"\"\"Add a variable to the logsheet.\"\"\"\n        # TODO: Mapping between variable ID and column header.\n        from ResearchOS.variable import Variable\n        self._add_target_object_id(variable_id, cls = Variable)\n\n    def remove_variable_id(self, variable_id: str):\n        \"\"\"Remove a variable from the logsheet.\"\"\"\n        from ResearchOS.variable import Variable\n        self._remove_target_object_id(variable_id, cls = Variable)\n\n    #################### Start class-specific methods ####################\n    def read_logsheet(self):\n        \"\"\"Run the logsheet import process.\"\"\"\n        from ResearchOS.PipelineObjects.project import Project\n        from ResearchOS.DataObjects.dataset import Dataset\n        from ResearchOS.user import User\n        # 1. Validate that each attribute of this logsheet and the other object types follows the proper format.\n        self.validate_logsheet_headers(self.logsheet_headers)\n        self.validate_class_column_names(self.class_column_names)\n        self.validate_logsheet_path(self.logsheet_path)\n        self.validate_num_header_rows(self.num_header_rows)\n\n        us = User(id = User.get_current_user_object_id())\n        pj = Project(id = us.current_project_id)\n        us.validate_current_project_id(pj.id)\n        ds = Dataset(id = pj.current_dataset_id)\n        ds.validate_dataset_path(ds.dataset_path)\n        ds.validate_data_schema(ds.data_schema)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the attributes that are required by ResearchOS. Other attributes can be added &amp; modified later.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the attributes that are required by ResearchOS.\n    Other attributes can be added &amp; modified later.\"\"\"\n    attrs = {}        \n    if self.is_instance_object():\n        attrs = default_attrs\n    super().__init__(attrs = attrs, **kwargs)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.add_variable_id","title":"<code>add_variable_id(variable_id)</code>","text":"<p>Add a variable to the logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def add_variable_id(self, variable_id: str):\n    \"\"\"Add a variable to the logsheet.\"\"\"\n    # TODO: Mapping between variable ID and column header.\n    from ResearchOS.variable import Variable\n    self._add_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects that belong to this logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def get_analyses(self) -&gt; list:\n    \"\"\"Return a list of analysis objects that belong to this logsheet.\"\"\"\n    from ResearchOS.PipelineObjects.analysis import Analysis\n    an_ids = self._get_all_source_object_ids(cls = Analysis)\n    return self._gen_obj_or_none(an_ids, Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.get_variable_ids","title":"<code>get_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def get_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this logsheet.\"\"\"\n    from ResearchOS.variable import Variable\n    vr_ids = self._get_all_target_object_ids(cls = Variable)\n    return self._gen_obj_or_none(vr_ids, Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.json_translate_class_column_names","title":"<code>json_translate_class_column_names(json_var)</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def json_translate_class_column_names(self, json_var: dict) -&gt; dict:\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n    transl_var = None\n    return transl_var\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.json_translate_logsheet_headers","title":"<code>json_translate_logsheet_headers(json_var)</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def json_translate_logsheet_headers(self, json_var: list) -&gt; list:\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n    transl_var = None\n    return transl_var\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.read_logsheet","title":"<code>read_logsheet()</code>","text":"<p>Run the logsheet import process.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def read_logsheet(self):\n    \"\"\"Run the logsheet import process.\"\"\"\n    from ResearchOS.PipelineObjects.project import Project\n    from ResearchOS.DataObjects.dataset import Dataset\n    from ResearchOS.user import User\n    # 1. Validate that each attribute of this logsheet and the other object types follows the proper format.\n    self.validate_logsheet_headers(self.logsheet_headers)\n    self.validate_class_column_names(self.class_column_names)\n    self.validate_logsheet_path(self.logsheet_path)\n    self.validate_num_header_rows(self.num_header_rows)\n\n    us = User(id = User.get_current_user_object_id())\n    pj = Project(id = us.current_project_id)\n    us.validate_current_project_id(pj.id)\n    ds = Dataset(id = pj.current_dataset_id)\n    ds.validate_dataset_path(ds.dataset_path)\n    ds.validate_data_schema(ds.data_schema)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.remove_variable_id","title":"<code>remove_variable_id(variable_id)</code>","text":"<p>Remove a variable from the logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def remove_variable_id(self, variable_id: str):\n    \"\"\"Remove a variable from the logsheet.\"\"\"\n    from ResearchOS.variable import Variable\n    self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.validate_class_column_names","title":"<code>validate_class_column_names(class_column_names)</code>","text":"<p>Validate the class column names.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def validate_class_column_names(self, class_column_names: dict):\n    \"\"\"Validate the class column names.\"\"\"\n    # TODO: Fix this, it should include type (int/str) and level (as a ResearchObject subclass of type \"type\")\n    # 1. Check that the class column names are a dict.\n    if not isinstance(class_column_names, dict):\n        raise ValueError(\"Class column names must be a dict!\")\n    # 2. Check that the class column names are a dict of str to type.\n    for key, value in class_column_names.items():\n        if not isinstance(key, str):\n            raise ValueError(\"Keys of class column names must be strings!\")\n        if value != int or value != str:\n            raise ValueError(\"Values of class column names must be Python str or int types!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.validate_logsheet_headers","title":"<code>validate_logsheet_headers(headers)</code>","text":"<p>Validate the logsheet headers.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def validate_logsheet_headers(self, headers: list):\n    \"\"\"Validate the logsheet headers.\"\"\"\n    # 1. Check that the headers are a list.\n    if not isinstance(headers, list):\n        raise ValueError(\"Headers must be a list!\")\n    # 2. Check that the headers are a list of tuples.\n    for header in headers:\n        if not isinstance(header, tuple):\n            raise ValueError(\"Headers must be a list of tuples!\")\n        # 3. Check that each header tuple has 3 elements.        \n        if len(header) != 3:\n            raise ValueError(\"Each header tuple must have 3 elements!\")\n        # 4. Check that the first element of each header tuple is a string.        \n        if not isinstance(header[0], str):\n            raise ValueError(\"First element of each header tuple must be a string!\")\n        # 5. Check that the second element of each header tuple is a type.        \n        if not isinstance(header[1], type):\n            raise ValueError(\"Second element of each header tuple must be a Python type!\")        \n        # 6. Check that the third element of each header tuple is a valid variable ID.                \n        if not self.is_id(header[2]) or not header.startswith(\"VR\"):\n            raise ValueError(\"Third element of each header tuple must be a valid variable ID!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.validate_logsheet_path","title":"<code>validate_logsheet_path(path)</code>","text":"<p>Validate the logsheet path.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def validate_logsheet_path(self, path: str):\n    \"\"\"Validate the logsheet path.\"\"\"\n    # 1. Check that the path exists in the file system.\n    import os\n    if not os.path.exists(path):\n        raise ValueError(\"Specified path does not exist!\")\n    # 2. Check that the path is a file.\n    if not os.path.isfile(path):\n        raise ValueError(\"Specified path is not a file!\")\n    # 3. Check that the file is a CSV.\n    if not path.endswith((\"csv\", \"xlsx\", \"xls\")):\n        raise ValueError(\"Specified file is not a CSV!\")\n    # 4. Check that the file is not empty.\n    if os.stat(path).st_size == 0:\n        raise ValueError(\"Specified file is empty!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.validate_num_header_rows","title":"<code>validate_num_header_rows(num_header_rows)</code>","text":"<p>Validate the number of header rows. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def validate_num_header_rows(self, num_header_rows: int):\n    \"\"\"Validate the number of header rows. If it is not valid, the value is rejected.\"\"\"        \n    if not isinstance(num_header_rows, int):\n        raise ValueError(\"Num header rows must be an integer!\")\n    if num_header_rows&lt;0:\n        raise ValueError(\"Num header rows must be positive!\")\n    if num_header_rows % 1 != 0:\n        raise ValueError(\"Num header rows must be an integer!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/pipeline_object/","title":"Pipeline Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views</p> Source code in <code>src/ResearchOS/PipelineObjects/pipeline_object.py</code> <pre><code>class PipelineObject(ResearchObject):\n    \"\"\"Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views\"\"\"\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/","title":"Process","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>class Process(PipelineObject):\n\n    prefix = \"PR\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Process)\n\n    #################### Start class-specific attributes ###################\n    def validate_method(self, method: Callable) -&gt; None:\n        pass\n\n    def validate_level(self, level: type) -&gt; None:\n        pass\n\n    def json_translate_method(self):\n        pass\n\n    def json_translate_level(self):\n        pass\n\n    #################### Start Source objects ####################\n    def get_analyses(self) -&gt; list:\n        \"\"\"Return a list of analysis objects that belong to this process.\"\"\"\n        from ResearchOS import Analysis\n        an_ids = self._get_all_source_object_ids(cls = Analysis)\n        return [Analysis(id = an_id) for an_id in an_ids]\n\n    #################### Start Target objects ####################\n\n    #################### Start class-specific methods ###################\n    def get_input_variables(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n        from ResearchOS import Variable\n        vr_ids = self._get_all_source_object_ids(cls = Variable)\n        return self._gen_obj_or_none(vr_ids, Variable)\n\n    def get_output_variables(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n        from ResearchOS import Variable\n        vr_ids = self._get_all_target_object_ids(cls = Variable)\n        return self._gen_obj_or_none(vr_ids, Variable)\n\n    def get_subsets(self) -&gt; list:\n        \"\"\"Return a list of subset IDs that belong to this process.\"\"\"\n        from ResearchOS import Subset\n        ss_ids = self._get_all_target_object_ids(cls = Subset)\n        return self._gen_obj_or_none(ss_ids, Subset)\n\n    def add_input_variable_id(self, var_id):\n        \"\"\"Add an input variable to the process.\"\"\"\n        # TODO: Need to add a mapping between variable ID and name in code.\n        from ResearchOS import Variable        \n        self._add_source_object_id(var_id, cls = Variable)\n\n    def add_output_variable_id(self, var_id):\n        \"\"\"Add an output variable to the process.\"\"\"\n        # TODO: Need to add a mapping between variable ID and name in code.\n        from ResearchOS import Variable        \n        self._add_target_object_id(var_id, cls = Variable)\n\n    def remove_input_variable_id(self, var_id):\n        \"\"\"Remove an input variable from the process.\"\"\"\n        from ResearchOS import Variable        \n        self._remove_source_object_id(var_id, cls = Variable)\n\n    def remove_output_variable_id(self, var_id):\n        \"\"\"Remove an output variable from the process.\"\"\"\n        from ResearchOS import Variable        \n        self._remove_target_object_id(var_id, cls = Variable)\n\n    def add_subset_id(self, ss_id):\n        \"\"\"Add a subset to the process.\"\"\"\n        from ResearchOS import Subset\n        self._add_target_object_id(ss_id, cls = Subset)\n\n    def remove_subset_id(self, ss_id):\n        \"\"\"Remove a subset from the process.\"\"\"\n        from ResearchOS import Subset\n        self._remove_target_object_id(ss_id, cls = Subset)\n\n    def run_method(self) -&gt; None:\n        \"\"\"Execute the attached method.\"\"\"\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.add_input_variable_id","title":"<code>add_input_variable_id(var_id)</code>","text":"<p>Add an input variable to the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def add_input_variable_id(self, var_id):\n    \"\"\"Add an input variable to the process.\"\"\"\n    # TODO: Need to add a mapping between variable ID and name in code.\n    from ResearchOS import Variable        \n    self._add_source_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.add_output_variable_id","title":"<code>add_output_variable_id(var_id)</code>","text":"<p>Add an output variable to the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def add_output_variable_id(self, var_id):\n    \"\"\"Add an output variable to the process.\"\"\"\n    # TODO: Need to add a mapping between variable ID and name in code.\n    from ResearchOS import Variable        \n    self._add_target_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.add_subset_id","title":"<code>add_subset_id(ss_id)</code>","text":"<p>Add a subset to the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def add_subset_id(self, ss_id):\n    \"\"\"Add a subset to the process.\"\"\"\n    from ResearchOS import Subset\n    self._add_target_object_id(ss_id, cls = Subset)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_analyses(self) -&gt; list:\n    \"\"\"Return a list of analysis objects that belong to this process.\"\"\"\n    from ResearchOS import Analysis\n    an_ids = self._get_all_source_object_ids(cls = Analysis)\n    return [Analysis(id = an_id) for an_id in an_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_input_variables","title":"<code>get_input_variables()</code>","text":"<p>Return a list of variable IDs that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_input_variables(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n    from ResearchOS import Variable\n    vr_ids = self._get_all_source_object_ids(cls = Variable)\n    return self._gen_obj_or_none(vr_ids, Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_output_variables","title":"<code>get_output_variables()</code>","text":"<p>Return a list of variable IDs that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_output_variables(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n    from ResearchOS import Variable\n    vr_ids = self._get_all_target_object_ids(cls = Variable)\n    return self._gen_obj_or_none(vr_ids, Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_subsets","title":"<code>get_subsets()</code>","text":"<p>Return a list of subset IDs that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_subsets(self) -&gt; list:\n    \"\"\"Return a list of subset IDs that belong to this process.\"\"\"\n    from ResearchOS import Subset\n    ss_ids = self._get_all_target_object_ids(cls = Subset)\n    return self._gen_obj_or_none(ss_ids, Subset)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.remove_input_variable_id","title":"<code>remove_input_variable_id(var_id)</code>","text":"<p>Remove an input variable from the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def remove_input_variable_id(self, var_id):\n    \"\"\"Remove an input variable from the process.\"\"\"\n    from ResearchOS import Variable        \n    self._remove_source_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.remove_output_variable_id","title":"<code>remove_output_variable_id(var_id)</code>","text":"<p>Remove an output variable from the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def remove_output_variable_id(self, var_id):\n    \"\"\"Remove an output variable from the process.\"\"\"\n    from ResearchOS import Variable        \n    self._remove_target_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.remove_subset_id","title":"<code>remove_subset_id(ss_id)</code>","text":"<p>Remove a subset from the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def remove_subset_id(self, ss_id):\n    \"\"\"Remove a subset from the process.\"\"\"\n    from ResearchOS import Subset\n    self._remove_target_object_id(ss_id, cls = Subset)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.run_method","title":"<code>run_method()</code>","text":"<p>Execute the attached method.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def run_method(self) -&gt; None:\n    \"\"\"Execute the attached method.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process_group/","title":"ProcessGroup","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/process_group.py</code> <pre><code>class ProcessGroup(PipelineObject):\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/","title":"Project","text":"<p>Inherits from PipelineObject</p> <p>             Bases: <code>PipelineObject</code></p> <p>A project is a collection of analyses. Class-specific Attributes: 1. current_analysis_id: The ID of the current analysis for this project. 2. current_dataset_id: The ID of the current dataset for this project. 3. project path: The root folder location of the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>class Project(PipelineObject):\n    \"\"\"A project is a collection of analyses.\n    Class-specific Attributes:\n    1. current_analysis_id: The ID of the current analysis for this project.\n    2. current_dataset_id: The ID of the current dataset for this project.\n    3. project path: The root folder location of the project.\"\"\"\n\n    prefix: str = \"PJ\"      \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Project)\n\n    @abstractmethod\n    def new_current(name: str = \"New Project\") -&gt; \"Project\":\n        \"\"\"Create a new analysis and set it as the current analysis for the current project.\n        Returns the project &amp; analysis objects as a tuple.\"\"\"\n        from ResearchOS import Analysis\n        pj = Project(name = name)\n        an = Analysis(name = pj.name + \"_Default_Analysis\")\n        pj.current_analysis_id = an.id\n        return pj, an\n\n    # TODO: Should I use __str__ or __repr__?\n    def __str__(self):        \n        if self.is_instance_object():\n            return super().__str__(default_instance_attrs.keys(), self.__dict__)\n        return super().__str__(default_abstract_attrs.keys(), self.__dict__)\n\n    def __repr__(self):\n        pass    \n\n    #################### Start class-specific attributes ###################\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the attributes that are required by ResearchOS.\n        Other attributes can be added &amp; modified later.\"\"\"  \n        attrs = {}\n        if self.is_instance_object():\n            attrs = default_instance_attrs  \n        else:\n            attrs = default_abstract_attrs    \n        super().__init__(default_attrs = attrs, **kwargs)\n\n    def validate_current_analysis_id(self, id: str) -&gt; None:\n        \"\"\"Validate the current analysis ID. If it is not valid, the value is rejected.\"\"\"        \n        if not isinstance(id, str):\n            raise ValueError(\"Specified value is not a string!\")\n        if not self.is_id(id):\n            raise ValueError(\"Specified value is not an ID!\")\n        parsed_id = self.parse_id(id)\n        if parsed_id[0] != \"AN\":\n            raise ValueError(\"Specified ID is not an Analysis!\")\n        if not self.object_exists(id):\n            raise ValueError(\"Analysis does not exist!\")\n\n    def validate_current_dataset_id(self, id: str) -&gt; None:\n        \"\"\"Validate the current dataset ID. If it is not valid, the value is rejected.\"\"\"\n        if not self.is_id(id):\n            raise ValueError(\"Specified value is not an ID!\")\n        parsed_id = self.parse_id(id)\n        if parsed_id[0] != \"DS\":\n            raise ValueError(\"Specified ID is not a Dataset!\")\n        if not self.object_exists(id):\n            raise ValueError(\"Dataset does not exist!\")\n\n    def validate_project_path(self, path: str) -&gt; None:\n        \"\"\"Validate the project path. If it is not valid, the value is rejected.\"\"\"\n        # 1. Check that the path exists in the file system.\n        import os\n        if not isinstance(path, str):\n            raise ValueError(\"Specified path is not a string!\")\n        if not os.path.exists(path):\n            raise ValueError(\"Specified path is not a path or does not currently exist!\")        \n\n    def json_translate_XXX(self) -&gt; Any:\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"\n\n    #################### Start Source objects ####################\n    def get_users(self) -&gt; list:\n        \"\"\"Return a list of user objects that belong to this project. Identical to Dataset.get_users()\"\"\"\n        from ResearchOS.user import User\n        us_ids = self._get_all_source_object_ids(cls = User)\n        return self._gen_obj_or_none(us_ids, User)\n\n    #################### Start Target objects ####################\n    def get_analyses(self) -&gt; list[\"Analysis\"]:        \n        \"\"\"Return a list of analysis objects in the project.\"\"\"\n        from ResearchOS.PipelineObjects.analysis import Analysis\n        an_ids = self._get_all_target_object_ids(cls = Analysis)\n        return self._gen_obj_or_none(an_ids, Analysis)\n\n    def add_analysis_id(self, analysis_id: str):\n        \"\"\"Add an analysis to the project.\"\"\"\n        from ResearchOS.PipelineObjects.analysis import Analysis        \n        self._add_target_object_id(analysis_id, cls = Analysis)\n\n    def remove_analysis_id(self, analysis_id: str):\n        \"\"\"Remove an analysis from the project.\"\"\"\n        from ResearchOS.PipelineObjects.analysis import Analysis        \n        self._remove_target_object_id(analysis_id, cls = Analysis)\n\n    #################### Start class-specific methods ####################\n    def open_project_path(self) -&gt; None:\n        \"\"\"Open the project's path in the Finder/File Explorer.\"\"\"\n        path = self.project_path\n        self._open_path(path)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the attributes that are required by ResearchOS. Other attributes can be added &amp; modified later.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the attributes that are required by ResearchOS.\n    Other attributes can be added &amp; modified later.\"\"\"  \n    attrs = {}\n    if self.is_instance_object():\n        attrs = default_instance_attrs  \n    else:\n        attrs = default_abstract_attrs    \n    super().__init__(default_attrs = attrs, **kwargs)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.add_analysis_id","title":"<code>add_analysis_id(analysis_id)</code>","text":"<p>Add an analysis to the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def add_analysis_id(self, analysis_id: str):\n    \"\"\"Add an analysis to the project.\"\"\"\n    from ResearchOS.PipelineObjects.analysis import Analysis        \n    self._add_target_object_id(analysis_id, cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects in the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def get_analyses(self) -&gt; list[\"Analysis\"]:        \n    \"\"\"Return a list of analysis objects in the project.\"\"\"\n    from ResearchOS.PipelineObjects.analysis import Analysis\n    an_ids = self._get_all_target_object_ids(cls = Analysis)\n    return self._gen_obj_or_none(an_ids, Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.get_users","title":"<code>get_users()</code>","text":"<p>Return a list of user objects that belong to this project. Identical to Dataset.get_users()</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def get_users(self) -&gt; list:\n    \"\"\"Return a list of user objects that belong to this project. Identical to Dataset.get_users()\"\"\"\n    from ResearchOS.user import User\n    us_ids = self._get_all_source_object_ids(cls = User)\n    return self._gen_obj_or_none(us_ids, User)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.json_translate_XXX","title":"<code>json_translate_XXX()</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def json_translate_XXX(self) -&gt; Any:\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.new_current","title":"<code>new_current(name='New Project')</code>  <code>abstractmethod</code>","text":"<p>Create a new analysis and set it as the current analysis for the current project. Returns the project &amp; analysis objects as a tuple.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>@abstractmethod\ndef new_current(name: str = \"New Project\") -&gt; \"Project\":\n    \"\"\"Create a new analysis and set it as the current analysis for the current project.\n    Returns the project &amp; analysis objects as a tuple.\"\"\"\n    from ResearchOS import Analysis\n    pj = Project(name = name)\n    an = Analysis(name = pj.name + \"_Default_Analysis\")\n    pj.current_analysis_id = an.id\n    return pj, an\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.open_project_path","title":"<code>open_project_path()</code>","text":"<p>Open the project's path in the Finder/File Explorer.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def open_project_path(self) -&gt; None:\n    \"\"\"Open the project's path in the Finder/File Explorer.\"\"\"\n    path = self.project_path\n    self._open_path(path)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.remove_analysis_id","title":"<code>remove_analysis_id(analysis_id)</code>","text":"<p>Remove an analysis from the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def remove_analysis_id(self, analysis_id: str):\n    \"\"\"Remove an analysis from the project.\"\"\"\n    from ResearchOS.PipelineObjects.analysis import Analysis        \n    self._remove_target_object_id(analysis_id, cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_current_analysis_id","title":"<code>validate_current_analysis_id(id)</code>","text":"<p>Validate the current analysis ID. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_current_analysis_id(self, id: str) -&gt; None:\n    \"\"\"Validate the current analysis ID. If it is not valid, the value is rejected.\"\"\"        \n    if not isinstance(id, str):\n        raise ValueError(\"Specified value is not a string!\")\n    if not self.is_id(id):\n        raise ValueError(\"Specified value is not an ID!\")\n    parsed_id = self.parse_id(id)\n    if parsed_id[0] != \"AN\":\n        raise ValueError(\"Specified ID is not an Analysis!\")\n    if not self.object_exists(id):\n        raise ValueError(\"Analysis does not exist!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_current_dataset_id","title":"<code>validate_current_dataset_id(id)</code>","text":"<p>Validate the current dataset ID. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_current_dataset_id(self, id: str) -&gt; None:\n    \"\"\"Validate the current dataset ID. If it is not valid, the value is rejected.\"\"\"\n    if not self.is_id(id):\n        raise ValueError(\"Specified value is not an ID!\")\n    parsed_id = self.parse_id(id)\n    if parsed_id[0] != \"DS\":\n        raise ValueError(\"Specified ID is not a Dataset!\")\n    if not self.object_exists(id):\n        raise ValueError(\"Dataset does not exist!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_project_path","title":"<code>validate_project_path(path)</code>","text":"<p>Validate the project path. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_project_path(self, path: str) -&gt; None:\n    \"\"\"Validate the project path. If it is not valid, the value is rejected.\"\"\"\n    # 1. Check that the path exists in the file system.\n    import os\n    if not isinstance(path, str):\n        raise ValueError(\"Specified path is not a string!\")\n    if not os.path.exists(path):\n        raise ValueError(\"Specified path is not a path or does not currently exist!\")        \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/","title":"Subset","text":"<p>Inherits from PipelineObject</p> <p>             Bases: <code>PipelineObject</code></p> <p>Provides rules to select a subset of data from a dataset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>class Subset(PipelineObject):\n    \"\"\"Provides rules to select a subset of data from a dataset.\"\"\"\n\n    prefix = \"SS\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Subset)\n\n    #################### Start class-specific attributes ###################\n    def add_criteria(self, var_id: str, value, logic: str) -&gt; None:\n        \"\"\"Add a criterion to the subset.\n        Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".\"\"\"\n        from ResearchOS import Variable\n        logic_options = [\"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\"]\n        if logic not in logic_options:\n            raise ValueError(\"Invalid logic value.\")\n        if var_id not in Variable.get_all_ids():\n            raise ValueError(\"Invalid variable ID.\")\n        self.criteria.append((var_id, value, logic))\n\n    #################### Start Source objects ####################\n    def get_processes(self) -&gt; list:\n        \"\"\"Return a list of process objects that belong to this subset.\"\"\"\n        from ResearchOS import Process\n        pr_ids = self._get_all_source_object_ids(cls = Process)\n        return [Process(id = pr_id) for pr_id in pr_ids]\n\n    def get_plots(self) -&gt; list:\n        \"\"\"Return a list of plot objects that belong to this subset.\"\"\"\n        from ResearchOS import Plot\n        pl_ids = self._get_all_source_object_ids(cls = Plot)\n        return [Plot(id = pl_id) for pl_id in pl_ids]\n\n    def get_trials(self) -&gt; list:\n        \"\"\"Return a list of trial objects that belong to this subset.\"\"\"\n        from ResearchOS import Trial\n        tr_ids = self._get_all_source_object_ids(cls = Trial)\n        return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.add_criteria","title":"<code>add_criteria(var_id, value, logic)</code>","text":"<p>Add a criterion to the subset. Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def add_criteria(self, var_id: str, value, logic: str) -&gt; None:\n    \"\"\"Add a criterion to the subset.\n    Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".\"\"\"\n    from ResearchOS import Variable\n    logic_options = [\"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\"]\n    if logic not in logic_options:\n        raise ValueError(\"Invalid logic value.\")\n    if var_id not in Variable.get_all_ids():\n        raise ValueError(\"Invalid variable ID.\")\n    self.criteria.append((var_id, value, logic))\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_plots","title":"<code>get_plots()</code>","text":"<p>Return a list of plot objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_plots(self) -&gt; list:\n    \"\"\"Return a list of plot objects that belong to this subset.\"\"\"\n    from ResearchOS import Plot\n    pl_ids = self._get_all_source_object_ids(cls = Plot)\n    return [Plot(id = pl_id) for pl_id in pl_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_processes","title":"<code>get_processes()</code>","text":"<p>Return a list of process objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_processes(self) -&gt; list:\n    \"\"\"Return a list of process objects that belong to this subset.\"\"\"\n    from ResearchOS import Process\n    pr_ids = self._get_all_source_object_ids(cls = Process)\n    return [Process(id = pr_id) for pr_id in pr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_trials","title":"<code>get_trials()</code>","text":"<p>Return a list of trial objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_trials(self) -&gt; list:\n    \"\"\"Return a list of trial objects that belong to this subset.\"\"\"\n    from ResearchOS import Trial\n    tr_ids = self._get_all_source_object_ids(cls = Trial)\n    return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResearchOS","text":"<p>This is the documentation for ResearchOS</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    Research Object Types/  # The documentation homepage.\n        research_objects.md  # The documentation homepage.\n        pipeline_objects.md  # The documentation homepage.\n        data_objects.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#test","title":"TEST","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#example-1","title":"Example 1","text":"<p>Let's use ResearchOS to create a simple one step pipeline that reads a single number from a text file, squares it, and stores that value.</p> <p>First, after creating a new project directory and activating a virtual environment in that directory, install ResearchOS:</p> <pre><code>pip install researchos\n</code></pre> <p>Next, in the command line, run the following command:</p> <pre><code>python -m researchos quick-start\n</code></pre> <p>This will perform the following actions:</p> <ol> <li> <p>Create a new directory called 'researchos_db' in the current directory.</p> </li> <li> <p>Create a .db file in the 'researchos_db' directory with the proper schema.</p> </li> <li> <p>Create a new Project object in the .db file, and sets it to be the current Project.</p> </li> </ol> <p>Then, create a file called <code>example1.py</code> with the following contents:</p> <pre><code>from researchos.pipeline_objects.project import Project\n</code></pre> <p>This will create a new project.</p>"},{"location":"Research%20Object%20Types/research_object/","title":"Research Objects","text":""},{"location":"Research%20Object%20Types/research_object/#overview","title":"Overview","text":"<p>Everything within the ResearchOS framework is a Research Object - at the highest level are User objects, and at the lowest are Variable objects. All Research Objects are stored in the database, and are accessible by using the methods provided in the ResearchOS API.</p> <p>All Research Objects are one or both of the following:</p> <ul> <li> <p>Data Objects - objects that are involved in storing data, such as a Subject or Trial. These objects are typically created by a Process, and are used to store data that is generated by a Process. It is perhaps helpful to recognize that these objects are similar in nature to the \"factors\" of a statistical analysis.</p> </li> <li> <p>Pipeline Objects - objects that are involved in performing data analysis, such as a Process or Project.</p> </li> </ul> <p>One research object. Parent class of Data Objects &amp; Pipeline Objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>class ResearchObject():\n    \"\"\"One research object. Parent class of Data Objects &amp; Pipeline Objects.\"\"\"\n\n    prefix = \"RO\" # Testing only\n    _instances = weakref.WeakValueDictionary()\n    _instances_count = {}\n\n    def __new__(cls, *args, **kwargs):\n        \"\"\"Create a new data object. If the object already exists, return the existing object.\"\"\"\n        object_id = kwargs.get(\"id\", None)\n        if object_id is None:\n            object_id = cls.create_id(cls)\n        if object_id in ResearchObject._instances:\n            ResearchObject._instances_count[object_id] += 1\n            return ResearchObject._instances[object_id]\n        else: # Create a new object.\n            instance = super(ResearchObject, cls).__new__(cls)\n            ResearchObject._instances[object_id] = instance\n            ResearchObject._instances_count[object_id] = 1\n            instance.__dict__['id'] = object_id            \n            return instance\n\n    def __del__(self) -&gt; None:\n        \"\"\"Delete the object from memory.\"\"\"\n        print(\"Deleting\" + self.id)\n        # if self.id not in ResearchObject._instances:\n        #     raise ValueError(\"Object not in instances.\")\n        ResearchObject._instances_count[self.id] -= 1\n        if ResearchObject._instances_count[self.id] == 0:\n            del ResearchObject._instances[self.id]\n            del ResearchObject._instances_count[self.id]\n\n    def __init__(self, name: str, id: str = None, _stack_limit: int = 2) -&gt; None:\n        \"\"\"\"\"\"        \n        if not id:\n            id = self.id\n        action = Action.open(name = \"created object \" + id)\n        try:\n            # Create the object in the database.\n            cursor = Action.conn.cursor()\n            sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n            cursor.execute(sqlquery)\n            Action.conn.commit()\n        except Exception as e:\n            print(e)\n        # print(traceback.format_stack(limit = _stack_limit))\n        if \"name\" not in self.__dict__:\n            self.name = name\n        if \"deleted\" not in self.__dict__:\n            self.deleted = False\n        action.close() # Close the action, if possible.\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        \"\"\"Set the attributes of a research object in memory and in the SQL database.\"\"\"\n        self.__dict__[__name] = __value\n\n        if __name == \"id\": \n            raise ValueError(\"Cannot change the ID of a research object.\")\n\n        if __name[0] == \"_\":\n            return # Don't log private attributes.\n\n        # Open an action if there is not one open currently. Returns the open action if it is already open.\n        action = Action.open(name = \"attribute_changed\")\n\n        table_name = \"research_objects\"\n        cursor = Action.conn.cursor()        \n        # Create the object in the database, in the table that contains only the complete list of object ID's.        \n        sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name)}', '{__value}')\"\n        cursor.execute(sqlquery)\n        Action.conn.commit()\n        action.close() # Close the action, if possible.     \n\n    ###############################################################################################################################\n    #################################################### end of dunder methods ####################################################\n    ###############################################################################################################################\n\n    @abstractmethod\n    def create_id(cls, abstract: str = None, instance: str = None) -&gt; str:\n        \"\"\"Create a unique ID for the research object.\"\"\"\n        import random\n        table_name = \"research_objects\"\n        is_unique = False\n        while not is_unique:\n            if not abstract:\n                abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n                abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n            else:\n                abstract_new = abstract\n\n            if not instance:\n                instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n                instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n            else:\n                instance_new = instance\n\n            id = cls.prefix + abstract_new + \"_\" + instance_new\n            cursor = Action.conn.cursor()\n            sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n            cursor.execute(sql)\n            rows = cursor.fetchall()\n            if len(rows) == 0:\n                is_unique = True\n        return id  \n\n    @abstractmethod\n    def _prefix_to_table_name(cls) -&gt; str:\n        \"\"\"Convert a prefix to a table name.\"\"\"\n        prefix = cls.prefix\n        if prefix in [\"PJ\", \"AN\", \"LG\", \"PG\", \"PR\", \"ST\", \"VW\"]:\n            return \"PipelineObjects\"\n        elif prefix in [\"DS\", \"SJ\", \"TR\", \"PH\"]:\n            return \"DataObjects\"\n        elif prefix in [\"VR\"]:\n            raise NotImplementedError(\"Which table do Variables go in?\") \n        elif prefix in [\"RO\"]:\n            return \"research_objects\"\n        else:\n            raise ValueError(\"Invalid prefix.\")\n\n    @abstractmethod\n    def load(id: str, cls: Type, action_id: str = None) -&gt; \"ResearchObject\":\n        \"\"\"Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.\"\"\"\n        # 1. Get the current action if not provided.\n        cursor = Action.conn.cursor()\n        timestamp = datetime.datetime.utcnow()\n        if not action_id:\n            action = Action.previous() # With no arguments, gets the \"current\"/most recent action.\n            action_id = action.id\n            timestamp = action.timestamp_closed\n\n        # 2. Get the action ID's for this object that were closed before the action_id.\n        sqlquery = f\"SELECT action_id, attr_id, attr_value, child_of FROM research_object_attributes WHERE object_id = '{id}'\"\n        attr_result = cursor.execute(sqlquery).fetchall()\n        if len(attr_result) == 0:\n            raise ValueError(\"No object with that ID exists.\")\n        curr_obj_action_ids = [row[0] for row in attr_result]\n        curr_obj_attr_ids = [row[1] for row in attr_result]\n        attrs = {}\n        # Get the action ID's for this object by timestamp, descending.        \n        curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n        sqlquery = f\"SELECT action_id, timestamp_closed FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp_closed DESC\"\n        action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n        action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n        used_attr_ids = []\n        num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n        attrs[\"id\"] = id\n        attrs[\"child_of\"] = None\n        for index, curr_obj_action_id in enumerate(action_ids_in_time_order):            \n            attr_id = attr_result[index][1]\n            if attr_id in used_attr_ids:\n                continue\n            used_attr_ids.append(attr_id)            \n            attr_value = attr_result[index][2]\n            child_of = attr_result[index][3]\n\n            attr_name = ResearchObject._get_attr_name(attr_id)\n            attrs[attr_name] = attr_value\n            if len(used_attr_ids) == num_attrs:\n                break\n\n\n        research_object = cls(name = attrs[\"name\"], id = id)\n        research_object.__dict__.update(attrs)\n        return research_object\n\n    @abstractmethod\n    def new(self, name: str, cls: Type) -&gt; \"ResearchObject\":\n        research_object = cls(name = name)\n        return research_object\n\n    @abstractmethod\n    def _get_attr_id(attr_name: str) -&gt; int:\n        \"\"\"Get the ID of an attribute. If it does not exist, create it.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            sqlquery = f\"INSERT INTO Attributes (attr_name) VALUES ('{attr_name}')\"\n            cursor.execute(sqlquery)\n            sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n            cursor.execute(sqlquery)            \n            rows = cursor.fetchall()\n            if len(rows) &gt; 1:\n                raise Exception(\"More than one attribute with the same name.\")\n\n        return rows[0][0]   \n\n    @abstractmethod\n    def _get_attr_name(attr_id: int) -&gt; str:\n        \"\"\"Get the name of an attribute.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_name FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return rows[0][0]\n\n    @abstractmethod\n    def is_id(id: str) -&gt; bool:\n        \"\"\"Check if the given ID is a valid ID for this research object.\"\"\"        \n        pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n        if not re.match(pattern, id):\n            return False\n        return True\n\n    ###############################################################################################################################\n    #################################################### end of abstract methods ##################################################\n    ###############################################################################################################################\n\n    def _get_all_parents(self, parent_id: str, child_table_name: str, parent_column: str) -&gt; list[str]:\n        \"\"\"Get all parents of the child object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT uuid FROM {child_table_name} WHERE {parent_column} = \"{parent_id}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row['uuid'])\n        return data\n\n    def _get_parent(self, child_uuid: str, child_table_name: str, parent_column: str) -&gt; str:\n        \"\"\"Get the parent of the child object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT {parent_column} FROM {child_table_name} WHERE uuid = \"{child_uuid}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row[parent_column])\n        if len(data) &gt; 1:\n            raise ValueError(f\"Expected &lt;=1 parent, got {len(data)}.\")\n        if len(data) == 1:\n            data = data[0]\n        else:\n            data = None\n        return data\n\n    def _is_parent(self, id: str, parent_id: str, table_name: str, parent_column: str, child_column: str) -&gt; bool:\n        \"\"\"Check if the provided parent type is the parent of the child object.\"\"\"\n        action = Action.previous()\n        sql = f\"SELECT object_id FROM research_object_attributes WHERE child_of = {parent_id} AND object_id = {id} AND action_id = {action.id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _get_all_children(self, uuid: str, column: str, child_table_name: str) -&gt; list[str]:\n        \"\"\"Get all children of the parent object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT uuid FROM {child_table_name} WHERE {column} = \"{uuid}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row['uuid'])\n        return data\n\n    def _is_child(self, child_id: str) -&gt; bool:\n        \"\"\"Check if the provided child type is the child of the parent (self) object.\"\"\"\n        action = Action.previous()\n        sql = f\"SELECT object_id FROM research_object_attributes WHERE child_of = {self.id} AND object_id = {child_id} AND action_id = {action.id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        result = cursor.fetchall()\n        return len(result) &gt; 0\n\n    ###############################################################################################################################\n    #################################################### end of parentage methods #################################################\n    ############################################################################################################################### \n\n    def parse_id(self, id: str) -&gt; tuple:\n        \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n        if not ResearchObject.is_id(id):\n            raise ValueError(\"Invalid ID.\")\n        abstract = id[2:2+abstract_id_len]\n        instance = id[-instance_id_len:]\n        return (self.prefix, abstract, instance)\n\n    def _get_public_keys(self) -&gt; list[str]:\n        \"\"\"Return all public keys of the current object.\"\"\"        \n        keys = []\n        for key in vars(self).keys():\n            if not key.startswith('_'):\n                keys.append(key)\n        return keys\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__del__","title":"<code>__del__()</code>","text":"<p>Delete the object from memory.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"Delete the object from memory.\"\"\"\n    print(\"Deleting\" + self.id)\n    # if self.id not in ResearchObject._instances:\n    #     raise ValueError(\"Object not in instances.\")\n    ResearchObject._instances_count[self.id] -= 1\n    if ResearchObject._instances_count[self.id] == 0:\n        del ResearchObject._instances[self.id]\n        del ResearchObject._instances_count[self.id]\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__init__","title":"<code>__init__(name, id=None, _stack_limit=2)</code>","text":"Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __init__(self, name: str, id: str = None, _stack_limit: int = 2) -&gt; None:\n    \"\"\"\"\"\"        \n    if not id:\n        id = self.id\n    action = Action.open(name = \"created object \" + id)\n    try:\n        # Create the object in the database.\n        cursor = Action.conn.cursor()\n        sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n        cursor.execute(sqlquery)\n        Action.conn.commit()\n    except Exception as e:\n        print(e)\n    # print(traceback.format_stack(limit = _stack_limit))\n    if \"name\" not in self.__dict__:\n        self.name = name\n    if \"deleted\" not in self.__dict__:\n        self.deleted = False\n    action.close() # Close the action, if possible.\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__new__","title":"<code>__new__(*args, **kwargs)</code>","text":"<p>Create a new data object. If the object already exists, return the existing object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __new__(cls, *args, **kwargs):\n    \"\"\"Create a new data object. If the object already exists, return the existing object.\"\"\"\n    object_id = kwargs.get(\"id\", None)\n    if object_id is None:\n        object_id = cls.create_id(cls)\n    if object_id in ResearchObject._instances:\n        ResearchObject._instances_count[object_id] += 1\n        return ResearchObject._instances[object_id]\n    else: # Create a new object.\n        instance = super(ResearchObject, cls).__new__(cls)\n        ResearchObject._instances[object_id] = instance\n        ResearchObject._instances_count[object_id] = 1\n        instance.__dict__['id'] = object_id            \n        return instance\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__setattr__","title":"<code>__setattr__(__name, __value)</code>","text":"<p>Set the attributes of a research object in memory and in the SQL database.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __setattr__(self, __name: str, __value: Any) -&gt; None:\n    \"\"\"Set the attributes of a research object in memory and in the SQL database.\"\"\"\n    self.__dict__[__name] = __value\n\n    if __name == \"id\": \n        raise ValueError(\"Cannot change the ID of a research object.\")\n\n    if __name[0] == \"_\":\n        return # Don't log private attributes.\n\n    # Open an action if there is not one open currently. Returns the open action if it is already open.\n    action = Action.open(name = \"attribute_changed\")\n\n    table_name = \"research_objects\"\n    cursor = Action.conn.cursor()        \n    # Create the object in the database, in the table that contains only the complete list of object ID's.        \n    sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name)}', '{__value}')\"\n    cursor.execute(sqlquery)\n    Action.conn.commit()\n    action.close() # Close the action, if possible.     \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.create_id","title":"<code>create_id(abstract=None, instance=None)</code>  <code>abstractmethod</code>","text":"<p>Create a unique ID for the research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef create_id(cls, abstract: str = None, instance: str = None) -&gt; str:\n    \"\"\"Create a unique ID for the research object.\"\"\"\n    import random\n    table_name = \"research_objects\"\n    is_unique = False\n    while not is_unique:\n        if not abstract:\n            abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n            abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n        else:\n            abstract_new = abstract\n\n        if not instance:\n            instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n            instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n        else:\n            instance_new = instance\n\n        id = cls.prefix + abstract_new + \"_\" + instance_new\n        cursor = Action.conn.cursor()\n        sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n        cursor.execute(sql)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            is_unique = True\n    return id  \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.is_id","title":"<code>is_id(id)</code>  <code>abstractmethod</code>","text":"<p>Check if the given ID is a valid ID for this research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef is_id(id: str) -&gt; bool:\n    \"\"\"Check if the given ID is a valid ID for this research object.\"\"\"        \n    pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n    if not re.match(pattern, id):\n        return False\n    return True\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.load","title":"<code>load(id, cls, action_id=None)</code>  <code>abstractmethod</code>","text":"<p>Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef load(id: str, cls: Type, action_id: str = None) -&gt; \"ResearchObject\":\n    \"\"\"Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.\"\"\"\n    # 1. Get the current action if not provided.\n    cursor = Action.conn.cursor()\n    timestamp = datetime.datetime.utcnow()\n    if not action_id:\n        action = Action.previous() # With no arguments, gets the \"current\"/most recent action.\n        action_id = action.id\n        timestamp = action.timestamp_closed\n\n    # 2. Get the action ID's for this object that were closed before the action_id.\n    sqlquery = f\"SELECT action_id, attr_id, attr_value, child_of FROM research_object_attributes WHERE object_id = '{id}'\"\n    attr_result = cursor.execute(sqlquery).fetchall()\n    if len(attr_result) == 0:\n        raise ValueError(\"No object with that ID exists.\")\n    curr_obj_action_ids = [row[0] for row in attr_result]\n    curr_obj_attr_ids = [row[1] for row in attr_result]\n    attrs = {}\n    # Get the action ID's for this object by timestamp, descending.        \n    curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n    sqlquery = f\"SELECT action_id, timestamp_closed FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp_closed DESC\"\n    action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n    action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n    used_attr_ids = []\n    num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n    attrs[\"id\"] = id\n    attrs[\"child_of\"] = None\n    for index, curr_obj_action_id in enumerate(action_ids_in_time_order):            \n        attr_id = attr_result[index][1]\n        if attr_id in used_attr_ids:\n            continue\n        used_attr_ids.append(attr_id)            \n        attr_value = attr_result[index][2]\n        child_of = attr_result[index][3]\n\n        attr_name = ResearchObject._get_attr_name(attr_id)\n        attrs[attr_name] = attr_value\n        if len(used_attr_ids) == num_attrs:\n            break\n\n\n    research_object = cls(name = attrs[\"name\"], id = id)\n    research_object.__dict__.update(attrs)\n    return research_object\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.parse_id","title":"<code>parse_id(id)</code>","text":"<p>Parse an ID into its prefix, abstract, and instance parts.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def parse_id(self, id: str) -&gt; tuple:\n    \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n    if not ResearchObject.is_id(id):\n        raise ValueError(\"Invalid ID.\")\n    abstract = id[2:2+abstract_id_len]\n    instance = id[-instance_id_len:]\n    return (self.prefix, abstract, instance)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/data_object/","title":"Data Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.</p> Source code in <code>src/ResearchOS/data_objects/data_object.py</code> <pre><code>class DataObject(ResearchObject):\n    \"\"\"The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.\"\"\"\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        super().__setattr__(__name, __value)        \n\n        # Set attributes of the object in the database.\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/","title":"Dataset","text":"<p>Inherits from DataObject</p> <p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/data_objects/dataset.py</code> <pre><code>class Dataset(DataObject):\n\n    _id_prefix: str = \"DS\"\n    _table_name: str = \"datasets\"\n\n    def __new__(cls, *args, **kwargs):\n        return super().__new__(cls, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        # Check if the object already exists.\n        if self.uuid in DataObject._instances:\n            return\n        super().__init__(*args, **kwargs)\n        self._subjects = self._get_all_children(self.uuid, \"dataset_uuid\", \"subjects\")\n\n    @property\n    def subjects(self) -&gt; list[DataObject]:\n        \"\"\"Return all subjects.\"\"\"\n        from subject import Subject\n        return [Subject(uuid) for uuid in self._subjects]\n\n    @subjects.setter\n    def subjects(self, values: list[Union[str, DataObject]] = None) -&gt; None:\n        \"\"\"Set subjects. Can provide either a list of subject UUIDs or a list of subject objects.\"\"\"\n        from subject import Subject\n        self._check_type(values, [str, Subject])\n        self._subjects = self._to_uuids(values)\n\n    def remove_subject(self, subject: Union[str, DataObject]) -&gt; None:\n        \"\"\"Remove a subject from the dataset.\"\"\"\n        from subject import Subject\n        self._check_type(subject, [str, Subject])\n        self._subjects.remove(subject.uuid)\n        self.update()\n\n    def add_subject(self, subject: Union[str, DataObject]) -&gt; None:\n        \"\"\"Add a subject to the dataset.\"\"\"\n        from subject import Subject\n        self._check_type(subject, [str, Subject])\n        self._subjects.append(subject.uuid)\n        self.update()\n\n    def get_current():\n        \"\"\"Get the current dataset.\"\"\"\n        pass\n\n    def set_current():\n        \"\"\"Set this dataset as the \"current\".\"\"\"\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.data_objects.dataset.Dataset.subjects","title":"<code>subjects: list[DataObject]</code>  <code>property</code> <code>writable</code>","text":"<p>Return all subjects.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.data_objects.dataset.Dataset.add_subject","title":"<code>add_subject(subject)</code>","text":"<p>Add a subject to the dataset.</p> Source code in <code>src/ResearchOS/data_objects/dataset.py</code> <pre><code>def add_subject(self, subject: Union[str, DataObject]) -&gt; None:\n    \"\"\"Add a subject to the dataset.\"\"\"\n    from subject import Subject\n    self._check_type(subject, [str, Subject])\n    self._subjects.append(subject.uuid)\n    self.update()\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.data_objects.dataset.Dataset.get_current","title":"<code>get_current()</code>","text":"<p>Get the current dataset.</p> Source code in <code>src/ResearchOS/data_objects/dataset.py</code> <pre><code>def get_current():\n    \"\"\"Get the current dataset.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.data_objects.dataset.Dataset.remove_subject","title":"<code>remove_subject(subject)</code>","text":"<p>Remove a subject from the dataset.</p> Source code in <code>src/ResearchOS/data_objects/dataset.py</code> <pre><code>def remove_subject(self, subject: Union[str, DataObject]) -&gt; None:\n    \"\"\"Remove a subject from the dataset.\"\"\"\n    from subject import Subject\n    self._check_type(subject, [str, Subject])\n    self._subjects.remove(subject.uuid)\n    self.update()\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.data_objects.dataset.Dataset.set_current","title":"<code>set_current()</code>","text":"<p>Set this dataset as the \"current\".</p> Source code in <code>src/ResearchOS/data_objects/dataset.py</code> <pre><code>def set_current():\n    \"\"\"Set this dataset as the \"current\".\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/","title":"Phase","text":"<p>             Bases: <code>DataObject</code></p> <p>Phase class.</p> Source code in <code>src/ResearchOS/data_objects/phase.py</code> <pre><code>class Phase(DataObject):\n    \"\"\"Phase class.\"\"\"\n\n    _id_prefix: str = \"PH\"\n    _table_name: str = \"phases\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._variables_list = self._get_all_children(self.uuid, \"phase_uuid\", \"phases\")\n        self._trials_list = self._get_all_parents(self.uuid, \"phase_uuid\", \"trial_uuid\", \"phases\")\n\n    @property\n    def variables(self) -&gt; list[DataObject]:\n        \"\"\"Return all variables.\"\"\"\n        from variable import Variable\n        return [Variable(uuid) for uuid in self._variables_list]\n\n    @variables.setter\n    def variables(self, values: list[Union[str, DataObject]] = None) -&gt; None:\n        \"\"\"Set variables. Can provide either a list of variable UUIDs or a list of variable objects.\"\"\"\n        from variable import Variable\n        self._check_type(values, [str, Variable])\n        self._variables_list = self._to_uuids(values)\n\n    @property\n    def trials(self) -&gt; list[DataObject]:\n        \"\"\"Return all trials.\"\"\"\n        from trial import Trial\n        return [Trial(uuid) for uuid in self._trials_list]\n\n    @trials.setter\n    def trials(self, values: list[Union[str, DataObject]] = None) -&gt; None:\n        \"\"\"Set trials. Can provide either a list of trial UUIDs or a list of trial objects.\"\"\"\n        from trial import Trial\n        self._check_type(values, [str, Trial])\n        self._trials_list = self._to_uuids(values)\n\n    def remove_variable(self, variable: Union[str, DataObject]) -&gt; None:\n        \"\"\"Remove a variable from the phase.\"\"\"\n        from variable import Variable\n        self._check_type(variable, [str, Variable])\n        self._variables.remove(variable.uuid)\n        self.update()\n\n    def missing_parent_error(self) -&gt; None:\n        \"\"\"Raise an error if the parent is missing.\"\"\"\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.data_objects.phase.Phase.trials","title":"<code>trials: list[DataObject]</code>  <code>property</code> <code>writable</code>","text":"<p>Return all trials.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.data_objects.phase.Phase.variables","title":"<code>variables: list[DataObject]</code>  <code>property</code> <code>writable</code>","text":"<p>Return all variables.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.data_objects.phase.Phase.missing_parent_error","title":"<code>missing_parent_error()</code>","text":"<p>Raise an error if the parent is missing.</p> Source code in <code>src/ResearchOS/data_objects/phase.py</code> <pre><code>def missing_parent_error(self) -&gt; None:\n    \"\"\"Raise an error if the parent is missing.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.data_objects.phase.Phase.remove_variable","title":"<code>remove_variable(variable)</code>","text":"<p>Remove a variable from the phase.</p> Source code in <code>src/ResearchOS/data_objects/phase.py</code> <pre><code>def remove_variable(self, variable: Union[str, DataObject]) -&gt; None:\n    \"\"\"Remove a variable from the phase.\"\"\"\n    from variable import Variable\n    self._check_type(variable, [str, Variable])\n    self._variables.remove(variable.uuid)\n    self.update()\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/","title":"Subject","text":"<p>             Bases: <code>DataObject</code></p> <p>Subject class.</p> Source code in <code>src/ResearchOS/data_objects/subject.py</code> <pre><code>class Subject(DataObject):\n    \"\"\"Subject class.\"\"\"\n\n    _id_prefix: str = \"SB\"\n    _table_name: str = \"subjects\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._visits_list = self._get_all_children(self.uuid, \"subject_uuid\", \"visits\") # Get all visits for the subject.\n        self.dataset_uuid = self._get_parent(self.uuid, \"subjects\", \"dataset_uuid\") # Get the dataset for the subject.\n\n    @property\n    def visits(self):\n        \"\"\"Return all visits.\"\"\"\n        from visit import Visit\n        x = [Visit(uuid) for uuid in self._visits_list]\n\n    @visits.setter\n    def visits(self, values: list[Union[str, DataObject]] = None) -&gt; None:\n        \"\"\"Set visits. Can provide either a list of visit UUIDs or a list of visit objects.\"\"\"\n        from visit import Visit\n        self._check_type(values, [str, Visit])\n        self._visits_list = self._to_uuids(values)\n\n    @property\n    def dataset(self):\n        \"\"\"Return the dataset.\"\"\"\n        from objects.dataset import Dataset\n        if not self.dataset_uuid:\n            return None\n        return Dataset(self.dataset_uuid)\n\n    @dataset.setter\n    def dataset(self):\n        \"\"\"Set the dataset.\"\"\"\n        raise AttributeError(\"Cannot set the dataset from a subject.\")\n\n    def add_visit(self, visit: Union[str, DataObject]) -&gt; None:\n        \"\"\"Add a visit to the subject.\"\"\"\n        from visit import Visit\n        self._check_type(visit, [str, Visit])\n        self._visits_list.append(visit.uuid)\n        self.update()\n\n    def remove_visit(self, visit: Union[str, DataObject]) -&gt; None:\n        \"\"\"Remove a visit from the subject.\"\"\"\n        from visit import Visit\n        self._check_type(visit, [str, Visit])\n        self._visits_list.remove(visit.uuid)\n        self.update()    \n\n    def missing_parent_error(self) -&gt; None:\n        \"\"\"Raise an error if the parent is missing.\"\"\"\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.data_objects.subject.Subject.dataset","title":"<code>dataset</code>  <code>property</code> <code>writable</code>","text":"<p>Return the dataset.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.data_objects.subject.Subject.visits","title":"<code>visits</code>  <code>property</code> <code>writable</code>","text":"<p>Return all visits.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.data_objects.subject.Subject.add_visit","title":"<code>add_visit(visit)</code>","text":"<p>Add a visit to the subject.</p> Source code in <code>src/ResearchOS/data_objects/subject.py</code> <pre><code>def add_visit(self, visit: Union[str, DataObject]) -&gt; None:\n    \"\"\"Add a visit to the subject.\"\"\"\n    from visit import Visit\n    self._check_type(visit, [str, Visit])\n    self._visits_list.append(visit.uuid)\n    self.update()\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.data_objects.subject.Subject.missing_parent_error","title":"<code>missing_parent_error()</code>","text":"<p>Raise an error if the parent is missing.</p> Source code in <code>src/ResearchOS/data_objects/subject.py</code> <pre><code>def missing_parent_error(self) -&gt; None:\n    \"\"\"Raise an error if the parent is missing.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.data_objects.subject.Subject.remove_visit","title":"<code>remove_visit(visit)</code>","text":"<p>Remove a visit from the subject.</p> Source code in <code>src/ResearchOS/data_objects/subject.py</code> <pre><code>def remove_visit(self, visit: Union[str, DataObject]) -&gt; None:\n    \"\"\"Remove a visit from the subject.\"\"\"\n    from visit import Visit\n    self._check_type(visit, [str, Visit])\n    self._visits_list.remove(visit.uuid)\n    self.update()    \n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/","title":"Trial","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/data_objects/trial.py</code> <pre><code>class Trial(DataObject):\n\n    _id_prefix: str = \"TR\"\n    _table_name: str = \"trials\"\n\n    def __new__(cls, uuid, *args, **kwargs):\n        return super().__new__(uuid, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        # Check if the object already exists.\n        if hasattr(self, \"uuid\"):\n            return\n        super().__init__(*args, **kwargs)\n        self._phases = self.phases() # Get all phases for the trial.\n        self.visit_uuid = self._get_parent(self.uuid, \"trials\", \"visit_uuid\")\n\n    @property\n    def phases(self):\n        \"\"\"Return all phases.\"\"\"\n        from phase import Phase\n        return [Phase(uuid) for uuid in self._phases]\n\n    @phases.setter\n    def phases(self, values: list[str] = None) -&gt; list:\n        \"\"\"Set phases. Can provide either a list of phase UUIDs or a list of phase objects.\"\"\"\n        from phase import Phase\n        self._check_type(values, [str, Phase])\n        self._phases = self._to_uuids(values)\n\n    @property\n    def visit(self):\n        \"\"\"Return the visit.\"\"\"\n        from objects.visit import Visit\n        if not self.visit_uuid:\n            return None\n        return Visit(self.visit_uuid)\n\n    @visit.setter\n    def visit(self):\n        \"\"\"Cannot set the visit.\"\"\"\n        raise AttributeError(\"Cannot set the visit from the trial.\")\n\n    def missing_parent_error(self) -&gt; None:\n        \"\"\"Raise an error if the parent is missing.\"\"\"\n        raise AttributeError(\"Cannot create a trial without a visit.\")\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.data_objects.trial.Trial.phases","title":"<code>phases</code>  <code>property</code> <code>writable</code>","text":"<p>Return all phases.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.data_objects.trial.Trial.visit","title":"<code>visit</code>  <code>property</code> <code>writable</code>","text":"<p>Return the visit.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.data_objects.trial.Trial.missing_parent_error","title":"<code>missing_parent_error()</code>","text":"<p>Raise an error if the parent is missing.</p> Source code in <code>src/ResearchOS/data_objects/trial.py</code> <pre><code>def missing_parent_error(self) -&gt; None:\n    \"\"\"Raise an error if the parent is missing.\"\"\"\n    raise AttributeError(\"Cannot create a trial without a visit.\")\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/","title":"Visit","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/data_objects/visit.py</code> <pre><code>class Visit(DataObject):\n\n    _id_prefix: str = \"VT\"\n    _table_name: str = \"visits\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._trials = self.trials() # Get all trials for the visit.\n\n    @property\n    def trials(self):\n        \"\"\"Return all trials.\"\"\"\n        from objects.trial import Trial\n        x = [Trial(uuid) for uuid in self._trials]\n\n    @trials.setter\n    def trials(self, values: list[Union[str, DataObject]] = None) -&gt; list:\n        \"\"\"Set trials. Can provide either a list of trial UUIDs or a list of trial objects.\"\"\"\n        from objects.trial import Trial\n        self._check_type(values, [str, Trial])\n        self._trials = self._to_uuids(values)\n\n    @property\n    def subject(self):\n        \"\"\"Return the subject.\"\"\"\n        from objects.subject import Subject\n        if not self.subject_uuid:\n            return None\n        return Subject(self.subject_uuid)\n\n    @subject.setter\n    def subject(self):\n        \"\"\"Cannot set the subject.\"\"\"\n        raise AttributeError(\"Cannot set the subject from the visit.\")\n\n    def missing_parent_error(self) -&gt; None:\n        \"\"\"Raise an error if the parent is missing.\"\"\"\n        raise AttributeError(\"Cannot create a visit without a subject.\")\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.data_objects.visit.Visit.subject","title":"<code>subject</code>  <code>property</code> <code>writable</code>","text":"<p>Return the subject.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.data_objects.visit.Visit.trials","title":"<code>trials</code>  <code>property</code> <code>writable</code>","text":"<p>Return all trials.</p>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.data_objects.visit.Visit.missing_parent_error","title":"<code>missing_parent_error()</code>","text":"<p>Raise an error if the parent is missing.</p> Source code in <code>src/ResearchOS/data_objects/visit.py</code> <pre><code>def missing_parent_error(self) -&gt; None:\n    \"\"\"Raise an error if the parent is missing.\"\"\"\n    raise AttributeError(\"Cannot create a visit without a subject.\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/","title":"User","text":"<p>             Bases: <code>DataObject</code>, <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>class User(DataObject, PipelineObject):\n\n    def new(id: str = None, name: str = None):\n        \"\"\"Create a new user.\"\"\"\n        if ResearchObject.is_id(id = id):            \n            user = User(id = id, name = name)\n        else:\n            user = User(id = ResearchObject.create_id(cls = User), name = name)\n        return user\n\n    @abstractmethod\n    def set_current_user(id: str):\n        \"\"\"Set the user as the current one.\"\"\"\n        sqlquery = f\"UPDATE settings SET current_user_id = '{id}'\"\n        Action.conn.cursor().execute(sqlquery)\n        Action.conn.commit()\n\n    def new_current(id: str = None, name: str = None):\n        \"\"\"Create a new user and set it as the current one.\"\"\"\n        action = Action.open(name = \"New Current User \" + name)\n        user = User.new(id = id, name = name)\n        User.set_current_user(id)\n        action.close()\n        return user\n\n    def load(id: str, action_id: str = None):\n        \"\"\"Load a user from the database.\"\"\"\n        return ResearchObject.load(id = id, cls = User, action_id = action_id)\n\n    def set_current_project(self, id: str):\n        \"\"\"Set a project as the current one for the user.\"\"\"\n        self.current_project_id = id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.load","title":"<code>load(id, action_id=None)</code>","text":"<p>Load a user from the database.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def load(id: str, action_id: str = None):\n    \"\"\"Load a user from the database.\"\"\"\n    return ResearchObject.load(id = id, cls = User, action_id = action_id)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.new","title":"<code>new(id=None, name=None)</code>","text":"<p>Create a new user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def new(id: str = None, name: str = None):\n    \"\"\"Create a new user.\"\"\"\n    if ResearchObject.is_id(id = id):            \n        user = User(id = id, name = name)\n    else:\n        user = User(id = ResearchObject.create_id(cls = User), name = name)\n    return user\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.new_current","title":"<code>new_current(id=None, name=None)</code>","text":"<p>Create a new user and set it as the current one.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def new_current(id: str = None, name: str = None):\n    \"\"\"Create a new user and set it as the current one.\"\"\"\n    action = Action.open(name = \"New Current User \" + name)\n    user = User.new(id = id, name = name)\n    User.set_current_user(id)\n    action.close()\n    return user\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.set_current_project","title":"<code>set_current_project(id)</code>","text":"<p>Set a project as the current one for the user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def set_current_project(self, id: str):\n    \"\"\"Set a project as the current one for the user.\"\"\"\n    self.current_project_id = id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.set_current_user","title":"<code>set_current_user(id)</code>  <code>abstractmethod</code>","text":"<p>Set the user as the current one.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef set_current_user(id: str):\n    \"\"\"Set the user as the current one.\"\"\"\n    sqlquery = f\"UPDATE settings SET current_user_id = '{id}'\"\n    Action.conn.cursor().execute(sqlquery)\n    Action.conn.commit()\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/","title":"Variable","text":"<p>             Bases: <code>ResearchObject</code></p> <p>Variable class.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>class Variable(ResearchObject):\n    \"\"\"Variable class.\"\"\"\n\n    _id_prefix: str = \"VR\"\n    _table_name: str = \"variables\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._phases = self._get_all_parents(self.uuid, \"variable_uuid\", \"phase_uuid\", \"phase_variables\")\n\n    @property\n    def phases(self) -&gt; list[ResearchObject]:\n        \"\"\"Return all phases.\"\"\"\n        from phase import Phase\n        return [Phase(uuid) for uuid in self._phases]\n\n    @phases.setter\n    def phases(self, values: list[Union[str, ResearchObject]] = None) -&gt; None:\n        \"\"\"Set phases. Can provide either a list of phase UUIDs or a list of phase objects.\"\"\"\n        from phase import Phase\n        self._check_type(values, [str, Phase])\n        self._phases = self._to_uuids(values)\n\n    def missing_parent_error(self) -&gt; None:\n        \"\"\"Raise an error if the parent is missing.\"\"\"\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/#src.ResearchOS.variable.Variable.phases","title":"<code>phases: list[ResearchObject]</code>  <code>property</code> <code>writable</code>","text":"<p>Return all phases.</p>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/#src.ResearchOS.variable.Variable.missing_parent_error","title":"<code>missing_parent_error()</code>","text":"<p>Raise an error if the parent is missing.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>def missing_parent_error(self) -&gt; None:\n    \"\"\"Raise an error if the parent is missing.\"\"\"\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/","title":"Analysis","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/pipeline_objects/analysis.py</code> <pre><code>class Analysis(PipelineObject):\n\n    prefix = \"AN\"    \n\n    def new(name: str):\n        action = Action(name = \"New Analysis \" + name)\n        an = Analysis(name = name)\n        action.close()\n        return an\n\n    def new_current(name: str):\n        action = Action.open(name = \"New Current Analysis \" + name)\n        an = Analysis.new(name = name)\n        lg = Logsheet.new(name = an.name + \"_Default\")\n        an.set_current_logsheet(lg.id)        \n        action.close()\n        return an\n\n    def set_current_logsheet(self, id: str):\n        \"\"\"Set a logsheet as the current one for the analysis.\"\"\"\n        self.current_logsheet_id = id\n\n    def load(id: str, action_id: str = None):\n        return ResearchObject.load(id = id, cls = Analysis, action_id = action_id)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.pipeline_objects.analysis.Analysis.set_current_logsheet","title":"<code>set_current_logsheet(id)</code>","text":"<p>Set a logsheet as the current one for the analysis.</p> Source code in <code>src/ResearchOS/pipeline_objects/analysis.py</code> <pre><code>def set_current_logsheet(self, id: str):\n    \"\"\"Set a logsheet as the current one for the analysis.\"\"\"\n    self.current_logsheet_id = id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/pipeline_object/","title":"Pipeline Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views</p> Source code in <code>src/ResearchOS/pipeline_objects/pipeline_object.py</code> <pre><code>class PipelineObject(ResearchObject):\n    \"\"\"Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views\"\"\"\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        super().__setattr__(__name, __value)        \n\n        # Set attributes of the object in the database.\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/","title":"Process","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/pipeline_objects/process.py</code> <pre><code>class Process(PipelineObject):\n\n    def run(self):\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process_group/","title":"ProcessGroup","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/pipeline_objects/process_group.py</code> <pre><code>class ProcessGroup(PipelineObject):\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/","title":"Project","text":"<p>Inherits from PipelineObject</p> <p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>class Project(PipelineObject):\n\n    prefix = \"PJ\"    \n\n    @abstractmethod\n    def new(name: str) -&gt; \"Project\":\n        action = Action(name = \"New Project\" + name)\n        pj = Project(name = name)\n        action.close()\n        return pj\n\n    @abstractmethod\n    def new_current(name: str) -&gt; \"Project\":\n        action = Action(name = \"New Current Project\" + name)\n        pj = Project.new(name = name)\n        an = Analysis.new_current(name = pj.name + \"_Default\")\n        pj.set_current_analysis(an.id)\n        action.close()\n        return pj\n\n    def set_current_analysis(self, id: str) -&gt; None:\n        \"\"\"Set an analysis as the current one for the project.\"\"\"\n        self.current_analysis_id = id\n\n    @abstractmethod\n    def load(id: str, action_id: str = None) -&gt; ResearchObject:        \n        return ResearchObject.load(id = id, cls = Project, action_id = action_id)\n\n    def analyses(self):\n        \"\"\"Return a list of analyses in the project.\"\"\"\n        return self.children(cls = Analysis)\n\n    def current_analysis(self) -&gt; Analysis:\n        \"\"\"Return the current analysis in the project.\"\"\"\n        return Analysis.load(id = self.current_analysis_id)\n\n    def current_dataset(self):\n        \"\"\"Return the current dataset in the project.\"\"\"        \n        return Dataset.load(id = self.current_dataset_id)\n\n    def datasets(self):\n        \"\"\"Return a list of datasets in the project.\"\"\"        \n        return self.children(cls = Dataset)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.pipeline_objects.project.Project.analyses","title":"<code>analyses()</code>","text":"<p>Return a list of analyses in the project.</p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>def analyses(self):\n    \"\"\"Return a list of analyses in the project.\"\"\"\n    return self.children(cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.pipeline_objects.project.Project.current_analysis","title":"<code>current_analysis()</code>","text":"<p>Return the current analysis in the project.</p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>def current_analysis(self) -&gt; Analysis:\n    \"\"\"Return the current analysis in the project.\"\"\"\n    return Analysis.load(id = self.current_analysis_id)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.pipeline_objects.project.Project.current_dataset","title":"<code>current_dataset()</code>","text":"<p>Return the current dataset in the project.</p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>def current_dataset(self):\n    \"\"\"Return the current dataset in the project.\"\"\"        \n    return Dataset.load(id = self.current_dataset_id)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.pipeline_objects.project.Project.datasets","title":"<code>datasets()</code>","text":"<p>Return a list of datasets in the project.</p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>def datasets(self):\n    \"\"\"Return a list of datasets in the project.\"\"\"        \n    return self.children(cls = Dataset)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.pipeline_objects.project.Project.set_current_analysis","title":"<code>set_current_analysis(id)</code>","text":"<p>Set an analysis as the current one for the project.</p> Source code in <code>src/ResearchOS/pipeline_objects/project.py</code> <pre><code>def set_current_analysis(self, id: str) -&gt; None:\n    \"\"\"Set an analysis as the current one for the project.\"\"\"\n    self.current_analysis_id = id\n</code></pre>"}]}
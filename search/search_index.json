{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResearchOS","text":"<p>This is the documentation for ResearchOS</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#header-2","title":"Header 2","text":""},{"location":"Research%20Objects/data_objects/","title":"Data Objects","text":""},{"location":"Research%20Objects/data_objects/#inherits-from-researchobject","title":"Inherits from ResearchObject","text":""},{"location":"Research%20Objects/pipeline_objects/","title":"Pipeline Objects","text":""},{"location":"Research%20Objects/pipeline_objects/#inherits-from-researchobject","title":"Inherits from ResearchObject","text":"<p>             Bases: <code>ResearchObject</code></p> <p>Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views</p> Source code in <code>src/ResearchOS/pipeline_objects/pipeline_object.py</code> <pre><code>class PipelineObject(ResearchObject):\n    \"\"\"Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views\"\"\"\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        super().__setattr__(__name, __value)        \n\n        # Set attributes of the object in the database.\n        pass\n</code></pre>"},{"location":"Research%20Objects/research_objects/","title":"Research Objects","text":""},{"location":"Research%20Objects/research_objects/#overview","title":"Overview","text":"<p>One research object. Parent class of Data Objects &amp; Pipeline Objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>class ResearchObject():\n    \"\"\"One research object. Parent class of Data Objects &amp; Pipeline Objects.\"\"\"\n\n    prefix = \"RO\" # Testing only\n    _instances = weakref.WeakValueDictionary()\n    _instances_count = {}\n\n    def __new__(cls, *args, **kwargs):\n        \"\"\"Create a new data object. If the object already exists, return the existing object.\"\"\"\n        object_id = kwargs.get(\"id\", None)\n        if object_id is None:\n            object_id = cls.create_id(cls)\n        if object_id in ResearchObject._instances:\n            ResearchObject._instances_count[object_id] += 1\n            return ResearchObject._instances[object_id]\n        else: # Create a new object.\n            instance = super(ResearchObject, cls).__new__(cls)\n            ResearchObject._instances[object_id] = instance\n            ResearchObject._instances_count[object_id] = 1\n            instance.__dict__['id'] = object_id            \n            return instance\n\n    def __del__(self) -&gt; None:\n        \"\"\"Delete the object from memory.\"\"\"\n        print(\"Deleting\" + self.id)\n        # if self.id not in ResearchObject._instances:\n        #     raise ValueError(\"Object not in instances.\")\n        ResearchObject._instances_count[self.id] -= 1\n        if ResearchObject._instances_count[self.id] == 0:\n            del ResearchObject._instances[self.id]\n            del ResearchObject._instances_count[self.id]\n\n    def __init__(self, name: str, id: str = None, _stack_limit: int = 2) -&gt; None:\n        \"\"\"\"\"\"        \n        if not id:\n            id = self.id\n        action = Action.open(name = \"created object \" + id)\n        try:\n            # Create the object in the database.\n            cursor = Action.conn.cursor()\n            sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n            cursor.execute(sqlquery)\n            Action.conn.commit()\n        except Exception as e:\n            print(e)\n        # print(traceback.format_stack(limit = _stack_limit))\n        if \"name\" not in self.__dict__:\n            self.name = name\n        if \"deleted\" not in self.__dict__:\n            self.deleted = False\n        action.close() # Close the action, if possible.\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        \"\"\"Set the attributes of a research object in memory and in the SQL database.\"\"\"\n        self.__dict__[__name] = __value\n\n        if __name == \"id\": \n            raise ValueError(\"Cannot change the ID of a research object.\")\n\n        if __name[0] == \"_\":\n            return # Don't log private attributes.\n\n        # Open an action if there is not one open currently. Returns the open action if it is already open.\n        action = Action.open(name = \"attribute_changed\")\n\n        table_name = \"research_objects\"\n        cursor = Action.conn.cursor()        \n        # Create the object in the database, in the table that contains only the complete list of object ID's.        \n        sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name)}', '{__value}')\"\n        cursor.execute(sqlquery)\n        Action.conn.commit()\n        action.close() # Close the action, if possible.     \n\n    ###############################################################################################################################\n    #################################################### end of dunder methods ####################################################\n    ###############################################################################################################################\n\n    @abstractmethod\n    def create_id(cls, abstract: str = None, instance: str = None) -&gt; str:\n        \"\"\"Create a unique ID for the research object.\"\"\"\n        import random\n        table_name = \"research_objects\"\n        is_unique = False\n        while not is_unique:\n            if not abstract:\n                abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n                abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n            else:\n                abstract_new = abstract\n\n            if not instance:\n                instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n                instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n            else:\n                instance_new = instance\n\n            id = cls.prefix + abstract_new + \"_\" + instance_new\n            cursor = Action.conn.cursor()\n            sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n            cursor.execute(sql)\n            rows = cursor.fetchall()\n            if len(rows) == 0:\n                is_unique = True\n        return id  \n\n    @abstractmethod\n    def _prefix_to_table_name(cls) -&gt; str:\n        \"\"\"Convert a prefix to a table name.\"\"\"\n        prefix = cls.prefix\n        if prefix in [\"PJ\", \"AN\", \"LG\", \"PG\", \"PR\", \"ST\", \"VW\"]:\n            return \"PipelineObjects\"\n        elif prefix in [\"DS\", \"SJ\", \"TR\", \"PH\"]:\n            return \"DataObjects\"\n        elif prefix in [\"VR\"]:\n            raise NotImplementedError(\"Which table do Variables go in?\") \n        elif prefix in [\"RO\"]:\n            return \"research_objects\"\n        else:\n            raise ValueError(\"Invalid prefix.\")\n\n    @abstractmethod\n    def load(id: str, cls: Type, action_id: str = None) -&gt; \"ResearchObject\":\n        \"\"\"Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.\"\"\"\n        # 1. Get the current action if not provided.\n        cursor = Action.conn.cursor()\n        timestamp = datetime.datetime.utcnow()\n        if not action_id:\n            action = Action.previous() # With no arguments, gets the \"current\"/most recent action.\n            action_id = action.id\n            timestamp = action.timestamp_closed\n\n        # 2. Get the action ID's for this object that were closed before the action_id.\n        sqlquery = f\"SELECT action_id, attr_id, attr_value, child_of FROM research_object_attributes WHERE object_id = '{id}'\"\n        attr_result = cursor.execute(sqlquery).fetchall()\n        if len(attr_result) == 0:\n            raise ValueError(\"No object with that ID exists.\")\n        curr_obj_action_ids = [row[0] for row in attr_result]\n        curr_obj_attr_ids = [row[1] for row in attr_result]\n        attrs = {}\n        # Get the action ID's for this object by timestamp, descending.        \n        curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n        sqlquery = f\"SELECT action_id, timestamp_closed FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp_closed DESC\"\n        action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n        action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n        used_attr_ids = []\n        num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n        attrs[\"id\"] = id\n        attrs[\"child_of\"] = None\n        for index, curr_obj_action_id in enumerate(action_ids_in_time_order):            \n            attr_id = attr_result[index][1]\n            if attr_id in used_attr_ids:\n                continue\n            used_attr_ids.append(attr_id)            \n            attr_value = attr_result[index][2]\n            child_of = attr_result[index][3]\n\n            attr_name = ResearchObject._get_attr_name(attr_id)\n            attrs[attr_name] = attr_value\n            if len(used_attr_ids) == num_attrs:\n                break\n\n\n        research_object = cls(name = attrs[\"name\"], id = id)\n        research_object.__dict__.update(attrs)\n        return research_object\n\n    @abstractmethod\n    def new(self, name: str, cls: Type) -&gt; \"ResearchObject\":\n        research_object = cls(name = name)\n        return research_object\n\n    @abstractmethod\n    def _get_attr_id(attr_name: str) -&gt; int:\n        \"\"\"Get the ID of an attribute. If it does not exist, create it.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            sqlquery = f\"INSERT INTO Attributes (attr_name) VALUES ('{attr_name}')\"\n            cursor.execute(sqlquery)\n            sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n            cursor.execute(sqlquery)            \n            rows = cursor.fetchall()\n            if len(rows) &gt; 1:\n                raise Exception(\"More than one attribute with the same name.\")\n\n        return rows[0][0]   \n\n    @abstractmethod\n    def _get_attr_name(attr_id: int) -&gt; str:\n        \"\"\"Get the name of an attribute.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_name FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return rows[0][0]\n\n    @abstractmethod\n    def is_id(id: str) -&gt; bool:\n        \"\"\"Check if the given ID is a valid ID for this research object.\"\"\"        \n        pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n        if not re.match(pattern, id):\n            return False\n        return True\n\n    ###############################################################################################################################\n    #################################################### end of abstract methods ##################################################\n    ###############################################################################################################################\n\n    def _get_all_parents(self, parent_id: str, child_table_name: str, parent_column: str) -&gt; list[str]:\n        \"\"\"Get all parents of the child object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT uuid FROM {child_table_name} WHERE {parent_column} = \"{parent_id}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row['uuid'])\n        return data\n\n    def _get_parent(self, child_uuid: str, child_table_name: str, parent_column: str) -&gt; str:\n        \"\"\"Get the parent of the child object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT {parent_column} FROM {child_table_name} WHERE uuid = \"{child_uuid}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row[parent_column])\n        if len(data) &gt; 1:\n            raise ValueError(f\"Expected &lt;=1 parent, got {len(data)}.\")\n        if len(data) == 1:\n            data = data[0]\n        else:\n            data = None\n        return data\n\n    def _is_parent(self, id: str, parent_id: str, table_name: str, parent_column: str, child_column: str) -&gt; bool:\n        \"\"\"Check if the provided parent type is the parent of the child object.\"\"\"\n        action = Action.previous()\n        sql = f\"SELECT object_id FROM research_object_attributes WHERE child_of = {parent_id} AND object_id = {id} AND action_id = {action.id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _get_all_children(self, uuid: str, column: str, child_table_name: str) -&gt; list[str]:\n        \"\"\"Get all children of the parent object type.\n        Dataset &gt; Subject &gt; Visit &gt; Trial &gt; Phase.\"\"\"\n        sql = f'SELECT uuid FROM {child_table_name} WHERE {column} = \"{uuid}\"'\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            data.append(row['uuid'])\n        return data\n\n    def _is_child(self, child_id: str) -&gt; bool:\n        \"\"\"Check if the provided child type is the child of the parent (self) object.\"\"\"\n        action = Action.previous()\n        sql = f\"SELECT object_id FROM research_object_attributes WHERE child_of = {self.id} AND object_id = {child_id} AND action_id = {action.id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        result = cursor.fetchall()\n        return len(result) &gt; 0\n\n    ###############################################################################################################################\n    #################################################### end of parentage methods #################################################\n    ############################################################################################################################### \n\n    def parse_id(self, id: str) -&gt; tuple:\n        \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n        if not ResearchObject.is_id(id):\n            raise ValueError(\"Invalid ID.\")\n        abstract = id[2:2+abstract_id_len]\n        instance = id[-instance_id_len:]\n        return (self.prefix, abstract, instance)\n\n    def _get_public_keys(self) -&gt; list[str]:\n        \"\"\"Return all public keys of the current object.\"\"\"        \n        keys = []\n        for key in vars(self).keys():\n            if not key.startswith('_'):\n                keys.append(key)\n        return keys\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.__del__","title":"<code>__del__()</code>","text":"<p>Delete the object from memory.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"Delete the object from memory.\"\"\"\n    print(\"Deleting\" + self.id)\n    # if self.id not in ResearchObject._instances:\n    #     raise ValueError(\"Object not in instances.\")\n    ResearchObject._instances_count[self.id] -= 1\n    if ResearchObject._instances_count[self.id] == 0:\n        del ResearchObject._instances[self.id]\n        del ResearchObject._instances_count[self.id]\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.__init__","title":"<code>__init__(name, id=None, _stack_limit=2)</code>","text":"Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __init__(self, name: str, id: str = None, _stack_limit: int = 2) -&gt; None:\n    \"\"\"\"\"\"        \n    if not id:\n        id = self.id\n    action = Action.open(name = \"created object \" + id)\n    try:\n        # Create the object in the database.\n        cursor = Action.conn.cursor()\n        sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n        cursor.execute(sqlquery)\n        Action.conn.commit()\n    except Exception as e:\n        print(e)\n    # print(traceback.format_stack(limit = _stack_limit))\n    if \"name\" not in self.__dict__:\n        self.name = name\n    if \"deleted\" not in self.__dict__:\n        self.deleted = False\n    action.close() # Close the action, if possible.\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.__new__","title":"<code>__new__(*args, **kwargs)</code>","text":"<p>Create a new data object. If the object already exists, return the existing object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __new__(cls, *args, **kwargs):\n    \"\"\"Create a new data object. If the object already exists, return the existing object.\"\"\"\n    object_id = kwargs.get(\"id\", None)\n    if object_id is None:\n        object_id = cls.create_id(cls)\n    if object_id in ResearchObject._instances:\n        ResearchObject._instances_count[object_id] += 1\n        return ResearchObject._instances[object_id]\n    else: # Create a new object.\n        instance = super(ResearchObject, cls).__new__(cls)\n        ResearchObject._instances[object_id] = instance\n        ResearchObject._instances_count[object_id] = 1\n        instance.__dict__['id'] = object_id            \n        return instance\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.__setattr__","title":"<code>__setattr__(__name, __value)</code>","text":"<p>Set the attributes of a research object in memory and in the SQL database.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __setattr__(self, __name: str, __value: Any) -&gt; None:\n    \"\"\"Set the attributes of a research object in memory and in the SQL database.\"\"\"\n    self.__dict__[__name] = __value\n\n    if __name == \"id\": \n        raise ValueError(\"Cannot change the ID of a research object.\")\n\n    if __name[0] == \"_\":\n        return # Don't log private attributes.\n\n    # Open an action if there is not one open currently. Returns the open action if it is already open.\n    action = Action.open(name = \"attribute_changed\")\n\n    table_name = \"research_objects\"\n    cursor = Action.conn.cursor()        \n    # Create the object in the database, in the table that contains only the complete list of object ID's.        \n    sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name)}', '{__value}')\"\n    cursor.execute(sqlquery)\n    Action.conn.commit()\n    action.close() # Close the action, if possible.     \n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.create_id","title":"<code>create_id(abstract=None, instance=None)</code>  <code>abstractmethod</code>","text":"<p>Create a unique ID for the research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef create_id(cls, abstract: str = None, instance: str = None) -&gt; str:\n    \"\"\"Create a unique ID for the research object.\"\"\"\n    import random\n    table_name = \"research_objects\"\n    is_unique = False\n    while not is_unique:\n        if not abstract:\n            abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n            abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n        else:\n            abstract_new = abstract\n\n        if not instance:\n            instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n            instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n        else:\n            instance_new = instance\n\n        id = cls.prefix + abstract_new + \"_\" + instance_new\n        cursor = Action.conn.cursor()\n        sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n        cursor.execute(sql)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            is_unique = True\n    return id  \n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.is_id","title":"<code>is_id(id)</code>  <code>abstractmethod</code>","text":"<p>Check if the given ID is a valid ID for this research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef is_id(id: str) -&gt; bool:\n    \"\"\"Check if the given ID is a valid ID for this research object.\"\"\"        \n    pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n    if not re.match(pattern, id):\n        return False\n    return True\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.load","title":"<code>load(id, cls, action_id=None)</code>  <code>abstractmethod</code>","text":"<p>Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef load(id: str, cls: Type, action_id: str = None) -&gt; \"ResearchObject\":\n    \"\"\"Load the current state of a research object from the database. If an action_id is specified, load the state of the object after that action.\"\"\"\n    # 1. Get the current action if not provided.\n    cursor = Action.conn.cursor()\n    timestamp = datetime.datetime.utcnow()\n    if not action_id:\n        action = Action.previous() # With no arguments, gets the \"current\"/most recent action.\n        action_id = action.id\n        timestamp = action.timestamp_closed\n\n    # 2. Get the action ID's for this object that were closed before the action_id.\n    sqlquery = f\"SELECT action_id, attr_id, attr_value, child_of FROM research_object_attributes WHERE object_id = '{id}'\"\n    attr_result = cursor.execute(sqlquery).fetchall()\n    if len(attr_result) == 0:\n        raise ValueError(\"No object with that ID exists.\")\n    curr_obj_action_ids = [row[0] for row in attr_result]\n    curr_obj_attr_ids = [row[1] for row in attr_result]\n    attrs = {}\n    # Get the action ID's for this object by timestamp, descending.        \n    curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n    sqlquery = f\"SELECT action_id, timestamp_closed FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp_closed DESC\"\n    action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n    action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n    used_attr_ids = []\n    num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n    attrs[\"id\"] = id\n    attrs[\"child_of\"] = None\n    for index, curr_obj_action_id in enumerate(action_ids_in_time_order):            \n        attr_id = attr_result[index][1]\n        if attr_id in used_attr_ids:\n            continue\n        used_attr_ids.append(attr_id)            \n        attr_value = attr_result[index][2]\n        child_of = attr_result[index][3]\n\n        attr_name = ResearchObject._get_attr_name(attr_id)\n        attrs[attr_name] = attr_value\n        if len(used_attr_ids) == num_attrs:\n            break\n\n\n    research_object = cls(name = attrs[\"name\"], id = id)\n    research_object.__dict__.update(attrs)\n    return research_object\n</code></pre>"},{"location":"Research%20Objects/research_objects/#src.ResearchOS.research_object.ResearchObject.parse_id","title":"<code>parse_id(id)</code>","text":"<p>Parse an ID into its prefix, abstract, and instance parts.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def parse_id(self, id: str) -&gt; tuple:\n    \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n    if not ResearchObject.is_id(id):\n        raise ValueError(\"Invalid ID.\")\n    abstract = id[2:2+abstract_id_len]\n    instance = id[-instance_id_len:]\n    return (self.prefix, abstract, instance)\n</code></pre>"}]}
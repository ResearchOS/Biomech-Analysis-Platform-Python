{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResearchOS","text":"<p>This is the documentation for ResearchOS</p>"},{"location":"#install-with-pip","title":"Install with pip","text":"<pre><code>pip install researchos\n</code></pre>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    Research Object Types/  # The documentation homepage.\n        research_objects.md  # The documentation homepage.\n        pipeline_objects.md  # The documentation homepage.\n        data_objects.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#example-1","title":"Example 1","text":"<p>Let's use ResearchOS to create a simple one step pipeline that reads a single number from a text file, squares it, and stores that value.</p> <p>First, after creating a new project directory and activating a virtual environment in that directory, install ResearchOS:</p> <pre><code>pip install researchos\n</code></pre> <p>Next, in the command line, run the following command:</p> <pre><code>python -m researchos quick-start\n</code></pre> <p>This will perform the following actions:</p> <ol> <li> <p>Create a new directory called 'researchos_db' in the current directory.</p> </li> <li> <p>Create a .db file in the 'researchos_db' directory with the proper schema.</p> </li> <li> <p>Create a new Project object in the .db file, and sets it to be the current Project.</p> </li> </ol> <p>Then, create a file called <code>example1.py</code> with the following contents:</p> <pre><code>from researchos.pipeline_objects.project import Project\n</code></pre> <p>This will create a new project.</p>"},{"location":"Quick%20Start/quickstart/","title":"Quick Start","text":""},{"location":"Quick%20Start/quickstart/#to-run-quick-start-after-installing","title":"To run Quick Start after installing:","text":"<pre><code>&gt; researchos-quickstart\n</code></pre> <p>That will do the following:</p> <ol> <li> <p>Create a new directory called <code>researchos-quickstart</code>.</p> </li> <li> <p>Create a new quickstart.py file in that directory containing the basic steps for a new Project:</p> </li> </ol>"},{"location":"Quick%20Start/quickstart_py/","title":"quickstart.py","text":""},{"location":"Research%20Object%20Types/research_object/","title":"Research Objects","text":""},{"location":"Research%20Object%20Types/research_object/#overview","title":"Overview","text":"<p>Everything within the ResearchOS framework is a Research Object - at the highest level are User objects, and at the lowest are Variable objects. All Research Objects are stored in the database, and are accessible by using the methods provided in the ResearchOS API.</p> <p>All Research Objects are one or both of the following:</p> <ul> <li> <p>Data Objects - objects that are involved in storing data, such as a Subject or Trial. These objects are typically created by a Process, and are used to store data that is generated by a Process. It is perhaps helpful to recognize that these objects are similar in nature to the \"factors\" of a statistical analysis.</p> </li> <li> <p>Pipeline Objects - objects that are involved in performing data analysis, such as a Process or Project.</p> </li> </ul> <p>One research object. Parent class of Data Objects &amp; Pipeline Objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>class ResearchObject():\n    \"\"\"One research object. Parent class of Data Objects &amp; Pipeline Objects.\"\"\"\n\n    prefix = \"RO\" # Testing only\n    _instances = weakref.WeakValueDictionary()\n    _instances_count = {}\n\n    def __hash__(self):\n        return hash(self.id)\n\n    def __eq__(self, other):\n        if isinstance(other, ResearchObject):\n            return self.id == other.id\n        return NotImplemented\n\n    def __new__(cls, is_abstract: bool = False, *args, **kwargs):\n        \"\"\"Create a new research object. If the object already exists, return the existing object.\"\"\"\n        object_id = kwargs.get(\"id\", None)\n        if object_id is None:\n            object_id = cls.create_id(cls, is_abstract = is_abstract)\n        if object_id in ResearchObject._instances:\n            ResearchObject._instances_count[object_id] += 1\n            return ResearchObject._instances[object_id]\n        else: # Create a new object.\n            instance = super(ResearchObject, cls).__new__(cls)\n            ResearchObject._instances[object_id] = instance\n            ResearchObject._instances_count[object_id] = 1\n            instance.__dict__['id'] = object_id            \n            return instance\n\n    def __init__(self, name: str = \"object creation\", attrs: dict = {}, id: str = None) -&gt; None:\n        \"\"\"id is required but will actually not be used here because it is assigned during __new__\"\"\"\n        id = self.id # self.id always exists by this point thanks to __new__        \n        # Try to load the object from the database.\n        try:\n            self.load()            \n        except ValueError: # Throws an exception if the object does not exist. In that case, create it.            \n            action = Action(name = name)        \n            try:\n                # Create the object in the database.            \n                sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n                action.add_sql_query(sqlquery)\n                action.execute()\n            except Exception as e:\n                print(e)   \n            if \"exists\" not in self.__dict__:\n                self.exists = True\n            if \"name\" not in self.__dict__:\n                self.name = name            \n        # Ensure that all of the required attributes are present.\n        for attr in attrs:\n            if attr in self.__dict__:\n                continue\n            # Don't validate during object initialization because the initial values won't pass the validation.\n            self.__setattr__(attr, attrs[attr], validate = False)            \n\n    def load(self) -&gt; \"ResearchObject\":\n        \"\"\"Load the current state of a research object from the database. Modifies the self object.\"\"\"        \n        cursor = Action.conn.cursor()\n\n        # 2. Get the action ID's for this object that were closed before the action_id.\n        sqlquery = f\"SELECT action_id, attr_id, attr_value, target_object_id FROM research_object_attributes WHERE object_id = '{self.id}'\"\n        attr_result = cursor.execute(sqlquery).fetchall()\n        if len(attr_result) == 0:\n            raise ValueError(\"No object with that ID exists.\")\n        curr_obj_action_ids = [row[0] for row in attr_result]\n        curr_obj_attr_ids = [row[1] for row in attr_result]\n        attrs = {}\n        # Get the action ID's for this object by timestamp, descending.        \n        curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n        sqlquery = f\"SELECT action_id, timestamp FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp DESC\"\n        action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n        action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n        used_attr_ids = []\n        num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n        attrs[\"id\"] = self.id\n        attrs[\"target_object_id\"] = []\n        for curr_obj_action_id in action_ids_in_time_order:\n            index = curr_obj_action_ids.index(curr_obj_action_id)\n            attr_id = attr_result[index][1]\n            if attr_id in used_attr_ids:\n                continue\n            used_attr_ids.append(attr_id)\n            attr_value = json.loads(attr_result[index][2])\n            target_object_id = attr_result[index][3]\n            if target_object_id not in attrs[\"target_object_id\"] and target_object_id is not None:\n                attrs[\"target_object_id\"].append(target_object_id)\n\n            attr_name = ResearchObject._get_attr_name(attr_id)\n            attr_type = ResearchObject._get_attr_type(attr_id)\n            attrs[attr_name] = attr_type(attr_value)\n            eval_str = \"self.json_translate_\" + attr_name + \"()\"\n            try:\n                attrs[attr_name] = eval(eval_str)\n            except AttributeError:\n                pass\n            if len(used_attr_ids) == num_attrs:\n                break\n\n        self.__dict__.update(attrs)\n\n    def __setattr__(self, __name: str, __value: Any, validate: bool = True) -&gt; None:\n        \"\"\"Set the attributes of a research object in memory and in the SQL database.\n        Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it), and the object is not being initialized.\"\"\"        \n        # TODO: Does this get called when deleting an attribute from an object?         \n        if __name == \"id\": \n            raise ValueError(\"Cannot change the ID of a research object.\")\n        if __name[0] == \"_\":\n            return # Don't log private attributes.        \n        if validate:                                                      \n            try:\n                method = eval(f\"self.validate_{__name}\")\n                method(__value)\n            except AttributeError as e:\n                pass\n\n        self.__dict__[__name] = __value        \n\n        # Create an action.\n        action = Action(name = \"attribute_changed\")                       \n        # Update the attribute in the database.\n        json_value = json.dumps(__value, indent = 4) # Encode the value as json\n        sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name, __value)}', '{json_value}')\"\n        action.add_sql_query(sqlquery)\n        action.execute()         \n\n    ###############################################################################################################################\n    #################################################### end of dunder methods ####################################################\n    ###############################################################################################################################\n\n    @abstractmethod\n    def get_all_ids(cls) -&gt; list[str]:\n        \"\"\"Get all object IDs of the specified class.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT object_id FROM research_objects\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        return [row[0] for row in rows if (row[0] is not None and row[0].startswith(cls.prefix))]\n\n    @abstractmethod\n    def create_id(cls, abstract: str = None, instance: str = None, is_abstract: bool = False) -&gt; str:\n        \"\"\"Create a unique ID for the research object.\"\"\"\n        import random\n        table_name = \"research_objects\"\n        is_unique = False\n        while not is_unique:\n            if not abstract:\n                abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n                abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n            else:\n                abstract_new = abstract\n\n            if not instance:\n                instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n                instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n            else:\n                instance_new = instance\n            if is_abstract:\n                instance_new = \"\"\n\n            id = cls.prefix + abstract_new + \"_\" + instance_new\n            cursor = Action.conn.cursor()\n            sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n            cursor.execute(sql)\n            rows = cursor.fetchall()\n            if len(rows) == 0:\n                is_unique = True\n            elif is_abstract:\n                raise ValueError(\"Abstract ID already exists.\")\n        return id      \n\n    @abstractmethod\n    def _get_attr_id(attr_name: str, attr_value: Any = None) -&gt; int:\n        \"\"\"Get the ID of an attribute given its name. If it does not exist, create it.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        # If the attribute does not exist, create it.\n        if len(rows) == 0:\n            attr_type = str(type(attr_value)).split(\"'\")[1]\n            sqlquery = f\"INSERT INTO Attributes (attr_name, attr_type) VALUES ('{attr_name}', '{attr_type}')\"\n            cursor.execute(sqlquery)\n            sqlquery = f\"SELECT attr_id FROM Attributes WHERE attr_name = '{attr_name}'\"\n            cursor.execute(sqlquery)            \n            rows = cursor.fetchall()\n            if len(rows) &gt; 1:\n                raise Exception(\"More than one attribute with the same name.\")\n\n        return rows[0][0]   \n\n    @abstractmethod\n    def _get_attr_name(attr_id: int) -&gt; str:\n        \"\"\"Get the name of an attribute given the attribute's ID. If it does not exist, return an error.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_name FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return rows[0][0]  \n\n    @abstractmethod\n    def _get_attr_type(attr_id: int) -&gt; str:\n        \"\"\"Get the type of an attribute given the attribute's ID. If it does not exist, return an error.\"\"\"\n        from pydoc import locate\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT attr_type FROM Attributes WHERE attr_id = '{attr_id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            raise Exception(\"No attribute with that ID exists.\")\n        return locate(rows[0][0])\n\n    ###############################################################################################################################\n    #################################################### end of abstract methods ##################################################\n    ###############################################################################################################################\n\n    def abstract_id(self) -&gt; str:\n        \"\"\"Return the abstract ID of the current object.\"\"\"\n        return self.parse_id(self.id)[1]\n\n    def is_instance_object(self) -&gt; bool:\n        \"\"\"Return true if the object is an instance object, false if it is an abstract object.\"\"\"\n        return self.parse_id(self.id)[2] is not None\n\n    def object_exists(self, id: str) -&gt; bool:\n        \"\"\"Return true if the specified id exists in the database, false if not.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = f\"SELECT object_id FROM research_objects WHERE object_id = '{id}'\"\n        cursor.execute(sqlquery)\n        rows = cursor.fetchall()\n        return len(rows) &gt; 0\n\n    # def validate_id_class(self, id: str, cls: str) -&gt; None:\n    #     \"\"\"Validate that the specified ID is a valid ID for the specified class, or None.\"\"\"\n    #     if id is None:\n    #         return\n    #     if not self.is_id(id):\n    #         raise ValueError(f\"Invalid ID.\")\n    #     # Check that the ID is of the proper class.        \n    #     id_info  = self.parse_id(id)\n    #     if id_info[0] != cls.prefix:\n    #         raise ValueError(f\"ID is not of the proper class.\")\n\n    def is_id(id: str) -&gt; bool:\n        \"\"\"Check if the given ID matches the pattern of a valid research object ID.\"\"\"              \n        pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n        if not re.match(pattern, id):\n            return False\n        return True    \n\n    def _is_id_or_none(self, id: str) -&gt; bool:\n        \"\"\"Check if the given ID matches the pattern of a valid research object ID, or is None.\"\"\"              \n        if id is None or ResearchObject.is_id(id):\n            return True\n        return False\n\n    def _get_all_source_object_ids(self, cls) -&gt; list[str]:\n        \"\"\"Get all source object ids of the specified target object of the specified type.\"\"\"\n        sql = f'SELECT object_id FROM research_object_attributes WHERE target_object_id = \"{self.id}\"'\n        self.__get_all_related_object_ids(cls, sql)\n\n    def _get_all_target_object_ids(self, cls) -&gt; list[str]:\n        \"\"\"Get all target object ids of the specified source object of the specified type. \"\"\"\n        sql = f'SELECT target_object_id FROM research_object_attributes WHERE object_id = \"{self.id}\"'\n        self.__get_all_related_object_ids(cls, sql)\n\n    def __get_all_related_object_ids(self, cls, sql) -&gt; list[str]:\n        \"\"\"Called by _get_all_source_object_ids and _get_all_target_object_ids.\n        Get all related object ids of the specified object of the specified type, either source of target objects.\"\"\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        data = []\n        for row in cursor:\n            if row[0] is None:\n                continue\n            if row[0].startswith(cls.prefix):                \n                data.append(row[0])\n        return data\n\n    def _is_source(self, id: str) -&gt; bool:\n        \"\"\"Check if the specified object ID is a source object of the current object.\"\"\"        \n        sql = f\"SELECT object_id FROM research_object_attributes WHERE target_object_id = {self.id} AND object_id = {id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _is_target(self, id: str) -&gt; bool:\n        \"\"\"Check if the specified object ID is a target object of the current object.\"\"\"        \n        sql = f\"SELECT target_object_id FROM research_object_attributes WHERE object_id = {self.id} AND target_object_id = {id}\"\n        cursor = Action.conn.cursor()\n        cursor.execute(sql)\n        return len(cursor.fetchall()) &gt; 0\n\n    def _add_target_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Add a target object ID to the current source object.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        self.validate_id_class(id, cls)  \n        if self._is_target(id):\n            return # Already exists.\n        sql = f\"INSERT INTO research_object_attributes (object_id, target_object_id) VALUES ('{self.id}', '{id}')\"\n        action = Action(name = \"add_target_object_id\")\n        action.add_sql_query(sql)\n        action.execute()\n\n    def _remove_target_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Remove a target object ID from the current source object.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        self.validate_id_class(id, cls)  \n        if not self._is_target(id):\n            return\n        sql = f\"INSERT INTO research_object_attributes (object_id, target_object_id) VALUES ('{self.id}', {None})\"\n        action = Action(name = \"remove_target_object_id\")\n        action.add_sql_query(sql)\n        action.execute()\n\n    def _add_source_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Add a source object ID to the current target object.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        self.validate_id_class(id, cls)  \n        if self._is_source(id):\n            return # Already exists\n        sql = f\"INSERT INTO research_object_attributes (object_id, target_object_id) VALUES ('{id}', '{self.id}')\"\n        action = Action(name = \"add_source_object_id\")\n        action.add_sql_query(sql)\n        action.execute()\n\n    def _remove_source_object_id(self, id: str, cls: type) -&gt; None:\n        \"\"\"Remove a source object ID from the current target object.\"\"\"\n        if not self._is_id(id):\n            raise ValueError(\"Invalid ID.\")      \n        self.validate_id_class(id, cls)  \n        if not self._is_source(id):\n            return\n        sql = f\"INSERT INTO research_object_attributes (object_id, target_object_id) VALUES ('{id}', {None})\"\n        action = Action(name = \"remove_source_object_id\")\n        action.add_sql_query(sql)\n        action.execute()\n\n    ###############################################################################################################################\n    #################################################### end of parentage methods #################################################\n    ############################################################################################################################### \n\n    def copy_to_new_instance(self, new_id: str = None) -&gt; \"ResearchObject\":\n        \"\"\"Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.\"\"\"\n        cls = type(self)\n        if new_id is None:\n            abstract = self.parse_id(self.id)[1]\n            new_id = cls.create_id(cls, abstract = abstract)\n        new_object = cls(copy = True, id = new_id)        \n        attrs = self.__dict__\n        for key, value in attrs.items():\n            if key == \"id\":\n                continue\n            # No validation because that would've already happened when the original object was created.\n            new_object.__setattr__(key, value, validate = False)\n        return new_object\n\n    ###############################################################################################################################\n    #################################################### end of abstract/instance relation ########################################\n    ############################################################################################################################### \n\n    def parse_id(self, id: str) -&gt; tuple:\n        \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n        if not ResearchObject.is_id(id):\n            raise ValueError(\"Invalid ID.\")\n        abstract = id[2:2+abstract_id_len]\n        num_underscores = id.count(\"_\")\n        instance = None\n        if num_underscores == 1:            \n            instance = id[-instance_id_len:]\n        return (self.prefix, abstract, instance)\n\n    def _get_public_keys(self) -&gt; list[str]:\n        \"\"\"Return all public keys of the current object.\"\"\"        \n        keys = []\n        for key in vars(self).keys():\n            if not key.startswith('_'):\n                keys.append(key)\n        return keys\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__get_all_related_object_ids","title":"<code>__get_all_related_object_ids(cls, sql)</code>","text":"<p>Called by _get_all_source_object_ids and _get_all_target_object_ids. Get all related object ids of the specified object of the specified type, either source of target objects.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __get_all_related_object_ids(self, cls, sql) -&gt; list[str]:\n    \"\"\"Called by _get_all_source_object_ids and _get_all_target_object_ids.\n    Get all related object ids of the specified object of the specified type, either source of target objects.\"\"\"\n    cursor = Action.conn.cursor()\n    cursor.execute(sql)\n    data = []\n    for row in cursor:\n        if row[0] is None:\n            continue\n        if row[0].startswith(cls.prefix):                \n            data.append(row[0])\n    return data\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__init__","title":"<code>__init__(name='object creation', attrs={}, id=None)</code>","text":"<p>id is required but will actually not be used here because it is assigned during new</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __init__(self, name: str = \"object creation\", attrs: dict = {}, id: str = None) -&gt; None:\n    \"\"\"id is required but will actually not be used here because it is assigned during __new__\"\"\"\n    id = self.id # self.id always exists by this point thanks to __new__        \n    # Try to load the object from the database.\n    try:\n        self.load()            \n    except ValueError: # Throws an exception if the object does not exist. In that case, create it.            \n        action = Action(name = name)        \n        try:\n            # Create the object in the database.            \n            sqlquery = f\"INSERT INTO research_objects (object_id) VALUES ('{id}')\"\n            action.add_sql_query(sqlquery)\n            action.execute()\n        except Exception as e:\n            print(e)   \n        if \"exists\" not in self.__dict__:\n            self.exists = True\n        if \"name\" not in self.__dict__:\n            self.name = name            \n    # Ensure that all of the required attributes are present.\n    for attr in attrs:\n        if attr in self.__dict__:\n            continue\n        # Don't validate during object initialization because the initial values won't pass the validation.\n        self.__setattr__(attr, attrs[attr], validate = False)            \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__new__","title":"<code>__new__(is_abstract=False, *args, **kwargs)</code>","text":"<p>Create a new research object. If the object already exists, return the existing object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __new__(cls, is_abstract: bool = False, *args, **kwargs):\n    \"\"\"Create a new research object. If the object already exists, return the existing object.\"\"\"\n    object_id = kwargs.get(\"id\", None)\n    if object_id is None:\n        object_id = cls.create_id(cls, is_abstract = is_abstract)\n    if object_id in ResearchObject._instances:\n        ResearchObject._instances_count[object_id] += 1\n        return ResearchObject._instances[object_id]\n    else: # Create a new object.\n        instance = super(ResearchObject, cls).__new__(cls)\n        ResearchObject._instances[object_id] = instance\n        ResearchObject._instances_count[object_id] = 1\n        instance.__dict__['id'] = object_id            \n        return instance\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.__setattr__","title":"<code>__setattr__(__name, __value, validate=True)</code>","text":"<p>Set the attributes of a research object in memory and in the SQL database. Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it), and the object is not being initialized.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def __setattr__(self, __name: str, __value: Any, validate: bool = True) -&gt; None:\n    \"\"\"Set the attributes of a research object in memory and in the SQL database.\n    Validates the attribute if it is a built-in ResearchOS attribute (i.e. a method exists to validate it), and the object is not being initialized.\"\"\"        \n    # TODO: Does this get called when deleting an attribute from an object?         \n    if __name == \"id\": \n        raise ValueError(\"Cannot change the ID of a research object.\")\n    if __name[0] == \"_\":\n        return # Don't log private attributes.        \n    if validate:                                                      \n        try:\n            method = eval(f\"self.validate_{__name}\")\n            method(__value)\n        except AttributeError as e:\n            pass\n\n    self.__dict__[__name] = __value        \n\n    # Create an action.\n    action = Action(name = \"attribute_changed\")                       \n    # Update the attribute in the database.\n    json_value = json.dumps(__value, indent = 4) # Encode the value as json\n    sqlquery = f\"INSERT INTO research_object_attributes (action_id, object_id, attr_id, attr_value) VALUES ('{action.id}', '{self.id}', '{ResearchObject._get_attr_id(__name, __value)}', '{json_value}')\"\n    action.add_sql_query(sqlquery)\n    action.execute()         \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.abstract_id","title":"<code>abstract_id()</code>","text":"<p>Return the abstract ID of the current object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def abstract_id(self) -&gt; str:\n    \"\"\"Return the abstract ID of the current object.\"\"\"\n    return self.parse_id(self.id)[1]\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.copy_to_new_instance","title":"<code>copy_to_new_instance(new_id=None)</code>","text":"<p>Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def copy_to_new_instance(self, new_id: str = None) -&gt; \"ResearchObject\":\n    \"\"\"Copy the current object to a new object with a new instance ID but the same abstract ID. Return the new object.\"\"\"\n    cls = type(self)\n    if new_id is None:\n        abstract = self.parse_id(self.id)[1]\n        new_id = cls.create_id(cls, abstract = abstract)\n    new_object = cls(copy = True, id = new_id)        \n    attrs = self.__dict__\n    for key, value in attrs.items():\n        if key == \"id\":\n            continue\n        # No validation because that would've already happened when the original object was created.\n        new_object.__setattr__(key, value, validate = False)\n    return new_object\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.create_id","title":"<code>create_id(abstract=None, instance=None, is_abstract=False)</code>  <code>abstractmethod</code>","text":"<p>Create a unique ID for the research object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef create_id(cls, abstract: str = None, instance: str = None, is_abstract: bool = False) -&gt; str:\n    \"\"\"Create a unique ID for the research object.\"\"\"\n    import random\n    table_name = \"research_objects\"\n    is_unique = False\n    while not is_unique:\n        if not abstract:\n            abstract_new = str(hex(random.randrange(0, 16**abstract_id_len))[2:]).upper()\n            abstract_new = \"0\" * (abstract_id_len-len(abstract_new)) + abstract_new\n        else:\n            abstract_new = abstract\n\n        if not instance:\n            instance_new = str(hex(random.randrange(0, 16**instance_id_len))[2:]).upper()\n            instance_new = \"0\" * (instance_id_len-len(instance_new)) + instance_new\n        else:\n            instance_new = instance\n        if is_abstract:\n            instance_new = \"\"\n\n        id = cls.prefix + abstract_new + \"_\" + instance_new\n        cursor = Action.conn.cursor()\n        sql = f'SELECT object_id FROM {table_name} WHERE object_id = \"{id}\"'\n        cursor.execute(sql)\n        rows = cursor.fetchall()\n        if len(rows) == 0:\n            is_unique = True\n        elif is_abstract:\n            raise ValueError(\"Abstract ID already exists.\")\n    return id      \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.get_all_ids","title":"<code>get_all_ids()</code>  <code>abstractmethod</code>","text":"<p>Get all object IDs of the specified class.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>@abstractmethod\ndef get_all_ids(cls) -&gt; list[str]:\n    \"\"\"Get all object IDs of the specified class.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = f\"SELECT object_id FROM research_objects\"\n    cursor.execute(sqlquery)\n    rows = cursor.fetchall()\n    return [row[0] for row in rows if (row[0] is not None and row[0].startswith(cls.prefix))]\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.is_id","title":"<code>is_id(id)</code>","text":"<p>Check if the given ID matches the pattern of a valid research object ID.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def is_id(id: str) -&gt; bool:\n    \"\"\"Check if the given ID matches the pattern of a valid research object ID.\"\"\"              \n    pattern = \"^[a-zA-Z]{2}[a-fA-F0-9]{6}_[a-fA-F0-9]{3}$\"\n    if not re.match(pattern, id):\n        return False\n    return True    \n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.is_instance_object","title":"<code>is_instance_object()</code>","text":"<p>Return true if the object is an instance object, false if it is an abstract object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def is_instance_object(self) -&gt; bool:\n    \"\"\"Return true if the object is an instance object, false if it is an abstract object.\"\"\"\n    return self.parse_id(self.id)[2] is not None\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.load","title":"<code>load()</code>","text":"<p>Load the current state of a research object from the database. Modifies the self object.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def load(self) -&gt; \"ResearchObject\":\n    \"\"\"Load the current state of a research object from the database. Modifies the self object.\"\"\"        \n    cursor = Action.conn.cursor()\n\n    # 2. Get the action ID's for this object that were closed before the action_id.\n    sqlquery = f\"SELECT action_id, attr_id, attr_value, target_object_id FROM research_object_attributes WHERE object_id = '{self.id}'\"\n    attr_result = cursor.execute(sqlquery).fetchall()\n    if len(attr_result) == 0:\n        raise ValueError(\"No object with that ID exists.\")\n    curr_obj_action_ids = [row[0] for row in attr_result]\n    curr_obj_attr_ids = [row[1] for row in attr_result]\n    attrs = {}\n    # Get the action ID's for this object by timestamp, descending.        \n    curr_obj_action_ids_str = \",\".join([f\"'{action_id}'\" for action_id in curr_obj_action_ids])\n    sqlquery = f\"SELECT action_id, timestamp FROM actions WHERE action_id IN ({curr_obj_action_ids_str}) ORDER BY timestamp DESC\"\n    action_ids_in_time_order = cursor.execute(sqlquery).fetchall()\n    action_ids_in_time_order = [row[0] for row in action_ids_in_time_order]        \n    used_attr_ids = []\n    num_attrs = len(list(set(curr_obj_attr_ids))) # Get the number of unique action ID's.\n    attrs[\"id\"] = self.id\n    attrs[\"target_object_id\"] = []\n    for curr_obj_action_id in action_ids_in_time_order:\n        index = curr_obj_action_ids.index(curr_obj_action_id)\n        attr_id = attr_result[index][1]\n        if attr_id in used_attr_ids:\n            continue\n        used_attr_ids.append(attr_id)\n        attr_value = json.loads(attr_result[index][2])\n        target_object_id = attr_result[index][3]\n        if target_object_id not in attrs[\"target_object_id\"] and target_object_id is not None:\n            attrs[\"target_object_id\"].append(target_object_id)\n\n        attr_name = ResearchObject._get_attr_name(attr_id)\n        attr_type = ResearchObject._get_attr_type(attr_id)\n        attrs[attr_name] = attr_type(attr_value)\n        eval_str = \"self.json_translate_\" + attr_name + \"()\"\n        try:\n            attrs[attr_name] = eval(eval_str)\n        except AttributeError:\n            pass\n        if len(used_attr_ids) == num_attrs:\n            break\n\n    self.__dict__.update(attrs)\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.object_exists","title":"<code>object_exists(id)</code>","text":"<p>Return true if the specified id exists in the database, false if not.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def object_exists(self, id: str) -&gt; bool:\n    \"\"\"Return true if the specified id exists in the database, false if not.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = f\"SELECT object_id FROM research_objects WHERE object_id = '{id}'\"\n    cursor.execute(sqlquery)\n    rows = cursor.fetchall()\n    return len(rows) &gt; 0\n</code></pre>"},{"location":"Research%20Object%20Types/research_object/#src.ResearchOS.research_object.ResearchObject.parse_id","title":"<code>parse_id(id)</code>","text":"<p>Parse an ID into its prefix, abstract, and instance parts.</p> Source code in <code>src/ResearchOS/research_object.py</code> <pre><code>def parse_id(self, id: str) -&gt; tuple:\n    \"\"\"Parse an ID into its prefix, abstract, and instance parts.\"\"\"\n    if not ResearchObject.is_id(id):\n        raise ValueError(\"Invalid ID.\")\n    abstract = id[2:2+abstract_id_len]\n    num_underscores = id.count(\"_\")\n    instance = None\n    if num_underscores == 1:            \n        instance = id[-instance_id_len:]\n    return (self.prefix, abstract, instance)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/data_object/","title":"Data Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.</p> Source code in <code>src/ResearchOS/DataObjects/data_object.py</code> <pre><code>class DataObject(ResearchObject):\n    \"\"\"The abstract base class for all data objects. Data objects are the ones not in the digraph, and represent some form of data storage.\"\"\"\n\n    def __setattr__(self, __name: str, __value: Any) -&gt; None:\n        super().__setattr__(__name, __value)        \n\n        # Set attributes of the object in the database.\n        pass\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/","title":"Dataset","text":"<p>Inherits from DataObject</p> <p>             Bases: <code>DataObject</code></p> <p>A dataset is one set of data. Class-specific Attributes: 1. data path: The root folder location of the dataset. 2. data schema: The schema of the dataset (specified as a list of classes)</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>class Dataset(DataObject):\n    \"\"\"A dataset is one set of data.\n    Class-specific Attributes:\n    1. data path: The root folder location of the dataset.\n    2. data schema: The schema of the dataset (specified as a list of classes)\"\"\"\n\n    prefix: str = \"DS\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Dataset)\n\n    @abstractmethod\n    def new_current(name: str) -&gt; \"Dataset\":\n        \"\"\"Create a new dataset and set it as the current dataset for the current project.\"\"\"\n        from src.ResearchOS.DataObjects.dataset import Dataset\n        from src.ResearchOS.PipelineObjects.project import Project\n        ds = Dataset(name = name)\n        pj = Project.get_current_project_id()\n        pj = Project(id = pj)\n        pj.set_current_dataset_id(ds.id)\n        return ds\n\n    #################### Start class-specific attributes ###################\n\n    def get_data_path(self) -&gt; str:\n        \"\"\"Return the data path.\"\"\"\n        # TODO: Read this from the database.\n        return self.data_path\n\n    def set_data_path(self, path: str) -&gt; None:\n        \"\"\"Set the data path.\"\"\"\n        self.data_path = path\n\n    def get_data_schema(self) -&gt; list:\n        \"\"\"Return the data schema.\"\"\"\n        return self.data_schema\n\n    def set_data_schema(self, schema: list) -&gt; None:\n        \"\"\"Set the data schema.\"\"\"\n        self.data_schema = schema\n\n    #################### Start Source objects ####################\n\n    def get_users(self) -&gt; list:\n        \"\"\"Return a list of user objects that belong to this project. Identical to Project.get_users()\"\"\"\n        from src.ResearchOS.user import User\n        us_ids = self._get_all_source_object_ids(cls = User)\n        return [User(id = us_id) for us_id in us_ids]\n\n    #################### Start Target objects ####################\n\n    def get_projects(self) -&gt; list:\n        \"\"\"Return a list of project objects that use this dataset.\"\"\"\n        from src.ResearchOS.PipelineObjects.project import Project\n        pj_ids = self._get_all_target_object_ids(cls = Project)\n        return [Project(id = pj_id) for pj_id in pj_ids]\n\n    def add_project_id(self, project_id: str):\n        \"\"\"Add a project to the dataset.\"\"\"\n        from src.ResearchOS.PipelineObjects.project import Project\n        self._add_target_object_id(project_id, cls = Project)\n\n    def remove_project_id(self, project_id: str):\n        \"\"\"Remove a project from the dataset.\"\"\"\n        from src.ResearchOS.PipelineObjects.project import Project        \n        self._remove_target_object_id(project_id, cls = Project)\n\n    def get_subjects(self) -&gt; list:\n        \"\"\"Return a list of subject objects that belong to this dataset.\"\"\"\n        from src.ResearchOS.DataObjects.subject import Subject\n        sj_ids = self._get_all_target_object_ids(cls = Subject)\n        return [Subject(id = sj_id) for sj_id in sj_ids]\n\n    def add_subject_id(self, subject_id: str):\n        \"\"\"Add a subject to the dataset.\"\"\"\n        from src.ResearchOS.DataObjects.subject import Subject\n        self._add_target_object_id(subject_id, cls = Subject)\n\n    def remove_subject_id(self, subject_id: str):\n        \"\"\"Remove a subject from the dataset.\"\"\"\n        from src.ResearchOS.DataObjects.subject import Subject        \n        self._remove_target_object_id(subject_id, cls = Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.add_project_id","title":"<code>add_project_id(project_id)</code>","text":"<p>Add a project to the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def add_project_id(self, project_id: str):\n    \"\"\"Add a project to the dataset.\"\"\"\n    from src.ResearchOS.PipelineObjects.project import Project\n    self._add_target_object_id(project_id, cls = Project)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.add_subject_id","title":"<code>add_subject_id(subject_id)</code>","text":"<p>Add a subject to the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def add_subject_id(self, subject_id: str):\n    \"\"\"Add a subject to the dataset.\"\"\"\n    from src.ResearchOS.DataObjects.subject import Subject\n    self._add_target_object_id(subject_id, cls = Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_data_path","title":"<code>get_data_path()</code>","text":"<p>Return the data path.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_data_path(self) -&gt; str:\n    \"\"\"Return the data path.\"\"\"\n    # TODO: Read this from the database.\n    return self.data_path\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_data_schema","title":"<code>get_data_schema()</code>","text":"<p>Return the data schema.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_data_schema(self) -&gt; list:\n    \"\"\"Return the data schema.\"\"\"\n    return self.data_schema\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_projects","title":"<code>get_projects()</code>","text":"<p>Return a list of project objects that use this dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_projects(self) -&gt; list:\n    \"\"\"Return a list of project objects that use this dataset.\"\"\"\n    from src.ResearchOS.PipelineObjects.project import Project\n    pj_ids = self._get_all_target_object_ids(cls = Project)\n    return [Project(id = pj_id) for pj_id in pj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_subjects","title":"<code>get_subjects()</code>","text":"<p>Return a list of subject objects that belong to this dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_subjects(self) -&gt; list:\n    \"\"\"Return a list of subject objects that belong to this dataset.\"\"\"\n    from src.ResearchOS.DataObjects.subject import Subject\n    sj_ids = self._get_all_target_object_ids(cls = Subject)\n    return [Subject(id = sj_id) for sj_id in sj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.get_users","title":"<code>get_users()</code>","text":"<p>Return a list of user objects that belong to this project. Identical to Project.get_users()</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def get_users(self) -&gt; list:\n    \"\"\"Return a list of user objects that belong to this project. Identical to Project.get_users()\"\"\"\n    from src.ResearchOS.user import User\n    us_ids = self._get_all_source_object_ids(cls = User)\n    return [User(id = us_id) for us_id in us_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.new_current","title":"<code>new_current(name)</code>  <code>abstractmethod</code>","text":"<p>Create a new dataset and set it as the current dataset for the current project.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>@abstractmethod\ndef new_current(name: str) -&gt; \"Dataset\":\n    \"\"\"Create a new dataset and set it as the current dataset for the current project.\"\"\"\n    from src.ResearchOS.DataObjects.dataset import Dataset\n    from src.ResearchOS.PipelineObjects.project import Project\n    ds = Dataset(name = name)\n    pj = Project.get_current_project_id()\n    pj = Project(id = pj)\n    pj.set_current_dataset_id(ds.id)\n    return ds\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.remove_project_id","title":"<code>remove_project_id(project_id)</code>","text":"<p>Remove a project from the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def remove_project_id(self, project_id: str):\n    \"\"\"Remove a project from the dataset.\"\"\"\n    from src.ResearchOS.PipelineObjects.project import Project        \n    self._remove_target_object_id(project_id, cls = Project)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.remove_subject_id","title":"<code>remove_subject_id(subject_id)</code>","text":"<p>Remove a subject from the dataset.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def remove_subject_id(self, subject_id: str):\n    \"\"\"Remove a subject from the dataset.\"\"\"\n    from src.ResearchOS.DataObjects.subject import Subject        \n    self._remove_target_object_id(subject_id, cls = Subject)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.set_data_path","title":"<code>set_data_path(path)</code>","text":"<p>Set the data path.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def set_data_path(self, path: str) -&gt; None:\n    \"\"\"Set the data path.\"\"\"\n    self.data_path = path\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/dataset/#src.ResearchOS.DataObjects.dataset.Dataset.set_data_schema","title":"<code>set_data_schema(schema)</code>","text":"<p>Set the data schema.</p> Source code in <code>src/ResearchOS/DataObjects/dataset.py</code> <pre><code>def set_data_schema(self, schema: list) -&gt; None:\n    \"\"\"Set the data schema.\"\"\"\n    self.data_schema = schema\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/","title":"Phase","text":"<p>             Bases: <code>DataObject</code></p> <p>Phase class.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>class Phase(DataObject):\n    \"\"\"Phase class.\"\"\"\n\n    prefix = \"PH\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Phase)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_trials(self) -&gt; list:\n        \"\"\"Return a list of trial objects that belong to this phase.\"\"\"\n        from src.ResearchOS.DataObjects.trial import Trial\n        tr_ids = self._get_all_source_object_ids(cls = Trial)\n        return [Trial(id = tr_id) for tr_id in tr_ids]\n\n    #################### Start Target objects ####################\n    def get_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this phase.\"\"\"\n        from src.ResearchOS.variable import Variable\n        return self._get_all_target_object_ids(cls = Variable)\n\n    def add_variable_id(self, variable_id: str):\n        \"\"\"Add a variable to the phase.\"\"\"\n        from src.ResearchOS.variable import Variable        \n        self._add_target_object_id(variable_id, cls = Variable)\n\n    def remove_variable_id(self, variable_id: str):\n        \"\"\"Remove a variable from the phase.\"\"\"\n        from src.ResearchOS.variable import Variable        \n        self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.add_variable_id","title":"<code>add_variable_id(variable_id)</code>","text":"<p>Add a variable to the phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def add_variable_id(self, variable_id: str):\n    \"\"\"Add a variable to the phase.\"\"\"\n    from src.ResearchOS.variable import Variable        \n    self._add_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.get_trials","title":"<code>get_trials()</code>","text":"<p>Return a list of trial objects that belong to this phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def get_trials(self) -&gt; list:\n    \"\"\"Return a list of trial objects that belong to this phase.\"\"\"\n    from src.ResearchOS.DataObjects.trial import Trial\n    tr_ids = self._get_all_source_object_ids(cls = Trial)\n    return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.get_variable_ids","title":"<code>get_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def get_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this phase.\"\"\"\n    from src.ResearchOS.variable import Variable\n    return self._get_all_target_object_ids(cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/phase/#src.ResearchOS.DataObjects.phase.Phase.remove_variable_id","title":"<code>remove_variable_id(variable_id)</code>","text":"<p>Remove a variable from the phase.</p> Source code in <code>src/ResearchOS/DataObjects/phase.py</code> <pre><code>def remove_variable_id(self, variable_id: str):\n    \"\"\"Remove a variable from the phase.\"\"\"\n    from src.ResearchOS.variable import Variable        \n    self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/","title":"Subject","text":"<p>             Bases: <code>DataObject</code></p> <p>Subject class.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>class Subject(DataObject):\n    \"\"\"Subject class.\"\"\"\n\n    prefix: str = \"SJ\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Subject)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_datasets(self) -&gt; list:\n        \"\"\"Return a list of dataset objects that belong to this subject.\"\"\"\n        from src.ResearchOS.DataObjects.dataset import Dataset\n        ds_ids = self._get_all_source_object_ids(cls = Dataset)\n        return [Dataset(id = ds_id) for ds_id in ds_ids]\n\n    #################### Start Target objects ####################\n    def get_visits(self) -&gt; list:\n        \"\"\"Return a list of visit objects that belong to this subject.\"\"\"\n        from src.ResearchOS.DataObjects.visit import Visit\n        vs_ids = self._get_all_target_object_ids(cls = Visit)\n        return [Visit(id = vs_id) for vs_id in vs_ids]\n\n    def add_visit_id(self, visit_id: str):\n        \"\"\"Add a visit to the subject.\"\"\"\n        from src.ResearchOS.DataObjects.visit import Visit        \n        self._add_target_object_id(visit_id, cls = Visit)\n\n    def remove_visit_id(self, visit_id: str):\n        \"\"\"Remove a visit from the subject.\"\"\"\n        from src.ResearchOS.DataObjects.visit import Visit        \n        self._remove_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.add_visit_id","title":"<code>add_visit_id(visit_id)</code>","text":"<p>Add a visit to the subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def add_visit_id(self, visit_id: str):\n    \"\"\"Add a visit to the subject.\"\"\"\n    from src.ResearchOS.DataObjects.visit import Visit        \n    self._add_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.get_datasets","title":"<code>get_datasets()</code>","text":"<p>Return a list of dataset objects that belong to this subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def get_datasets(self) -&gt; list:\n    \"\"\"Return a list of dataset objects that belong to this subject.\"\"\"\n    from src.ResearchOS.DataObjects.dataset import Dataset\n    ds_ids = self._get_all_source_object_ids(cls = Dataset)\n    return [Dataset(id = ds_id) for ds_id in ds_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.get_visits","title":"<code>get_visits()</code>","text":"<p>Return a list of visit objects that belong to this subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def get_visits(self) -&gt; list:\n    \"\"\"Return a list of visit objects that belong to this subject.\"\"\"\n    from src.ResearchOS.DataObjects.visit import Visit\n    vs_ids = self._get_all_target_object_ids(cls = Visit)\n    return [Visit(id = vs_id) for vs_id in vs_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/subject/#src.ResearchOS.DataObjects.subject.Subject.remove_visit_id","title":"<code>remove_visit_id(visit_id)</code>","text":"<p>Remove a visit from the subject.</p> Source code in <code>src/ResearchOS/DataObjects/subject.py</code> <pre><code>def remove_visit_id(self, visit_id: str):\n    \"\"\"Remove a visit from the subject.\"\"\"\n    from src.ResearchOS.DataObjects.visit import Visit        \n    self._remove_target_object_id(visit_id, cls = Visit)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/","title":"Trial","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>class Trial(DataObject):\n\n    preifx = \"TR\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Trial)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_visits(self) -&gt; list:\n        \"\"\"Return a list of visit objects that belong to this trial.\"\"\"\n        from src.ResearchOS.DataObjects.visit import Visit\n        vs_ids = self._get_all_source_object_ids(cls = Visit)\n        return [Visit(id = vs_id) for vs_id in vs_ids]\n\n    #################### Start Target objects ####################\n    def get_phase_ids(self) -&gt; list:\n        \"\"\"Return a list of phase object IDs that belong to this trial.\"\"\"\n        from src.ResearchOS.DataObjects.phase import Phase\n        ph_ids = self._get_all_target_object_ids(cls = Phase)\n        return [Phase(id = ph_id) for ph_id in ph_ids]\n\n    def add_phase_id(self, phase_id: str):\n        \"\"\"Add a phase to the trial.\"\"\"\n        from src.ResearchOS.DataObjects.phase import Phase        \n        self._add_target_object_id(phase_id, cls = Phase)\n\n    def remove_phase_id(self, phase_id: str):\n        \"\"\"Remove a phase from the trial.\"\"\"\n        from src.ResearchOS.DataObjects.phase import Phase        \n        self._remove_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.add_phase_id","title":"<code>add_phase_id(phase_id)</code>","text":"<p>Add a phase to the trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def add_phase_id(self, phase_id: str):\n    \"\"\"Add a phase to the trial.\"\"\"\n    from src.ResearchOS.DataObjects.phase import Phase        \n    self._add_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.get_phase_ids","title":"<code>get_phase_ids()</code>","text":"<p>Return a list of phase object IDs that belong to this trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def get_phase_ids(self) -&gt; list:\n    \"\"\"Return a list of phase object IDs that belong to this trial.\"\"\"\n    from src.ResearchOS.DataObjects.phase import Phase\n    ph_ids = self._get_all_target_object_ids(cls = Phase)\n    return [Phase(id = ph_id) for ph_id in ph_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.get_visits","title":"<code>get_visits()</code>","text":"<p>Return a list of visit objects that belong to this trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def get_visits(self) -&gt; list:\n    \"\"\"Return a list of visit objects that belong to this trial.\"\"\"\n    from src.ResearchOS.DataObjects.visit import Visit\n    vs_ids = self._get_all_source_object_ids(cls = Visit)\n    return [Visit(id = vs_id) for vs_id in vs_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/trial/#src.ResearchOS.DataObjects.trial.Trial.remove_phase_id","title":"<code>remove_phase_id(phase_id)</code>","text":"<p>Remove a phase from the trial.</p> Source code in <code>src/ResearchOS/DataObjects/trial.py</code> <pre><code>def remove_phase_id(self, phase_id: str):\n    \"\"\"Remove a phase from the trial.\"\"\"\n    from src.ResearchOS.DataObjects.phase import Phase        \n    self._remove_target_object_id(phase_id, cls = Phase)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/","title":"Visit","text":"<p>             Bases: <code>DataObject</code></p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>class Visit(DataObject):\n\n    prefix: str = \"VS\"\n    logsheet_header: str = None\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Visit)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_subjects(self) -&gt; list:\n        \"\"\"Return a list of subject objects that belong to this visit.\"\"\"\n        from src.ResearchOS.DataObjects.subject import Subject\n        sj_ids = self._get_all_source_object_ids(cls = Subject)\n        return [Subject(id = sj_id) for sj_id in sj_ids]\n\n    #################### Start Target objects ####################\n    def get_trials(self) -&gt; list:\n        \"\"\"Return a list of trial objects that belong to this visit.\"\"\"\n        from src.ResearchOS.DataObjects.trial import Trial\n        tr_ids = self._get_all_target_object_ids(cls = Trial)\n        return [Trial(id = tr_id) for tr_id in tr_ids]\n\n    def add_trial_id(self, trial_id: str):\n        \"\"\"Add a trial to the visit.\"\"\"\n        from src.ResearchOS.DataObjects.trial import Trial        \n        self._add_target_object_id(trial_id, cls = Trial)\n\n    def remove_trial_id(self, trial_id: str):\n        \"\"\"Remove a trial from the visit.\"\"\"\n        from src.ResearchOS.DataObjects.trial import Trial        \n        self._remove_target_object_id(trial_id, cls = Trial)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.add_trial_id","title":"<code>add_trial_id(trial_id)</code>","text":"<p>Add a trial to the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def add_trial_id(self, trial_id: str):\n    \"\"\"Add a trial to the visit.\"\"\"\n    from src.ResearchOS.DataObjects.trial import Trial        \n    self._add_target_object_id(trial_id, cls = Trial)\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.get_subjects","title":"<code>get_subjects()</code>","text":"<p>Return a list of subject objects that belong to this visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def get_subjects(self) -&gt; list:\n    \"\"\"Return a list of subject objects that belong to this visit.\"\"\"\n    from src.ResearchOS.DataObjects.subject import Subject\n    sj_ids = self._get_all_source_object_ids(cls = Subject)\n    return [Subject(id = sj_id) for sj_id in sj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.get_trials","title":"<code>get_trials()</code>","text":"<p>Return a list of trial objects that belong to this visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def get_trials(self) -&gt; list:\n    \"\"\"Return a list of trial objects that belong to this visit.\"\"\"\n    from src.ResearchOS.DataObjects.trial import Trial\n    tr_ids = self._get_all_target_object_ids(cls = Trial)\n    return [Trial(id = tr_id) for tr_id in tr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Data%20Object%20Types/visit/#src.ResearchOS.DataObjects.visit.Visit.remove_trial_id","title":"<code>remove_trial_id(trial_id)</code>","text":"<p>Remove a trial from the visit.</p> Source code in <code>src/ResearchOS/DataObjects/visit.py</code> <pre><code>def remove_trial_id(self, trial_id: str):\n    \"\"\"Remove a trial from the visit.\"\"\"\n    from src.ResearchOS.DataObjects.trial import Trial        \n    self._remove_target_object_id(trial_id, cls = Trial)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/","title":"User","text":"<p>             Bases: <code>DataObject</code>, <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>class User(DataObject, PipelineObject):\n\n    prefix: str = \"US\"\n\n    @abstractmethod\n    def new_current(id: str = None, name: str = None):\n        \"\"\"Create a new user and set it as the current one.\"\"\"        \n        user = User(id = id, name = name)\n        User.set_current_user_object_id(id)        \n        return user\n\n    @abstractmethod\n    def get_current_user_object_id() -&gt; str:\n        \"\"\"Get the ID of the current user.\"\"\"\n        cursor = Action.conn.cursor()\n        sqlquery = \"SELECT current_user_object_id FROM current_user\"\n        result = cursor.execute(sqlquery).fetchone()\n        if result is None or len(result) == 0:\n            return None\n        if len(result) &gt; 1:\n            raise AssertionError(\"There are multiple current users.\")\n        return result[0]\n\n    @abstractmethod\n    def set_current_user_object_id(user_object_id: str) -&gt; None:\n        \"\"\"Set the ID of the current user.\"\"\"        \n        sqlquery = f\"INSERT INTO current_user (current_user_object_id) VALUES ('{user_object_id}')\"\n        action = Action(name = \"Set current user\" + user_object_id)\n        action.add_sql_query(sqlquery)\n        action.execute()    \n\n    def get_current_project_id(self) -&gt; str:\n        \"\"\"Return the current project object ID for the current user.\"\"\"                     \n        current_user_object_id = self.get_current_user_object_id()\n        current_user = User(id = current_user_object_id)\n        return current_user.current_project_id\n\n    def set_current_project_id(self, project_id: str) -&gt; None:\n        \"\"\"Set the current project object ID for the current user.\"\"\"        \n        current_user_object_id = self.get_current_user_object_id()\n        current_user = User(id = current_user_object_id)\n        current_user.current_project_id = project_id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.get_current_project_id","title":"<code>get_current_project_id()</code>","text":"<p>Return the current project object ID for the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def get_current_project_id(self) -&gt; str:\n    \"\"\"Return the current project object ID for the current user.\"\"\"                     \n    current_user_object_id = self.get_current_user_object_id()\n    current_user = User(id = current_user_object_id)\n    return current_user.current_project_id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.get_current_user_object_id","title":"<code>get_current_user_object_id()</code>  <code>abstractmethod</code>","text":"<p>Get the ID of the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef get_current_user_object_id() -&gt; str:\n    \"\"\"Get the ID of the current user.\"\"\"\n    cursor = Action.conn.cursor()\n    sqlquery = \"SELECT current_user_object_id FROM current_user\"\n    result = cursor.execute(sqlquery).fetchone()\n    if result is None or len(result) == 0:\n        return None\n    if len(result) &gt; 1:\n        raise AssertionError(\"There are multiple current users.\")\n    return result[0]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.new_current","title":"<code>new_current(id=None, name=None)</code>  <code>abstractmethod</code>","text":"<p>Create a new user and set it as the current one.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef new_current(id: str = None, name: str = None):\n    \"\"\"Create a new user and set it as the current one.\"\"\"        \n    user = User(id = id, name = name)\n    User.set_current_user_object_id(id)        \n    return user\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.set_current_project_id","title":"<code>set_current_project_id(project_id)</code>","text":"<p>Set the current project object ID for the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>def set_current_project_id(self, project_id: str) -&gt; None:\n    \"\"\"Set the current project object ID for the current user.\"\"\"        \n    current_user_object_id = self.get_current_user_object_id()\n    current_user = User(id = current_user_object_id)\n    current_user.current_project_id = project_id\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/user/#src.ResearchOS.user.User.set_current_user_object_id","title":"<code>set_current_user_object_id(user_object_id)</code>  <code>abstractmethod</code>","text":"<p>Set the ID of the current user.</p> Source code in <code>src/ResearchOS/user.py</code> <pre><code>@abstractmethod\ndef set_current_user_object_id(user_object_id: str) -&gt; None:\n    \"\"\"Set the ID of the current user.\"\"\"        \n    sqlquery = f\"INSERT INTO current_user (current_user_object_id) VALUES ('{user_object_id}')\"\n    action = Action(name = \"Set current user\" + user_object_id)\n    action.add_sql_query(sqlquery)\n    action.execute()    \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/","title":"Variable","text":"<p>             Bases: <code>DataObject</code>, <code>PipelineObject</code></p> <p>Variable class.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>class Variable(DataObject, PipelineObject):\n    \"\"\"Variable class.\"\"\"\n\n    prefix: str = \"VR\"           \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Variable)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_source_object_ids(self, cls: type) -&gt; list:\n        \"\"\"Return a list of all source objects for the Variable.\"\"\"\n        from src.ResearchOS.variable import Variable\n        ids = self._get_all_source_object_ids(cls = cls)\n        return [cls(id = id) for id in ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20%26%20Data%20Object%20Types/variable/#src.ResearchOS.variable.Variable.get_source_object_ids","title":"<code>get_source_object_ids(cls)</code>","text":"<p>Return a list of all source objects for the Variable.</p> Source code in <code>src/ResearchOS/variable.py</code> <pre><code>def get_source_object_ids(self, cls: type) -&gt; list:\n    \"\"\"Return a list of all source objects for the Variable.\"\"\"\n    from src.ResearchOS.variable import Variable\n    ids = self._get_all_source_object_ids(cls = cls)\n    return [cls(id = id) for id in ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/","title":"Analysis","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>class Analysis(PipelineObject):\n\n    prefix = \"AN\"    \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Analysis)   \n\n    def new_current(name: str):\n        from src.ResearchOS.PipelineObjects.logsheet import Logsheet        \n        an = Analysis(name = name)\n        lg = Logsheet(name = an.name + \"_Default\")\n        an.current_logsheet_id = lg.id                \n        return an\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_projects(self) -&gt; list:\n        \"\"\"Return a list of project objects that belong to this analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.project import Project\n        pj_ids = self._get_all_source_object_ids(cls = Project)\n        return [Project(id = pj_id) for pj_id in pj_ids]\n\n    #################### Start Target objects ####################\n    def get_logsheets(self) -&gt; list:\n        \"\"\"Return a list of all logsheet objects in the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.logsheet import Logsheet\n        lg_ids = self._get_all_target_object_ids(cls = Logsheet)\n        return [Logsheet(id = lg_id) for lg_id in lg_ids]\n\n    def add_logsheet(self, logsheet_id: str):\n        \"\"\"Add a logsheet to the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.logsheet import Logsheet        \n        self._add_target_object_id(logsheet_id, cls = Logsheet)\n\n    def remove_logsheet(self, logsheet_id: str):\n        \"\"\"Remove a logsheet from the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.logsheet import Logsheet        \n        self._remove_target_object_id(logsheet_id, cls = Logsheet)\n\n    def get_processes(self) -&gt; list:\n        \"\"\"Return a list of all process objects in the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.process import Process\n        pr_ids = self._get_all_target_object_ids(cls = Process)\n        return [Process(id = pr_id) for pr_id in pr_ids]\n\n    def add_process(self, process_id: str):\n        \"\"\"Add a process to the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.process import Process        \n        self._add_target_object_id(process_id, cls = Process)\n\n    def remove_process(self, process_id: str):\n        \"\"\"Remove a process from the analysis.\"\"\"\n        from src.ResearchOS.PipelineObjects.process import Process        \n        self._remove_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.add_logsheet","title":"<code>add_logsheet(logsheet_id)</code>","text":"<p>Add a logsheet to the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def add_logsheet(self, logsheet_id: str):\n    \"\"\"Add a logsheet to the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.logsheet import Logsheet        \n    self._add_target_object_id(logsheet_id, cls = Logsheet)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.add_process","title":"<code>add_process(process_id)</code>","text":"<p>Add a process to the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def add_process(self, process_id: str):\n    \"\"\"Add a process to the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.process import Process        \n    self._add_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_logsheets","title":"<code>get_logsheets()</code>","text":"<p>Return a list of all logsheet objects in the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_logsheets(self) -&gt; list:\n    \"\"\"Return a list of all logsheet objects in the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.logsheet import Logsheet\n    lg_ids = self._get_all_target_object_ids(cls = Logsheet)\n    return [Logsheet(id = lg_id) for lg_id in lg_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_processes","title":"<code>get_processes()</code>","text":"<p>Return a list of all process objects in the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_processes(self) -&gt; list:\n    \"\"\"Return a list of all process objects in the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.process import Process\n    pr_ids = self._get_all_target_object_ids(cls = Process)\n    return [Process(id = pr_id) for pr_id in pr_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.get_projects","title":"<code>get_projects()</code>","text":"<p>Return a list of project objects that belong to this analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def get_projects(self) -&gt; list:\n    \"\"\"Return a list of project objects that belong to this analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.project import Project\n    pj_ids = self._get_all_source_object_ids(cls = Project)\n    return [Project(id = pj_id) for pj_id in pj_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.remove_logsheet","title":"<code>remove_logsheet(logsheet_id)</code>","text":"<p>Remove a logsheet from the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def remove_logsheet(self, logsheet_id: str):\n    \"\"\"Remove a logsheet from the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.logsheet import Logsheet        \n    self._remove_target_object_id(logsheet_id, cls = Logsheet)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/analysis/#src.ResearchOS.PipelineObjects.analysis.Analysis.remove_process","title":"<code>remove_process(process_id)</code>","text":"<p>Remove a process from the analysis.</p> Source code in <code>src/ResearchOS/PipelineObjects/analysis.py</code> <pre><code>def remove_process(self, process_id: str):\n    \"\"\"Remove a process from the analysis.\"\"\"\n    from src.ResearchOS.PipelineObjects.process import Process        \n    self._remove_target_object_id(process_id, cls = Process)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/","title":"Logsheet","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>class Logsheet(PipelineObject):\n\n    prefix = \"LG\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Logsheet)\n\n    #################### Start class-specific attributes ###################\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the attributes that are required by ResearchOS.\n        Other attributes can be added &amp; modified later.\"\"\"\n        attrs = {}        \n        if self.is_instance_object:\n            attrs[\"logsheet_path\"] = DEFAULT_LOGSHEET_PATH # Path to logsheet.\n            attrs[\"logsheet_headers\"] = DEFAULT_LOGSHEET_HEADERS # List of tuples. Each tuple is: (header_name, type, variable ID)\n            attrs[\"num_header_rows\"] = DEFAULT_NUM_HEADER_ROWS # Integer\n            attrs[\"class_column_names\"] = DEFAULT_CLASS_COLUMN_NAMES # dict where the keys are logsheet column names (first column of logsheet_headers), values are class types        \n        super().__init__(attrs = attrs)\n\n    def json_translate_logsheet_headers(self):\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n\n    def json_translate_class_column_names(self):\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n\n    def validate_num_header_rows(self, num_header_rows):\n        \"\"\"Validate the number of header rows. If it is not valid, the value is rejected.\"\"\"        \n        if not isinstance(num_header_rows, int):\n            raise ValueError(\"Num header rows must be an integer!\")\n        if num_header_rows&lt;0:\n            raise ValueError(\"Num header rows must be positive!\")\n        if num_header_rows % 1 != 0:\n            raise ValueError(\"Num header rows must be an integer!\")\n\n    #################### Start Source objects ####################\n    def get_analyses(self) -&gt; list:\n        \"\"\"Return a list of analysis objects that belong to this logsheet.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis\n        an_ids = self._get_all_source_object_ids(cls = Analysis)\n        return [Analysis(id = an_id) for an_id in an_ids]\n\n    #################### Start Target objects ####################\n    def get_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this logsheet.\"\"\"\n        from src.ResearchOS.variable import Variable\n        return self._get_all_target_object_ids(cls = Variable)\n\n    def add_variable_id(self, variable_id: str):\n        \"\"\"Add a variable to the logsheet.\"\"\"\n        # TODO: Mapping between variable ID and column header.\n        from src.ResearchOS.variable import Variable\n        self._add_target_object_id(variable_id, cls = Variable)\n\n    def remove_variable_id(self, variable_id: str):\n        \"\"\"Remove a variable from the logsheet.\"\"\"\n        from src.ResearchOS.variable import Variable\n        self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the attributes that are required by ResearchOS. Other attributes can be added &amp; modified later.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the attributes that are required by ResearchOS.\n    Other attributes can be added &amp; modified later.\"\"\"\n    attrs = {}        \n    if self.is_instance_object:\n        attrs[\"logsheet_path\"] = DEFAULT_LOGSHEET_PATH # Path to logsheet.\n        attrs[\"logsheet_headers\"] = DEFAULT_LOGSHEET_HEADERS # List of tuples. Each tuple is: (header_name, type, variable ID)\n        attrs[\"num_header_rows\"] = DEFAULT_NUM_HEADER_ROWS # Integer\n        attrs[\"class_column_names\"] = DEFAULT_CLASS_COLUMN_NAMES # dict where the keys are logsheet column names (first column of logsheet_headers), values are class types        \n    super().__init__(attrs = attrs)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.add_variable_id","title":"<code>add_variable_id(variable_id)</code>","text":"<p>Add a variable to the logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def add_variable_id(self, variable_id: str):\n    \"\"\"Add a variable to the logsheet.\"\"\"\n    # TODO: Mapping between variable ID and column header.\n    from src.ResearchOS.variable import Variable\n    self._add_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects that belong to this logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def get_analyses(self) -&gt; list:\n    \"\"\"Return a list of analysis objects that belong to this logsheet.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis\n    an_ids = self._get_all_source_object_ids(cls = Analysis)\n    return [Analysis(id = an_id) for an_id in an_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.get_variable_ids","title":"<code>get_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def get_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this logsheet.\"\"\"\n    from src.ResearchOS.variable import Variable\n    return self._get_all_target_object_ids(cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.json_translate_class_column_names","title":"<code>json_translate_class_column_names()</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def json_translate_class_column_names(self):\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.json_translate_logsheet_headers","title":"<code>json_translate_logsheet_headers()</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def json_translate_logsheet_headers(self):\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"        \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.remove_variable_id","title":"<code>remove_variable_id(variable_id)</code>","text":"<p>Remove a variable from the logsheet.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def remove_variable_id(self, variable_id: str):\n    \"\"\"Remove a variable from the logsheet.\"\"\"\n    from src.ResearchOS.variable import Variable\n    self._remove_target_object_id(variable_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/logsheet/#src.ResearchOS.PipelineObjects.logsheet.Logsheet.validate_num_header_rows","title":"<code>validate_num_header_rows(num_header_rows)</code>","text":"<p>Validate the number of header rows. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/logsheet.py</code> <pre><code>def validate_num_header_rows(self, num_header_rows):\n    \"\"\"Validate the number of header rows. If it is not valid, the value is rejected.\"\"\"        \n    if not isinstance(num_header_rows, int):\n        raise ValueError(\"Num header rows must be an integer!\")\n    if num_header_rows&lt;0:\n        raise ValueError(\"Num header rows must be positive!\")\n    if num_header_rows % 1 != 0:\n        raise ValueError(\"Num header rows must be an integer!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/pipeline_object/","title":"Pipeline Objects","text":"<p>             Bases: <code>ResearchObject</code></p> <p>Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views</p> Source code in <code>src/ResearchOS/PipelineObjects/pipeline_object.py</code> <pre><code>class PipelineObject(ResearchObject):\n    \"\"\"Parent class of all pipeline objects: Projects, Analyses, Logsheets, Process Groups, Processes, Variables, SpecifyTrials, Views\"\"\"\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/","title":"Process","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>class Process(PipelineObject):\n\n    prefix = \"PR\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Process)\n\n    #################### Start class-specific attributes ###################\n\n    #################### Start Source objects ####################\n    def get_analyses(self) -&gt; list:\n        \"\"\"Return a list of analysis objects that belong to this process.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis\n        an_ids = self._get_all_source_object_ids(cls = Analysis)\n        return [Analysis(id = an_id) for an_id in an_ids]\n\n    #################### Start Target objects ####################\n    def get_input_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n        from src.ResearchOS.variable import Variable\n        return self._get_all_source_object_ids(cls = Variable)\n\n    def get_output_variable_ids(self) -&gt; list:\n        \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n        from src.ResearchOS.variable import Variable\n        return self._get_all_target_object_ids(cls = Variable)\n\n    def add_input_variable(self, var_id):\n        \"\"\"Add an input variable to the process.\"\"\"\n        # TODO: Need to add a mapping between variable ID and name in code.\n        from src.ResearchOS.variable import Variable        \n        self._add_source_object_id(var_id, cls = Variable)\n\n    def add_output_variable(self, var_id):\n        \"\"\"Add an output variable to the process.\"\"\"\n        # TODO: Need to add a mapping between variable ID and name in code.\n        from src.ResearchOS.variable import Variable        \n        self._add_target_object_id(var_id, cls = Variable)\n\n    def remove_input_variable(self, var_id):\n        \"\"\"Remove an input variable from the process.\"\"\"\n        from src.ResearchOS.variable import Variable        \n        self._remove_source_object_id(var_id, cls = Variable)\n\n    def remove_output_variable(self, var_id):\n        \"\"\"Remove an output variable from the process.\"\"\"\n        from src.ResearchOS.variable import Variable        \n        self._remove_target_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.add_input_variable","title":"<code>add_input_variable(var_id)</code>","text":"<p>Add an input variable to the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def add_input_variable(self, var_id):\n    \"\"\"Add an input variable to the process.\"\"\"\n    # TODO: Need to add a mapping between variable ID and name in code.\n    from src.ResearchOS.variable import Variable        \n    self._add_source_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.add_output_variable","title":"<code>add_output_variable(var_id)</code>","text":"<p>Add an output variable to the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def add_output_variable(self, var_id):\n    \"\"\"Add an output variable to the process.\"\"\"\n    # TODO: Need to add a mapping between variable ID and name in code.\n    from src.ResearchOS.variable import Variable        \n    self._add_target_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_analyses(self) -&gt; list:\n    \"\"\"Return a list of analysis objects that belong to this process.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis\n    an_ids = self._get_all_source_object_ids(cls = Analysis)\n    return [Analysis(id = an_id) for an_id in an_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_input_variable_ids","title":"<code>get_input_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_input_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n    from src.ResearchOS.variable import Variable\n    return self._get_all_source_object_ids(cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.get_output_variable_ids","title":"<code>get_output_variable_ids()</code>","text":"<p>Return a list of variable IDs that belong to this process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def get_output_variable_ids(self) -&gt; list:\n    \"\"\"Return a list of variable IDs that belong to this process.\"\"\"\n    from src.ResearchOS.variable import Variable\n    return self._get_all_target_object_ids(cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.remove_input_variable","title":"<code>remove_input_variable(var_id)</code>","text":"<p>Remove an input variable from the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def remove_input_variable(self, var_id):\n    \"\"\"Remove an input variable from the process.\"\"\"\n    from src.ResearchOS.variable import Variable        \n    self._remove_source_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process/#src.ResearchOS.PipelineObjects.process.Process.remove_output_variable","title":"<code>remove_output_variable(var_id)</code>","text":"<p>Remove an output variable from the process.</p> Source code in <code>src/ResearchOS/PipelineObjects/process.py</code> <pre><code>def remove_output_variable(self, var_id):\n    \"\"\"Remove an output variable from the process.\"\"\"\n    from src.ResearchOS.variable import Variable        \n    self._remove_target_object_id(var_id, cls = Variable)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/process_group/","title":"ProcessGroup","text":"<p>             Bases: <code>PipelineObject</code></p> Source code in <code>src/ResearchOS/PipelineObjects/process_group.py</code> <pre><code>class ProcessGroup(PipelineObject):\n    pass\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/","title":"Project","text":"<p>Inherits from PipelineObject</p> <p>             Bases: <code>PipelineObject</code></p> <p>A project is a collection of analyses. Class-specific Attributes: 1. current_analysis_id: The ID of the current analysis for this project. 2. current_dataset_id: The ID of the current dataset for this project. 3. project path: The root folder location of the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>class Project(PipelineObject):\n    \"\"\"A project is a collection of analyses.\n    Class-specific Attributes:\n    1. current_analysis_id: The ID of the current analysis for this project.\n    2. current_dataset_id: The ID of the current dataset for this project.\n    3. project path: The root folder location of the project.\"\"\"\n\n    prefix: str = \"PJ\"      \n    DEFAULT_CURRENT_ANALYSIS_ID: str = \"\"\n    DEFAULT_CURRENT_DATASET_ID: str = \"\"\n    DEFAULT_PROJECT_PATH: str = \"\"  \n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Project)\n\n    @abstractmethod\n    def new_current(name: str) -&gt; \"Project\":\n        \"\"\"Create a new analysis and set it as the current analysis for the current project.\n        Returns the project &amp; analysis objects as a tuple.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis\n        pj = Project(name = name)\n        an = Analysis(name = pj.name + \"_Default_Analysis\")\n        pj.current_analysis_id = an.id\n        return pj, an\n\n    #################### Start class-specific attributes ###################\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the attributes that are required by ResearchOS.\n        Other attributes can be added &amp; modified later.\"\"\"\n        attrs = {}\n        attrs[\"current_analysis_id\"] = Project.DEFAULT_CURRENT_ANALYSIS_ID # The current analysis for the project.\n        attrs[\"current_dataset_id\"] = Project.DEFAULT_CURRENT_DATASET_ID # The current dataset for the project.\n        attrs[\"project_path\"] = Project.DEFAULT_PROJECT_PATH # The root folder for the current project.\n        super().__init__(attrs = attrs)            \n\n    def validate_current_analysis_id(self, id: str):\n        \"\"\"Validate the current analysis ID. If it is not valid, the value is rejected.\"\"\"        \n        if not self.is_id(id):\n            raise ValueError(\"Specified value is not an ID!\")\n        parsed_id = self.parse_id(id)\n        if parsed_id[0] != \"AN\":\n            raise ValueError(\"Specified ID is not an Analysis!\")\n        if not self.object_exists(id):\n            raise ValueError(\"Analysis does not exist!\")\n\n    def validate_current_dataset_id(self, id: str):\n        \"\"\"Validate the current dataset ID. If it is not valid, the value is rejected.\"\"\"\n        if not self.is_id(id):\n            raise ValueError(\"Specified value is not an ID!\")\n        parsed_id = self.parse_id(id)\n        if parsed_id[0] != \"DS\":\n            raise ValueError(\"Specified ID is not a Dataset!\")\n        if not self.object_exists(id):\n            raise ValueError(\"Dataset does not exist!\")\n\n    def validate_project_path(self, path: str):\n        \"\"\"Validate the project path. If it is not valid, the value is rejected.\"\"\"\n        # 1. Check that the path exists in the file system.\n        import os\n        if not os.path.exists(path):\n            raise ValueError(\"Specified path does not exist!\")        \n\n    def json_translate_XXX(self) -&gt; type:\n        \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n        XXX is the exact name of the attribute. Method name must follow this format.\"\"\"\n\n    #################### Start Source objects ####################\n    def get_users(self) -&gt; list:\n        \"\"\"Return a list of user objects that belong to this project. Identical to Dataset.get_users()\"\"\"\n        from src.ResearchOS.user import User\n        us_ids = self._get_all_source_object_ids(cls = User)\n        return [User(id = us_id) for us_id in us_ids]\n\n    #################### Start Target objects ####################\n    def get_analyses(self) -&gt; list[\"Analysis\"]:        \n        \"\"\"Return a list of analysis objects in the project.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis\n        an_ids = self._get_all_target_object_ids(cls = Analysis)\n        return [Analysis(id = an_id) for an_id in an_ids]\n\n    def add_analysis_id(self, analysis_id: str):\n        \"\"\"Add an analysis to the project.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis        \n        self._add_target_object_id(analysis_id, cls = Analysis)\n\n    def remove_analysis_id(self, analysis_id: str):\n        \"\"\"Remove an analysis from the project.\"\"\"\n        from src.ResearchOS.PipelineObjects.analysis import Analysis        \n        self._remove_target_object_id(analysis_id, cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the attributes that are required by ResearchOS. Other attributes can be added &amp; modified later.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the attributes that are required by ResearchOS.\n    Other attributes can be added &amp; modified later.\"\"\"\n    attrs = {}\n    attrs[\"current_analysis_id\"] = Project.DEFAULT_CURRENT_ANALYSIS_ID # The current analysis for the project.\n    attrs[\"current_dataset_id\"] = Project.DEFAULT_CURRENT_DATASET_ID # The current dataset for the project.\n    attrs[\"project_path\"] = Project.DEFAULT_PROJECT_PATH # The root folder for the current project.\n    super().__init__(attrs = attrs)            \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.add_analysis_id","title":"<code>add_analysis_id(analysis_id)</code>","text":"<p>Add an analysis to the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def add_analysis_id(self, analysis_id: str):\n    \"\"\"Add an analysis to the project.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis        \n    self._add_target_object_id(analysis_id, cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.get_analyses","title":"<code>get_analyses()</code>","text":"<p>Return a list of analysis objects in the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def get_analyses(self) -&gt; list[\"Analysis\"]:        \n    \"\"\"Return a list of analysis objects in the project.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis\n    an_ids = self._get_all_target_object_ids(cls = Analysis)\n    return [Analysis(id = an_id) for an_id in an_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.get_users","title":"<code>get_users()</code>","text":"<p>Return a list of user objects that belong to this project. Identical to Dataset.get_users()</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def get_users(self) -&gt; list:\n    \"\"\"Return a list of user objects that belong to this project. Identical to Dataset.get_users()\"\"\"\n    from src.ResearchOS.user import User\n    us_ids = self._get_all_source_object_ids(cls = User)\n    return [User(id = us_id) for us_id in us_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.json_translate_XXX","title":"<code>json_translate_XXX()</code>","text":"<p>Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient. XXX is the exact name of the attribute. Method name must follow this format.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def json_translate_XXX(self) -&gt; type:\n    \"\"\"Convert the attribute from JSON to the proper data type/format, if json.loads is not sufficient.\n    XXX is the exact name of the attribute. Method name must follow this format.\"\"\"\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.new_current","title":"<code>new_current(name)</code>  <code>abstractmethod</code>","text":"<p>Create a new analysis and set it as the current analysis for the current project. Returns the project &amp; analysis objects as a tuple.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>@abstractmethod\ndef new_current(name: str) -&gt; \"Project\":\n    \"\"\"Create a new analysis and set it as the current analysis for the current project.\n    Returns the project &amp; analysis objects as a tuple.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis\n    pj = Project(name = name)\n    an = Analysis(name = pj.name + \"_Default_Analysis\")\n    pj.current_analysis_id = an.id\n    return pj, an\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.remove_analysis_id","title":"<code>remove_analysis_id(analysis_id)</code>","text":"<p>Remove an analysis from the project.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def remove_analysis_id(self, analysis_id: str):\n    \"\"\"Remove an analysis from the project.\"\"\"\n    from src.ResearchOS.PipelineObjects.analysis import Analysis        \n    self._remove_target_object_id(analysis_id, cls = Analysis)\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_current_analysis_id","title":"<code>validate_current_analysis_id(id)</code>","text":"<p>Validate the current analysis ID. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_current_analysis_id(self, id: str):\n    \"\"\"Validate the current analysis ID. If it is not valid, the value is rejected.\"\"\"        \n    if not self.is_id(id):\n        raise ValueError(\"Specified value is not an ID!\")\n    parsed_id = self.parse_id(id)\n    if parsed_id[0] != \"AN\":\n        raise ValueError(\"Specified ID is not an Analysis!\")\n    if not self.object_exists(id):\n        raise ValueError(\"Analysis does not exist!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_current_dataset_id","title":"<code>validate_current_dataset_id(id)</code>","text":"<p>Validate the current dataset ID. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_current_dataset_id(self, id: str):\n    \"\"\"Validate the current dataset ID. If it is not valid, the value is rejected.\"\"\"\n    if not self.is_id(id):\n        raise ValueError(\"Specified value is not an ID!\")\n    parsed_id = self.parse_id(id)\n    if parsed_id[0] != \"DS\":\n        raise ValueError(\"Specified ID is not a Dataset!\")\n    if not self.object_exists(id):\n        raise ValueError(\"Dataset does not exist!\")\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/project/#src.ResearchOS.PipelineObjects.project.Project.validate_project_path","title":"<code>validate_project_path(path)</code>","text":"<p>Validate the project path. If it is not valid, the value is rejected.</p> Source code in <code>src/ResearchOS/PipelineObjects/project.py</code> <pre><code>def validate_project_path(self, path: str):\n    \"\"\"Validate the project path. If it is not valid, the value is rejected.\"\"\"\n    # 1. Check that the path exists in the file system.\n    import os\n    if not os.path.exists(path):\n        raise ValueError(\"Specified path does not exist!\")        \n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/","title":"Subset","text":"<p>Inherits from PipelineObject</p> <p>             Bases: <code>PipelineObject</code></p> <p>Provides rules to select a subset of data from a dataset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>class Subset(PipelineObject):\n    \"\"\"Provides rules to select a subset of data from a dataset.\"\"\"\n\n    prefix = \"SS\"\n\n    @abstractmethod\n    def get_all_ids() -&gt; list[str]:\n        return super().get_all_ids(Subset)\n\n    #################### Start class-specific attributes ###################\n    def add_criteria(self, var_id: str, value, logic: str) -&gt; None:\n        \"\"\"Add a criterion to the subset.\n        Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".\"\"\"\n        from src.ResearchOS.variable import Variable\n        logic_options = [\"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\"]\n        if logic not in logic_options:\n            raise ValueError(\"Invalid logic value.\")\n        if var_id not in Variable.get_all_ids():\n            raise ValueError(\"Invalid variable ID.\")\n        self.criteria.append((var_id, value, logic))\n\n    #################### Start Source objects ####################\n    def get_processes(self) -&gt; list:\n        \"\"\"Return a list of process objects that belong to this subset.\"\"\"\n        from src.ResearchOS.PipelineObjects.process import Process\n        pr_ids = self._get_all_source_object_ids(cls = Process)\n        return [Process(id = pr_id) for pr_id in pr_ids]\n\n    def get_plots(self) -&gt; list:\n        \"\"\"Return a list of plot objects that belong to this subset.\"\"\"\n        from src.ResearchOS.PipelineObjects.plot import Plot\n        pl_ids = self._get_all_source_object_ids(cls = Plot)\n        return [Plot(id = pl_id) for pl_id in pl_ids]\n\n    def get_logsheets(self) -&gt; list:\n        \"\"\"Return a list of logsheet objects that belong to this subset.\"\"\"\n        from src.ResearchOS.PipelineObjects.logsheet import Logsheet\n        lg_ids = self._get_all_source_object_ids(cls = Logsheet)\n        return [Logsheet(id = lg_id) for lg_id in lg_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.add_criteria","title":"<code>add_criteria(var_id, value, logic)</code>","text":"<p>Add a criterion to the subset. Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def add_criteria(self, var_id: str, value, logic: str) -&gt; None:\n    \"\"\"Add a criterion to the subset.\n    Possible values for logic are: \"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\".\"\"\"\n    from src.ResearchOS.variable import Variable\n    logic_options = [\"&gt;\", \"&lt;\", \"&gt;=\", \"&lt;=\", \"==\", \"!=\", \"in\", \"not in\", \"is\", \"is not\", \"contains\", \"not contains\"]\n    if logic not in logic_options:\n        raise ValueError(\"Invalid logic value.\")\n    if var_id not in Variable.get_all_ids():\n        raise ValueError(\"Invalid variable ID.\")\n    self.criteria.append((var_id, value, logic))\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_logsheets","title":"<code>get_logsheets()</code>","text":"<p>Return a list of logsheet objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_logsheets(self) -&gt; list:\n    \"\"\"Return a list of logsheet objects that belong to this subset.\"\"\"\n    from src.ResearchOS.PipelineObjects.logsheet import Logsheet\n    lg_ids = self._get_all_source_object_ids(cls = Logsheet)\n    return [Logsheet(id = lg_id) for lg_id in lg_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_plots","title":"<code>get_plots()</code>","text":"<p>Return a list of plot objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_plots(self) -&gt; list:\n    \"\"\"Return a list of plot objects that belong to this subset.\"\"\"\n    from src.ResearchOS.PipelineObjects.plot import Plot\n    pl_ids = self._get_all_source_object_ids(cls = Plot)\n    return [Plot(id = pl_id) for pl_id in pl_ids]\n</code></pre>"},{"location":"Research%20Object%20Types/Pipeline%20Object%20Types/subset/#src.ResearchOS.PipelineObjects.subset.Subset.get_processes","title":"<code>get_processes()</code>","text":"<p>Return a list of process objects that belong to this subset.</p> Source code in <code>src/ResearchOS/PipelineObjects/subset.py</code> <pre><code>def get_processes(self) -&gt; list:\n    \"\"\"Return a list of process objects that belong to this subset.\"\"\"\n    from src.ResearchOS.PipelineObjects.process import Process\n    pr_ids = self._get_all_source_object_ids(cls = Process)\n    return [Process(id = pr_id) for pr_id in pr_ids]\n</code></pre>"}]}